
// Generated from MavkaLexer.g4 by ANTLR 4.13.0


#include "MavkaLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct MavkaLexerStaticData final {
  MavkaLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MavkaLexerStaticData(const MavkaLexerStaticData&) = delete;
  MavkaLexerStaticData(MavkaLexerStaticData&&) = delete;
  MavkaLexerStaticData& operator=(const MavkaLexerStaticData&) = delete;
  MavkaLexerStaticData& operator=(MavkaLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag mavkalexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
MavkaLexerStaticData *mavkalexerLexerStaticData = nullptr;

void mavkalexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (mavkalexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(mavkalexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MavkaLexerStaticData>(
    std::vector<std::string>{
      "KW_END", "KW_DIIA", "KW_STRUCTURE", "KW_FOR", "KW_IF", "KW_WAIT", 
      "KW_TAKE", "KW_GIVE", "KW_AS", "KW_TA", "KW_IS", "KW_SPEC", "KW_RETURN", 
      "KW_ASYNC", "KW_SUBJECT", "KW_AND", "KW_OR", "KW_TRY", "KW_CATCH", 
      "KW_ELSE", "KW_THROW", "KW_WHILE", "KW_MODULE", "KW_EQ_WORD", "KW_GR_WORD", 
      "KW_SM_WORD", "KW_HAS_IS_WORD", "KW_MOCKUP", "KW_NOT", "KW_JS", "KW_PARENT", 
      "KW_TSE", "EQUAL", "GREATER", "LESSER", "DOT", "PLUS", "MINUS", "MULTIPLY", 
      "DIVIDE", "MOD", "POWER", "AND", "OR", "PAREN_OPEN", "PAREN_CLOSE", 
      "BRACKET_OPEN", "BRACKET_CLOSE", "QUESTION", "COLON", "TILDA", "QUOTE", 
      "DOUBLE_QUOTE", "EXCLAMATION", "COMA", "INTEGER", "FLOAT", "HEX", 
      "BIN", "NUMBER", "ID", "KWID", "STRING_MULTILINE", "STRING", "COMP_INST_START", 
      "COMP_INST_END", "COMP_INST_ASSIGN", "COMMENT", "LINE_COMMENT", "MRM_DIIA", 
      "NL", "WS", "DIGIT", "ID_START", "ID_CONTINUE", "TRIPPLE_QUOTED_STRING_PART", 
      "ESCAPED_TRIPPLE_QUOTE"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", "'\\u0434\\u0456\\u044F'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'\\u043F\\u0435\\u0440\\u0435\\u0431\\u0440\\u0430\\u0442\\u0438'", 
      "'\\u044F\\u043A\\u0449\\u043E'", "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", 
      "'\\u0432\\u0437\\u044F\\u0442\\u0438'", "'\\u0434\\u0430\\u0442\\u0438'", 
      "'\\u044F\\u043A'", "'\\u0442\\u0430'", "'\\u0454'", "'\\u0441\\u043F\\u0435\\u0446'", 
      "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", "'\\u0442\\u0440\\u0438\\u0432\\u0430\\u043B\\u0430'", 
      "'\\u0441\\u0443\\u0431\\u02BC\\u0454\\u043A\\u0442'", "'\\u0456'", 
      "'\\u0430\\u0431\\u043E'", "'\\u0441\\u043F\\u0440\\u043E\\u0431\\u0443\\u0432\\u0430\\u0442\\u0438'", 
      "'\\u0437\\u043B\\u043E\\u0432\\u0438\\u0442\\u0438'", "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", 
      "'\\u0432\\u043F\\u0430\\u0441\\u0442\\u0438'", "'\\u043F\\u043E\\u043A\\u0438'", 
      "'\\u043C\\u043E\\u0434\\u0443\\u043B\\u044C'", "'\\u0440\\u0456\\u0432\\u043D\\u043E'", 
      "'\\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", "'\\u043C\\u0435\\u043D\\u0448\\u0435'", 
      "'\\u043C\\u0456\\u0441\\u0442\\u0438\\u0442\\u044C'", "'\\u043C\\u0430\\u043A\\u0435\\u0442'", 
      "'\\u043D\\u0435'", "'js'", "'\\u043F\\u0440\\u0435\\u0434\\u043E\\u043A'", 
      "'\\u0446\\u0435'", "'='", "'>'", "'<'", "'.'", "'+'", "'-'", "'*'", 
      "'/'", "'%'", "'^'", "'&'", "'|'", "'('", "')'", "'['", "']'", "'\\u003F'", 
      "':'", "'~'", "'''", "'\"'", "'!'", "','"
    },
    std::vector<std::string>{
      "", "KW_END", "KW_DIIA", "KW_STRUCTURE", "KW_FOR", "KW_IF", "KW_WAIT", 
      "KW_TAKE", "KW_GIVE", "KW_AS", "KW_TA", "KW_IS", "KW_SPEC", "KW_RETURN", 
      "KW_ASYNC", "KW_SUBJECT", "KW_AND", "KW_OR", "KW_TRY", "KW_CATCH", 
      "KW_ELSE", "KW_THROW", "KW_WHILE", "KW_MODULE", "KW_EQ_WORD", "KW_GR_WORD", 
      "KW_SM_WORD", "KW_HAS_IS_WORD", "KW_MOCKUP", "KW_NOT", "KW_JS", "KW_PARENT", 
      "KW_TSE", "EQUAL", "GREATER", "LESSER", "DOT", "PLUS", "MINUS", "MULTIPLY", 
      "DIVIDE", "MOD", "POWER", "AND", "OR", "PAREN_OPEN", "PAREN_CLOSE", 
      "BRACKET_OPEN", "BRACKET_CLOSE", "QUESTION", "COLON", "TILDA", "QUOTE", 
      "DOUBLE_QUOTE", "EXCLAMATION", "COMA", "INTEGER", "FLOAT", "HEX", 
      "BIN", "NUMBER", "ID", "KWID", "STRING_MULTILINE", "STRING", "COMP_INST_START", 
      "COMP_INST_END", "COMP_INST_ASSIGN", "COMMENT", "LINE_COMMENT", "MRM_DIIA", 
      "NL", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,72,575,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,1,0,
  	1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
  	1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
  	7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,
  	1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
  	1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
  	1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
  	1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,
  	1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,
  	1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,
  	1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,
  	1,55,4,55,394,8,55,11,55,12,55,395,1,56,4,56,399,8,56,11,56,12,56,400,
  	1,56,1,56,4,56,405,8,56,11,56,12,56,406,1,57,1,57,1,57,1,57,4,57,413,
  	8,57,11,57,12,57,414,1,58,1,58,1,58,4,58,420,8,58,11,58,12,58,421,1,59,
  	1,59,1,59,1,59,3,59,428,8,59,1,60,1,60,5,60,432,8,60,10,60,12,60,435,
  	9,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
  	1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
  	1,61,1,61,1,61,1,61,1,61,1,61,3,61,470,8,61,1,62,1,62,1,62,1,62,5,62,
  	476,8,62,10,62,12,62,479,9,62,1,62,1,62,1,62,1,62,1,63,1,63,5,63,487,
  	8,63,10,63,12,63,490,9,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,
  	1,66,1,66,1,67,1,67,1,67,1,67,1,67,5,67,508,8,67,10,67,12,67,511,9,67,
  	1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,5,68,523,8,68,10,68,
  	12,68,526,9,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,5,69,537,
  	8,69,10,69,12,69,540,9,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,70,3,70,
  	550,8,70,1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,
  	1,74,3,74,565,8,74,1,75,1,75,4,75,569,8,75,11,75,12,75,570,1,76,1,76,
  	1,76,4,477,509,538,570,0,77,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
  	10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
  	43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
  	33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
  	89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,
  	111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,
  	131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,0,147,0,149,0,151,
  	0,153,0,1,0,8,4,0,88,88,120,120,1064,1064,1096,1096,5,0,65,70,97,102,
  	1040,1044,1072,1076,1168,1169,4,0,66,66,98,98,1044,1044,1076,1076,3,0,
  	10,10,13,13,34,34,2,0,10,10,13,13,2,0,9,9,32,32,9,0,65,90,95,95,97,122,
  	1028,1028,1030,1031,1040,1103,1108,1108,1110,1111,1168,1169,2,0,48,57,
  	700,700,622,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
  	0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
  	21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
  	0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
  	0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
  	53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
  	0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
  	0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
  	85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,
  	0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,
  	0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,
  	0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,
  	0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,
  	0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,1,155,1,0,
  	0,0,3,162,1,0,0,0,5,166,1,0,0,0,7,176,1,0,0,0,9,186,1,0,0,0,11,191,1,
  	0,0,0,13,198,1,0,0,0,15,204,1,0,0,0,17,209,1,0,0,0,19,212,1,0,0,0,21,
  	215,1,0,0,0,23,217,1,0,0,0,25,222,1,0,0,0,27,230,1,0,0,0,29,238,1,0,0,
  	0,31,246,1,0,0,0,33,248,1,0,0,0,35,252,1,0,0,0,37,263,1,0,0,0,39,271,
  	1,0,0,0,41,278,1,0,0,0,43,285,1,0,0,0,45,290,1,0,0,0,47,297,1,0,0,0,49,
  	303,1,0,0,0,51,310,1,0,0,0,53,316,1,0,0,0,55,324,1,0,0,0,57,330,1,0,0,
  	0,59,333,1,0,0,0,61,336,1,0,0,0,63,343,1,0,0,0,65,346,1,0,0,0,67,348,
  	1,0,0,0,69,350,1,0,0,0,71,352,1,0,0,0,73,354,1,0,0,0,75,356,1,0,0,0,77,
  	358,1,0,0,0,79,360,1,0,0,0,81,362,1,0,0,0,83,364,1,0,0,0,85,366,1,0,0,
  	0,87,368,1,0,0,0,89,370,1,0,0,0,91,372,1,0,0,0,93,374,1,0,0,0,95,376,
  	1,0,0,0,97,378,1,0,0,0,99,380,1,0,0,0,101,382,1,0,0,0,103,384,1,0,0,0,
  	105,386,1,0,0,0,107,388,1,0,0,0,109,390,1,0,0,0,111,393,1,0,0,0,113,398,
  	1,0,0,0,115,408,1,0,0,0,117,416,1,0,0,0,119,427,1,0,0,0,121,429,1,0,0,
  	0,123,436,1,0,0,0,125,471,1,0,0,0,127,484,1,0,0,0,129,493,1,0,0,0,131,
  	496,1,0,0,0,133,499,1,0,0,0,135,502,1,0,0,0,137,518,1,0,0,0,139,529,1,
  	0,0,0,141,549,1,0,0,0,143,553,1,0,0,0,145,557,1,0,0,0,147,559,1,0,0,0,
  	149,564,1,0,0,0,151,568,1,0,0,0,153,572,1,0,0,0,155,156,5,1082,0,0,156,
  	157,5,1110,0,0,157,158,5,1085,0,0,158,159,5,1077,0,0,159,160,5,1094,0,
  	0,160,161,5,1100,0,0,161,2,1,0,0,0,162,163,5,1076,0,0,163,164,5,1110,
  	0,0,164,165,5,1103,0,0,165,4,1,0,0,0,166,167,5,1089,0,0,167,168,5,1090,
  	0,0,168,169,5,1088,0,0,169,170,5,1091,0,0,170,171,5,1082,0,0,171,172,
  	5,1090,0,0,172,173,5,1091,0,0,173,174,5,1088,0,0,174,175,5,1072,0,0,175,
  	6,1,0,0,0,176,177,5,1087,0,0,177,178,5,1077,0,0,178,179,5,1088,0,0,179,
  	180,5,1077,0,0,180,181,5,1073,0,0,181,182,5,1088,0,0,182,183,5,1072,0,
  	0,183,184,5,1090,0,0,184,185,5,1080,0,0,185,8,1,0,0,0,186,187,5,1103,
  	0,0,187,188,5,1082,0,0,188,189,5,1097,0,0,189,190,5,1086,0,0,190,10,1,
  	0,0,0,191,192,5,1095,0,0,192,193,5,1077,0,0,193,194,5,1082,0,0,194,195,
  	5,1072,0,0,195,196,5,1090,0,0,196,197,5,1080,0,0,197,12,1,0,0,0,198,199,
  	5,1074,0,0,199,200,5,1079,0,0,200,201,5,1103,0,0,201,202,5,1090,0,0,202,
  	203,5,1080,0,0,203,14,1,0,0,0,204,205,5,1076,0,0,205,206,5,1072,0,0,206,
  	207,5,1090,0,0,207,208,5,1080,0,0,208,16,1,0,0,0,209,210,5,1103,0,0,210,
  	211,5,1082,0,0,211,18,1,0,0,0,212,213,5,1090,0,0,213,214,5,1072,0,0,214,
  	20,1,0,0,0,215,216,5,1108,0,0,216,22,1,0,0,0,217,218,5,1089,0,0,218,219,
  	5,1087,0,0,219,220,5,1077,0,0,220,221,5,1094,0,0,221,24,1,0,0,0,222,223,
  	5,1074,0,0,223,224,5,1077,0,0,224,225,5,1088,0,0,225,226,5,1085,0,0,226,
  	227,5,1091,0,0,227,228,5,1090,0,0,228,229,5,1080,0,0,229,26,1,0,0,0,230,
  	231,5,1090,0,0,231,232,5,1088,0,0,232,233,5,1080,0,0,233,234,5,1074,0,
  	0,234,235,5,1072,0,0,235,236,5,1083,0,0,236,237,5,1072,0,0,237,28,1,0,
  	0,0,238,239,5,1089,0,0,239,240,5,1091,0,0,240,241,5,1073,0,0,241,242,
  	5,700,0,0,242,243,5,1108,0,0,243,244,5,1082,0,0,244,245,5,1090,0,0,245,
  	30,1,0,0,0,246,247,5,1110,0,0,247,32,1,0,0,0,248,249,5,1072,0,0,249,250,
  	5,1073,0,0,250,251,5,1086,0,0,251,34,1,0,0,0,252,253,5,1089,0,0,253,254,
  	5,1087,0,0,254,255,5,1088,0,0,255,256,5,1086,0,0,256,257,5,1073,0,0,257,
  	258,5,1091,0,0,258,259,5,1074,0,0,259,260,5,1072,0,0,260,261,5,1090,0,
  	0,261,262,5,1080,0,0,262,36,1,0,0,0,263,264,5,1079,0,0,264,265,5,1083,
  	0,0,265,266,5,1086,0,0,266,267,5,1074,0,0,267,268,5,1080,0,0,268,269,
  	5,1090,0,0,269,270,5,1080,0,0,270,38,1,0,0,0,271,272,5,1110,0,0,272,273,
  	5,1085,0,0,273,274,5,1072,0,0,274,275,5,1082,0,0,275,276,5,1096,0,0,276,
  	277,5,1077,0,0,277,40,1,0,0,0,278,279,5,1074,0,0,279,280,5,1087,0,0,280,
  	281,5,1072,0,0,281,282,5,1089,0,0,282,283,5,1090,0,0,283,284,5,1080,0,
  	0,284,42,1,0,0,0,285,286,5,1087,0,0,286,287,5,1086,0,0,287,288,5,1082,
  	0,0,288,289,5,1080,0,0,289,44,1,0,0,0,290,291,5,1084,0,0,291,292,5,1086,
  	0,0,292,293,5,1076,0,0,293,294,5,1091,0,0,294,295,5,1083,0,0,295,296,
  	5,1100,0,0,296,46,1,0,0,0,297,298,5,1088,0,0,298,299,5,1110,0,0,299,300,
  	5,1074,0,0,300,301,5,1085,0,0,301,302,5,1086,0,0,302,48,1,0,0,0,303,304,
  	5,1073,0,0,304,305,5,1110,0,0,305,306,5,1083,0,0,306,307,5,1100,0,0,307,
  	308,5,1096,0,0,308,309,5,1077,0,0,309,50,1,0,0,0,310,311,5,1084,0,0,311,
  	312,5,1077,0,0,312,313,5,1085,0,0,313,314,5,1096,0,0,314,315,5,1077,0,
  	0,315,52,1,0,0,0,316,317,5,1084,0,0,317,318,5,1110,0,0,318,319,5,1089,
  	0,0,319,320,5,1090,0,0,320,321,5,1080,0,0,321,322,5,1090,0,0,322,323,
  	5,1100,0,0,323,54,1,0,0,0,324,325,5,1084,0,0,325,326,5,1072,0,0,326,327,
  	5,1082,0,0,327,328,5,1077,0,0,328,329,5,1090,0,0,329,56,1,0,0,0,330,331,
  	5,1085,0,0,331,332,5,1077,0,0,332,58,1,0,0,0,333,334,5,106,0,0,334,335,
  	5,115,0,0,335,60,1,0,0,0,336,337,5,1087,0,0,337,338,5,1088,0,0,338,339,
  	5,1077,0,0,339,340,5,1076,0,0,340,341,5,1086,0,0,341,342,5,1082,0,0,342,
  	62,1,0,0,0,343,344,5,1094,0,0,344,345,5,1077,0,0,345,64,1,0,0,0,346,347,
  	5,61,0,0,347,66,1,0,0,0,348,349,5,62,0,0,349,68,1,0,0,0,350,351,5,60,
  	0,0,351,70,1,0,0,0,352,353,5,46,0,0,353,72,1,0,0,0,354,355,5,43,0,0,355,
  	74,1,0,0,0,356,357,5,45,0,0,357,76,1,0,0,0,358,359,5,42,0,0,359,78,1,
  	0,0,0,360,361,5,47,0,0,361,80,1,0,0,0,362,363,5,37,0,0,363,82,1,0,0,0,
  	364,365,5,94,0,0,365,84,1,0,0,0,366,367,5,38,0,0,367,86,1,0,0,0,368,369,
  	5,124,0,0,369,88,1,0,0,0,370,371,5,40,0,0,371,90,1,0,0,0,372,373,5,41,
  	0,0,373,92,1,0,0,0,374,375,5,91,0,0,375,94,1,0,0,0,376,377,5,93,0,0,377,
  	96,1,0,0,0,378,379,5,63,0,0,379,98,1,0,0,0,380,381,5,58,0,0,381,100,1,
  	0,0,0,382,383,5,126,0,0,383,102,1,0,0,0,384,385,5,39,0,0,385,104,1,0,
  	0,0,386,387,5,34,0,0,387,106,1,0,0,0,388,389,5,33,0,0,389,108,1,0,0,0,
  	390,391,5,44,0,0,391,110,1,0,0,0,392,394,3,145,72,0,393,392,1,0,0,0,394,
  	395,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,112,1,0,0,0,397,399,3,
  	145,72,0,398,397,1,0,0,0,399,400,1,0,0,0,400,398,1,0,0,0,400,401,1,0,
  	0,0,401,402,1,0,0,0,402,404,5,46,0,0,403,405,3,145,72,0,404,403,1,0,0,
  	0,405,406,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,114,1,0,0,0,408,
  	409,5,48,0,0,409,412,7,0,0,0,410,413,3,145,72,0,411,413,7,1,0,0,412,410,
  	1,0,0,0,412,411,1,0,0,0,413,414,1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,
  	0,415,116,1,0,0,0,416,417,5,48,0,0,417,419,7,2,0,0,418,420,2,48,49,0,
  	419,418,1,0,0,0,420,421,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,118,
  	1,0,0,0,423,428,3,111,55,0,424,428,3,113,56,0,425,428,3,115,57,0,426,
  	428,3,117,58,0,427,423,1,0,0,0,427,424,1,0,0,0,427,425,1,0,0,0,427,426,
  	1,0,0,0,428,120,1,0,0,0,429,433,3,147,73,0,430,432,3,149,74,0,431,430,
  	1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,122,1,0,0,
  	0,435,433,1,0,0,0,436,469,3,103,51,0,437,470,3,1,0,0,438,470,3,3,1,0,
  	439,470,3,5,2,0,440,470,3,7,3,0,441,470,3,9,4,0,442,470,3,11,5,0,443,
  	470,3,13,6,0,444,470,3,15,7,0,445,470,3,17,8,0,446,470,3,19,9,0,447,470,
  	3,21,10,0,448,470,3,23,11,0,449,470,3,25,12,0,450,470,3,27,13,0,451,470,
  	3,29,14,0,452,470,3,31,15,0,453,470,3,33,16,0,454,470,3,35,17,0,455,470,
  	3,37,18,0,456,470,3,39,19,0,457,470,3,41,20,0,458,470,3,43,21,0,459,470,
  	3,45,22,0,460,470,3,47,23,0,461,470,3,49,24,0,462,470,3,51,25,0,463,470,
  	3,53,26,0,464,470,3,55,27,0,465,470,3,57,28,0,466,470,3,59,29,0,467,470,
  	3,61,30,0,468,470,3,63,31,0,469,437,1,0,0,0,469,438,1,0,0,0,469,439,1,
  	0,0,0,469,440,1,0,0,0,469,441,1,0,0,0,469,442,1,0,0,0,469,443,1,0,0,0,
  	469,444,1,0,0,0,469,445,1,0,0,0,469,446,1,0,0,0,469,447,1,0,0,0,469,448,
  	1,0,0,0,469,449,1,0,0,0,469,450,1,0,0,0,469,451,1,0,0,0,469,452,1,0,0,
  	0,469,453,1,0,0,0,469,454,1,0,0,0,469,455,1,0,0,0,469,456,1,0,0,0,469,
  	457,1,0,0,0,469,458,1,0,0,0,469,459,1,0,0,0,469,460,1,0,0,0,469,461,1,
  	0,0,0,469,462,1,0,0,0,469,463,1,0,0,0,469,464,1,0,0,0,469,465,1,0,0,0,
  	469,466,1,0,0,0,469,467,1,0,0,0,469,468,1,0,0,0,470,124,1,0,0,0,471,472,
  	5,34,0,0,472,473,5,34,0,0,473,477,5,34,0,0,474,476,3,151,75,0,475,474,
  	1,0,0,0,476,479,1,0,0,0,477,478,1,0,0,0,477,475,1,0,0,0,478,480,1,0,0,
  	0,479,477,1,0,0,0,480,481,5,34,0,0,481,482,5,34,0,0,482,483,5,34,0,0,
  	483,126,1,0,0,0,484,488,5,34,0,0,485,487,8,3,0,0,486,485,1,0,0,0,487,
  	490,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,0,489,491,1,0,0,0,490,488,1,
  	0,0,0,491,492,5,34,0,0,492,128,1,0,0,0,493,494,5,59,0,0,494,495,5,43,
  	0,0,495,130,1,0,0,0,496,497,5,59,0,0,497,498,5,45,0,0,498,132,1,0,0,0,
  	499,500,5,59,0,0,500,501,5,61,0,0,501,134,1,0,0,0,502,503,5,59,0,0,503,
  	504,5,59,0,0,504,509,5,59,0,0,505,508,3,135,67,0,506,508,9,0,0,0,507,
  	505,1,0,0,0,507,506,1,0,0,0,508,511,1,0,0,0,509,510,1,0,0,0,509,507,1,
  	0,0,0,510,512,1,0,0,0,511,509,1,0,0,0,512,513,5,59,0,0,513,514,5,59,0,
  	0,514,515,5,59,0,0,515,516,1,0,0,0,516,517,6,67,0,0,517,136,1,0,0,0,518,
  	519,5,59,0,0,519,524,5,59,0,0,520,523,3,137,68,0,521,523,8,4,0,0,522,
  	520,1,0,0,0,522,521,1,0,0,0,523,526,1,0,0,0,524,522,1,0,0,0,524,525,1,
  	0,0,0,525,527,1,0,0,0,526,524,1,0,0,0,527,528,6,68,0,0,528,138,1,0,0,
  	0,529,530,5,60,0,0,530,531,5,1076,0,0,531,532,5,1110,0,0,532,533,5,1103,
  	0,0,533,534,5,62,0,0,534,538,1,0,0,0,535,537,9,0,0,0,536,535,1,0,0,0,
  	537,540,1,0,0,0,538,539,1,0,0,0,538,536,1,0,0,0,539,541,1,0,0,0,540,538,
  	1,0,0,0,541,542,5,60,0,0,542,543,5,47,0,0,543,544,5,1076,0,0,544,545,
  	5,1110,0,0,545,546,5,1103,0,0,546,547,5,62,0,0,547,140,1,0,0,0,548,550,
  	5,13,0,0,549,548,1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,552,5,10,
  	0,0,552,142,1,0,0,0,553,554,7,5,0,0,554,555,1,0,0,0,555,556,6,71,0,0,
  	556,144,1,0,0,0,557,558,2,48,57,0,558,146,1,0,0,0,559,560,7,6,0,0,560,
  	148,1,0,0,0,561,565,3,147,73,0,562,565,7,7,0,0,563,565,3,147,73,0,564,
  	561,1,0,0,0,564,562,1,0,0,0,564,563,1,0,0,0,565,150,1,0,0,0,566,569,3,
  	153,76,0,567,569,9,0,0,0,568,566,1,0,0,0,568,567,1,0,0,0,569,570,1,0,
  	0,0,570,571,1,0,0,0,570,568,1,0,0,0,571,152,1,0,0,0,572,573,5,92,0,0,
  	573,574,5,34,0,0,574,154,1,0,0,0,21,0,395,400,406,412,414,421,427,433,
  	469,477,488,507,509,522,524,538,549,564,568,570,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  mavkalexerLexerStaticData = staticData.release();
}

}

MavkaLexer::MavkaLexer(CharStream *input) : Lexer(input) {
  MavkaLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *mavkalexerLexerStaticData->atn, mavkalexerLexerStaticData->decisionToDFA, mavkalexerLexerStaticData->sharedContextCache);
}

MavkaLexer::~MavkaLexer() {
  delete _interpreter;
}

std::string MavkaLexer::getGrammarFileName() const {
  return "MavkaLexer.g4";
}

const std::vector<std::string>& MavkaLexer::getRuleNames() const {
  return mavkalexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& MavkaLexer::getChannelNames() const {
  return mavkalexerLexerStaticData->channelNames;
}

const std::vector<std::string>& MavkaLexer::getModeNames() const {
  return mavkalexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& MavkaLexer::getVocabulary() const {
  return mavkalexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MavkaLexer::getSerializedATN() const {
  return mavkalexerLexerStaticData->serializedATN;
}

const atn::ATN& MavkaLexer::getATN() const {
  return *mavkalexerLexerStaticData->atn;
}




void MavkaLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  mavkalexerLexerInitialize();
#else
  ::antlr4::internal::call_once(mavkalexerLexerOnceFlag, mavkalexerLexerInitialize);
#endif
}
