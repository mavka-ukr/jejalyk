
// Generated from MavkaLexer.g4 by ANTLR 4.13.0


#include "MavkaLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct MavkaLexerStaticData final {
  MavkaLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MavkaLexerStaticData(const MavkaLexerStaticData&) = delete;
  MavkaLexerStaticData(MavkaLexerStaticData&&) = delete;
  MavkaLexerStaticData& operator=(const MavkaLexerStaticData&) = delete;
  MavkaLexerStaticData& operator=(MavkaLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag mavkalexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
MavkaLexerStaticData *mavkalexerLexerStaticData = nullptr;

void mavkalexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (mavkalexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(mavkalexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MavkaLexerStaticData>(
    std::vector<std::string>{
      "END", "DIIA", "STRUCTURE", "FOR", "EQ", "NOT_EQ", "GREATER_EQ", "SMALLER_EQ", 
      "GREATER", "SMALLER", "IF", "WAIT", "TAKE", "TAKE_PAK", "TAKE_FILE", 
      "GIVE", "AS", "TA", "IS", "EE", "RETURN", "ASYNC", "SUBJECT", "AND", 
      "OR", "TRY", "CATCH", "ELSE", "THROW", "WHILE", "MODULE", "TERNARY", 
      "EQ_WORD", "GR_WORD", "SM_WORD", "NOT_GR_WORD", "NOT_SM_WORD", "NOT_EQ_WORD", 
      "NOT_IS_WORD", "HAS_IS_WORD", "NOT_HAS_IS_WORD", "STAR_ALL", "MOCKUP", 
      "IMPLEMENTS", "IMPLEMENT", "EVAL", "WHEN", "ALSO", "PARENT", "TSE", 
      "TEST", "IY", "SPREAD", "FROMTO", "KID", "SKIP_SPACES", "NL", "DECREMENT", 
      "INCREMENT", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_ARRAY", "CLOSE_ARRAY", 
      "COMMA", "ASSIGN", "ASSIGN_PARENT", "ASSIGN_ADD", "ASSIGN_SUB", "ASSIGN_MUL", 
      "ASSIGN_DIV", "ASSIGN_DIVDIV", "ASSIGN_MOD", "ASSIGN_BW_OR", "ASSIGN_BW_AND", 
      "ASSIGN_BW_SHIFT_LEFT", "ASSIGN_BW_SHIFT_RIGHT", "ASSIGN_XOR", "ASSIGN_POW", 
      "ASSIGN_OR", "ASSIGN_AND", "ASSIGN_IF", "PLUS", "MINUS", "MUL", "DIV", 
      "COLON", "DOT", "NOT", "TILDA", "PERCENT", "DIVDIV", "POW", "XOR", 
      "OR_SYM", "AND_SYM", "OR_BW", "AND_BW", "HEX_START", "ID", "NUMBER", 
      "INTEGER", "FLOAT", "HEX", "HEXUKR", "BINNUM", "BINNUMUKR", "TRIPPLE_QUOTE", 
      "STRING_MULTILINE", "STRING", "COMMENT", "LINE_COMMENT", "OLD_COMMENT", 
      "DIGIT", "ID_START", "ID_CONTINUE", "TRIPPLE_QUOTED_STRING_PART", 
      "ESCAPED_TRIPPLE_QUOTE"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", "'\\u0434\\u0456\\u044F'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'\\u043F\\u0435\\u0440\\u0435\\u0431\\u0440\\u0430\\u0442\\u0438'", 
      "'=='", "'!='", "'>='", "'<='", "'>'", "'<'", "'\\u044F\\u043A\\u0449\\u043E'", 
      "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", "'\\u0432\\u0437\\u044F\\u0442\\u0438'", 
      "'\\u0432\\u0437\\u044F\\u0442\\u0438 \\u043F\\u0430\\u043A'", "'\\u0432\\u0437\\u044F\\u0442\\u0438 \\u0444\\u0430\\u0439\\u043B'", 
      "'\\u0434\\u0430\\u0442\\u0438'", "'\\u044F\\u043A'", "'\\u0442\\u0430'", 
      "'\\u0454'", "'\\u0457\\u0457'", "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", 
      "'\\u0442\\u0440\\u0438\\u0432\\u0430\\u043B\\u0430'", "'\\u0441\\u0443\\u0431\\u02BC\\u0454\\u043A\\u0442'", 
      "'\\u0456'", "'\\u0430\\u0431\\u043E'", "'\\u0441\\u043F\\u0440\\u043E\\u0431\\u0443\\u0432\\u0430\\u0442\\u0438'", 
      "'\\u0437\\u043B\\u043E\\u0432\\u0438\\u0442\\u0438'", "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", 
      "'\\u0432\\u043F\\u0430\\u0441\\u0442\\u0438'", "'\\u043F\\u043E\\u043A\\u0438'", 
      "'\\u043C\\u043E\\u0434\\u0443\\u043B\\u044C'", "'\\u003F'", "'\\u0440\\u0456\\u0432\\u043D\\u043E'", 
      "'\\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", "'\\u043C\\u0435\\u043D\\u0448\\u0435'", 
      "'\\u043D\\u0435 \\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", "'\\u043D\\u0435 \\u043C\\u0435\\u043D\\u0448\\u0435'", 
      "'\\u043D\\u0435 \\u0440\\u0456\\u0432\\u043D\\u043E'", "'\\u043D\\u0435 \\u0454'", 
      "'\\u043C\\u0456\\u0441\\u0442\\u0438\\u0442\\u044C'", "'\\u043D\\u0435 \\u043C\\u0456\\u0441\\u0442\\u0438\\u0442\\u044C'", 
      "'.*'", "'\\u043C\\u0430\\u043A\\u0435\\u0442'", "'\\u0432\\u0442\\u0456\\u043B\\u044E\\u0454'", 
      "'\\u0432\\u0442\\u0456\\u043B\\u0438\\u0442\\u0438'", "'js'", "'\\u043A\\u043E\\u043B\\u0438'", 
      "'\\u0442\\u0430\\u043A\\u043E\\u0436'", "'\\u043F\\u0440\\u0435\\u0434\\u043E\\u043A'", 
      "'\\u0446\\u0435'", "'\\u0442\\u0435\\u0441\\u0442'", "'\\u0439'", 
      "'...'", "'..'", "", "", "", "'--'", "'++'", "'('", "')'", "'['", 
      "']'", "','", "'='", "':='", "'+='", "'-='", "'*='", "'/='", "'//='", 
      "'%='", "'|='", "'&='", "'<<='", "'>>='", "'^='", "'**='", "'||='", 
      "'&&='", "'\\u003F\\u003F='", "'+'", "'-'", "'*'", "'/'", "':'", "'.'", 
      "'!'", "'~'", "'%'", "'//'", "'**'", "'^'", "'||'", "'&&'", "'|'", 
      "'&'", "'0x'", "", "", "", "", "", "", "", "", "'\"\"\"'"
    },
    std::vector<std::string>{
      "", "END", "DIIA", "STRUCTURE", "FOR", "EQ", "NOT_EQ", "GREATER_EQ", 
      "SMALLER_EQ", "GREATER", "SMALLER", "IF", "WAIT", "TAKE", "TAKE_PAK", 
      "TAKE_FILE", "GIVE", "AS", "TA", "IS", "EE", "RETURN", "ASYNC", "SUBJECT", 
      "AND", "OR", "TRY", "CATCH", "ELSE", "THROW", "WHILE", "MODULE", "TERNARY", 
      "EQ_WORD", "GR_WORD", "SM_WORD", "NOT_GR_WORD", "NOT_SM_WORD", "NOT_EQ_WORD", 
      "NOT_IS_WORD", "HAS_IS_WORD", "NOT_HAS_IS_WORD", "STAR_ALL", "MOCKUP", 
      "IMPLEMENTS", "IMPLEMENT", "EVAL", "WHEN", "ALSO", "PARENT", "TSE", 
      "TEST", "IY", "SPREAD", "FROMTO", "KID", "SKIP_SPACES", "NL", "DECREMENT", 
      "INCREMENT", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_ARRAY", "CLOSE_ARRAY", 
      "COMMA", "ASSIGN", "ASSIGN_PARENT", "ASSIGN_ADD", "ASSIGN_SUB", "ASSIGN_MUL", 
      "ASSIGN_DIV", "ASSIGN_DIVDIV", "ASSIGN_MOD", "ASSIGN_BW_OR", "ASSIGN_BW_AND", 
      "ASSIGN_BW_SHIFT_LEFT", "ASSIGN_BW_SHIFT_RIGHT", "ASSIGN_XOR", "ASSIGN_POW", 
      "ASSIGN_OR", "ASSIGN_AND", "ASSIGN_IF", "PLUS", "MINUS", "MUL", "DIV", 
      "COLON", "DOT", "NOT", "TILDA", "PERCENT", "DIVDIV", "POW", "XOR", 
      "OR_SYM", "AND_SYM", "OR_BW", "AND_BW", "HEX_START", "ID", "NUMBER", 
      "INTEGER", "FLOAT", "HEX", "HEXUKR", "BINNUM", "BINNUMUKR", "TRIPPLE_QUOTE", 
      "STRING_MULTILINE", "STRING", "COMMENT", "LINE_COMMENT", "OLD_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,112,861,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
  	7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,
  	14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,
  	21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,
  	28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,
  	35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,
  	42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
  	49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
  	56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,
  	63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,
  	70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,
  	77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,
  	84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,
  	91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
  	98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
  	1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
  	4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,
  	1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,
  	1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,
  	1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,
  	1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
  	1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,
  	1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
  	1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,
  	1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,
  	1,50,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,587,8,54,10,54,12,54,590,9,54,
  	1,55,1,55,1,55,1,55,1,56,3,56,597,8,56,1,56,1,56,1,57,1,57,1,57,1,58,
  	1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,
  	1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,
  	1,69,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,
  	1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,77,
  	1,77,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,81,
  	1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,
  	1,88,1,89,1,89,1,90,1,90,1,90,1,91,1,91,1,91,1,92,1,92,1,93,1,93,1,93,
  	1,94,1,94,1,94,1,95,1,95,1,96,1,96,1,97,1,97,1,97,1,98,1,98,5,98,715,
  	8,98,10,98,12,98,718,9,98,1,99,1,99,1,99,1,99,1,99,1,99,3,99,726,8,99,
  	1,100,4,100,729,8,100,11,100,12,100,730,1,101,1,101,1,101,1,101,1,102,
  	1,102,1,102,1,102,1,102,4,102,742,8,102,11,102,12,102,743,1,103,1,103,
  	1,103,1,103,1,103,4,103,751,8,103,11,103,12,103,752,1,104,1,104,1,104,
  	1,104,4,104,759,8,104,11,104,12,104,760,1,105,1,105,1,105,1,105,4,105,
  	767,8,105,11,105,12,105,768,1,106,1,106,1,106,1,106,1,107,1,107,1,107,
  	1,107,1,107,5,107,780,8,107,10,107,12,107,783,9,107,1,107,1,107,1,107,
  	1,107,1,108,1,108,5,108,791,8,108,10,108,12,108,794,9,108,1,108,1,108,
  	1,109,1,109,1,109,1,109,1,109,1,109,5,109,804,8,109,10,109,12,109,807,
  	9,109,1,109,1,109,1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,
  	5,110,820,8,110,10,110,12,110,823,9,110,1,110,1,110,1,111,1,111,1,111,
  	1,111,1,111,1,111,5,111,833,8,111,10,111,12,111,836,9,111,1,111,1,111,
  	1,111,1,111,1,111,1,111,1,112,1,112,1,113,1,113,1,114,1,114,1,114,3,114,
  	851,8,114,1,115,1,115,4,115,855,8,115,11,115,12,115,856,1,116,1,116,1,
  	116,4,781,805,834,856,0,117,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
  	10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
  	43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
  	33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
  	89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,
  	111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,
  	131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,74,149,75,
  	151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,83,167,84,169,85,
  	171,86,173,87,175,88,177,89,179,90,181,91,183,92,185,93,187,94,189,95,
  	191,96,193,97,195,98,197,99,199,100,201,101,203,102,205,103,207,104,209,
  	105,211,106,213,107,215,108,217,109,219,110,221,111,223,112,225,0,227,
  	0,229,0,231,0,233,0,1,0,7,2,0,9,9,32,32,2,0,65,70,97,102,3,0,1040,1044,
  	1072,1076,1168,1169,3,0,10,10,13,13,34,34,2,0,10,10,13,13,9,0,65,90,95,
  	95,97,122,1028,1028,1030,1031,1040,1103,1108,1108,1110,1111,1168,1169,
  	2,0,48,57,700,700,919,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
  	0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
  	1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
  	0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
  	0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
  	1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
  	0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
  	0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
  	1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
  	0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,
  	0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,
  	0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,
  	0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,
  	0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,
  	0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,
  	0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,
  	0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,
  	0,0,175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,
  	0,0,185,1,0,0,0,0,187,1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,
  	0,0,195,1,0,0,0,0,197,1,0,0,0,0,199,1,0,0,0,0,201,1,0,0,0,0,203,1,0,0,
  	0,0,205,1,0,0,0,0,207,1,0,0,0,0,209,1,0,0,0,0,211,1,0,0,0,0,213,1,0,0,
  	0,0,215,1,0,0,0,0,217,1,0,0,0,0,219,1,0,0,0,0,221,1,0,0,0,0,223,1,0,0,
  	0,1,235,1,0,0,0,3,242,1,0,0,0,5,246,1,0,0,0,7,256,1,0,0,0,9,266,1,0,0,
  	0,11,269,1,0,0,0,13,272,1,0,0,0,15,275,1,0,0,0,17,278,1,0,0,0,19,280,
  	1,0,0,0,21,282,1,0,0,0,23,287,1,0,0,0,25,294,1,0,0,0,27,300,1,0,0,0,29,
  	310,1,0,0,0,31,321,1,0,0,0,33,326,1,0,0,0,35,329,1,0,0,0,37,332,1,0,0,
  	0,39,334,1,0,0,0,41,337,1,0,0,0,43,345,1,0,0,0,45,353,1,0,0,0,47,361,
  	1,0,0,0,49,363,1,0,0,0,51,367,1,0,0,0,53,378,1,0,0,0,55,386,1,0,0,0,57,
  	393,1,0,0,0,59,400,1,0,0,0,61,405,1,0,0,0,63,412,1,0,0,0,65,414,1,0,0,
  	0,67,420,1,0,0,0,69,427,1,0,0,0,71,433,1,0,0,0,73,443,1,0,0,0,75,452,
  	1,0,0,0,77,461,1,0,0,0,79,466,1,0,0,0,81,474,1,0,0,0,83,485,1,0,0,0,85,
  	488,1,0,0,0,87,494,1,0,0,0,89,501,1,0,0,0,91,509,1,0,0,0,93,512,1,0,0,
  	0,95,517,1,0,0,0,97,523,1,0,0,0,99,530,1,0,0,0,101,533,1,0,0,0,103,538,
  	1,0,0,0,105,540,1,0,0,0,107,544,1,0,0,0,109,547,1,0,0,0,111,591,1,0,0,
  	0,113,596,1,0,0,0,115,600,1,0,0,0,117,603,1,0,0,0,119,606,1,0,0,0,121,
  	608,1,0,0,0,123,610,1,0,0,0,125,612,1,0,0,0,127,614,1,0,0,0,129,616,1,
  	0,0,0,131,618,1,0,0,0,133,621,1,0,0,0,135,624,1,0,0,0,137,627,1,0,0,0,
  	139,630,1,0,0,0,141,633,1,0,0,0,143,637,1,0,0,0,145,640,1,0,0,0,147,643,
  	1,0,0,0,149,646,1,0,0,0,151,650,1,0,0,0,153,654,1,0,0,0,155,657,1,0,0,
  	0,157,661,1,0,0,0,159,665,1,0,0,0,161,669,1,0,0,0,163,673,1,0,0,0,165,
  	675,1,0,0,0,167,677,1,0,0,0,169,679,1,0,0,0,171,681,1,0,0,0,173,683,1,
  	0,0,0,175,685,1,0,0,0,177,687,1,0,0,0,179,689,1,0,0,0,181,691,1,0,0,0,
  	183,694,1,0,0,0,185,697,1,0,0,0,187,699,1,0,0,0,189,702,1,0,0,0,191,705,
  	1,0,0,0,193,707,1,0,0,0,195,709,1,0,0,0,197,712,1,0,0,0,199,725,1,0,0,
  	0,201,728,1,0,0,0,203,732,1,0,0,0,205,736,1,0,0,0,207,745,1,0,0,0,209,
  	754,1,0,0,0,211,762,1,0,0,0,213,770,1,0,0,0,215,774,1,0,0,0,217,788,1,
  	0,0,0,219,797,1,0,0,0,221,814,1,0,0,0,223,826,1,0,0,0,225,843,1,0,0,0,
  	227,845,1,0,0,0,229,850,1,0,0,0,231,854,1,0,0,0,233,858,1,0,0,0,235,236,
  	5,1082,0,0,236,237,5,1110,0,0,237,238,5,1085,0,0,238,239,5,1077,0,0,239,
  	240,5,1094,0,0,240,241,5,1100,0,0,241,2,1,0,0,0,242,243,5,1076,0,0,243,
  	244,5,1110,0,0,244,245,5,1103,0,0,245,4,1,0,0,0,246,247,5,1089,0,0,247,
  	248,5,1090,0,0,248,249,5,1088,0,0,249,250,5,1091,0,0,250,251,5,1082,0,
  	0,251,252,5,1090,0,0,252,253,5,1091,0,0,253,254,5,1088,0,0,254,255,5,
  	1072,0,0,255,6,1,0,0,0,256,257,5,1087,0,0,257,258,5,1077,0,0,258,259,
  	5,1088,0,0,259,260,5,1077,0,0,260,261,5,1073,0,0,261,262,5,1088,0,0,262,
  	263,5,1072,0,0,263,264,5,1090,0,0,264,265,5,1080,0,0,265,8,1,0,0,0,266,
  	267,5,61,0,0,267,268,5,61,0,0,268,10,1,0,0,0,269,270,5,33,0,0,270,271,
  	5,61,0,0,271,12,1,0,0,0,272,273,5,62,0,0,273,274,5,61,0,0,274,14,1,0,
  	0,0,275,276,5,60,0,0,276,277,5,61,0,0,277,16,1,0,0,0,278,279,5,62,0,0,
  	279,18,1,0,0,0,280,281,5,60,0,0,281,20,1,0,0,0,282,283,5,1103,0,0,283,
  	284,5,1082,0,0,284,285,5,1097,0,0,285,286,5,1086,0,0,286,22,1,0,0,0,287,
  	288,5,1095,0,0,288,289,5,1077,0,0,289,290,5,1082,0,0,290,291,5,1072,0,
  	0,291,292,5,1090,0,0,292,293,5,1080,0,0,293,24,1,0,0,0,294,295,5,1074,
  	0,0,295,296,5,1079,0,0,296,297,5,1103,0,0,297,298,5,1090,0,0,298,299,
  	5,1080,0,0,299,26,1,0,0,0,300,301,5,1074,0,0,301,302,5,1079,0,0,302,303,
  	5,1103,0,0,303,304,5,1090,0,0,304,305,5,1080,0,0,305,306,5,32,0,0,306,
  	307,5,1087,0,0,307,308,5,1072,0,0,308,309,5,1082,0,0,309,28,1,0,0,0,310,
  	311,5,1074,0,0,311,312,5,1079,0,0,312,313,5,1103,0,0,313,314,5,1090,0,
  	0,314,315,5,1080,0,0,315,316,5,32,0,0,316,317,5,1092,0,0,317,318,5,1072,
  	0,0,318,319,5,1081,0,0,319,320,5,1083,0,0,320,30,1,0,0,0,321,322,5,1076,
  	0,0,322,323,5,1072,0,0,323,324,5,1090,0,0,324,325,5,1080,0,0,325,32,1,
  	0,0,0,326,327,5,1103,0,0,327,328,5,1082,0,0,328,34,1,0,0,0,329,330,5,
  	1090,0,0,330,331,5,1072,0,0,331,36,1,0,0,0,332,333,5,1108,0,0,333,38,
  	1,0,0,0,334,335,5,1111,0,0,335,336,5,1111,0,0,336,40,1,0,0,0,337,338,
  	5,1074,0,0,338,339,5,1077,0,0,339,340,5,1088,0,0,340,341,5,1085,0,0,341,
  	342,5,1091,0,0,342,343,5,1090,0,0,343,344,5,1080,0,0,344,42,1,0,0,0,345,
  	346,5,1090,0,0,346,347,5,1088,0,0,347,348,5,1080,0,0,348,349,5,1074,0,
  	0,349,350,5,1072,0,0,350,351,5,1083,0,0,351,352,5,1072,0,0,352,44,1,0,
  	0,0,353,354,5,1089,0,0,354,355,5,1091,0,0,355,356,5,1073,0,0,356,357,
  	5,700,0,0,357,358,5,1108,0,0,358,359,5,1082,0,0,359,360,5,1090,0,0,360,
  	46,1,0,0,0,361,362,5,1110,0,0,362,48,1,0,0,0,363,364,5,1072,0,0,364,365,
  	5,1073,0,0,365,366,5,1086,0,0,366,50,1,0,0,0,367,368,5,1089,0,0,368,369,
  	5,1087,0,0,369,370,5,1088,0,0,370,371,5,1086,0,0,371,372,5,1073,0,0,372,
  	373,5,1091,0,0,373,374,5,1074,0,0,374,375,5,1072,0,0,375,376,5,1090,0,
  	0,376,377,5,1080,0,0,377,52,1,0,0,0,378,379,5,1079,0,0,379,380,5,1083,
  	0,0,380,381,5,1086,0,0,381,382,5,1074,0,0,382,383,5,1080,0,0,383,384,
  	5,1090,0,0,384,385,5,1080,0,0,385,54,1,0,0,0,386,387,5,1110,0,0,387,388,
  	5,1085,0,0,388,389,5,1072,0,0,389,390,5,1082,0,0,390,391,5,1096,0,0,391,
  	392,5,1077,0,0,392,56,1,0,0,0,393,394,5,1074,0,0,394,395,5,1087,0,0,395,
  	396,5,1072,0,0,396,397,5,1089,0,0,397,398,5,1090,0,0,398,399,5,1080,0,
  	0,399,58,1,0,0,0,400,401,5,1087,0,0,401,402,5,1086,0,0,402,403,5,1082,
  	0,0,403,404,5,1080,0,0,404,60,1,0,0,0,405,406,5,1084,0,0,406,407,5,1086,
  	0,0,407,408,5,1076,0,0,408,409,5,1091,0,0,409,410,5,1083,0,0,410,411,
  	5,1100,0,0,411,62,1,0,0,0,412,413,5,63,0,0,413,64,1,0,0,0,414,415,5,1088,
  	0,0,415,416,5,1110,0,0,416,417,5,1074,0,0,417,418,5,1085,0,0,418,419,
  	5,1086,0,0,419,66,1,0,0,0,420,421,5,1073,0,0,421,422,5,1110,0,0,422,423,
  	5,1083,0,0,423,424,5,1100,0,0,424,425,5,1096,0,0,425,426,5,1077,0,0,426,
  	68,1,0,0,0,427,428,5,1084,0,0,428,429,5,1077,0,0,429,430,5,1085,0,0,430,
  	431,5,1096,0,0,431,432,5,1077,0,0,432,70,1,0,0,0,433,434,5,1085,0,0,434,
  	435,5,1077,0,0,435,436,5,32,0,0,436,437,5,1073,0,0,437,438,5,1110,0,0,
  	438,439,5,1083,0,0,439,440,5,1100,0,0,440,441,5,1096,0,0,441,442,5,1077,
  	0,0,442,72,1,0,0,0,443,444,5,1085,0,0,444,445,5,1077,0,0,445,446,5,32,
  	0,0,446,447,5,1084,0,0,447,448,5,1077,0,0,448,449,5,1085,0,0,449,450,
  	5,1096,0,0,450,451,5,1077,0,0,451,74,1,0,0,0,452,453,5,1085,0,0,453,454,
  	5,1077,0,0,454,455,5,32,0,0,455,456,5,1088,0,0,456,457,5,1110,0,0,457,
  	458,5,1074,0,0,458,459,5,1085,0,0,459,460,5,1086,0,0,460,76,1,0,0,0,461,
  	462,5,1085,0,0,462,463,5,1077,0,0,463,464,5,32,0,0,464,465,5,1108,0,0,
  	465,78,1,0,0,0,466,467,5,1084,0,0,467,468,5,1110,0,0,468,469,5,1089,0,
  	0,469,470,5,1090,0,0,470,471,5,1080,0,0,471,472,5,1090,0,0,472,473,5,
  	1100,0,0,473,80,1,0,0,0,474,475,5,1085,0,0,475,476,5,1077,0,0,476,477,
  	5,32,0,0,477,478,5,1084,0,0,478,479,5,1110,0,0,479,480,5,1089,0,0,480,
  	481,5,1090,0,0,481,482,5,1080,0,0,482,483,5,1090,0,0,483,484,5,1100,0,
  	0,484,82,1,0,0,0,485,486,5,46,0,0,486,487,5,42,0,0,487,84,1,0,0,0,488,
  	489,5,1084,0,0,489,490,5,1072,0,0,490,491,5,1082,0,0,491,492,5,1077,0,
  	0,492,493,5,1090,0,0,493,86,1,0,0,0,494,495,5,1074,0,0,495,496,5,1090,
  	0,0,496,497,5,1110,0,0,497,498,5,1083,0,0,498,499,5,1102,0,0,499,500,
  	5,1108,0,0,500,88,1,0,0,0,501,502,5,1074,0,0,502,503,5,1090,0,0,503,504,
  	5,1110,0,0,504,505,5,1083,0,0,505,506,5,1080,0,0,506,507,5,1090,0,0,507,
  	508,5,1080,0,0,508,90,1,0,0,0,509,510,5,106,0,0,510,511,5,115,0,0,511,
  	92,1,0,0,0,512,513,5,1082,0,0,513,514,5,1086,0,0,514,515,5,1083,0,0,515,
  	516,5,1080,0,0,516,94,1,0,0,0,517,518,5,1090,0,0,518,519,5,1072,0,0,519,
  	520,5,1082,0,0,520,521,5,1086,0,0,521,522,5,1078,0,0,522,96,1,0,0,0,523,
  	524,5,1087,0,0,524,525,5,1088,0,0,525,526,5,1077,0,0,526,527,5,1076,0,
  	0,527,528,5,1086,0,0,528,529,5,1082,0,0,529,98,1,0,0,0,530,531,5,1094,
  	0,0,531,532,5,1077,0,0,532,100,1,0,0,0,533,534,5,1090,0,0,534,535,5,1077,
  	0,0,535,536,5,1089,0,0,536,537,5,1090,0,0,537,102,1,0,0,0,538,539,5,1081,
  	0,0,539,104,1,0,0,0,540,541,5,46,0,0,541,542,5,46,0,0,542,543,5,46,0,
  	0,543,106,1,0,0,0,544,545,5,46,0,0,545,546,5,46,0,0,546,108,1,0,0,0,547,
  	588,5,39,0,0,548,587,3,197,98,0,549,587,3,1,0,0,550,587,3,3,1,0,551,587,
  	3,5,2,0,552,587,3,7,3,0,553,587,3,21,10,0,554,587,3,23,11,0,555,587,3,
  	25,12,0,556,587,3,31,15,0,557,587,3,33,16,0,558,587,3,35,17,0,559,587,
  	3,37,18,0,560,587,3,39,19,0,561,587,3,41,20,0,562,587,3,43,21,0,563,587,
  	3,45,22,0,564,587,3,47,23,0,565,587,3,49,24,0,566,587,3,51,25,0,567,587,
  	3,53,26,0,568,587,3,55,27,0,569,587,3,57,28,0,570,587,3,59,29,0,571,587,
  	3,61,30,0,572,587,3,65,32,0,573,587,3,67,33,0,574,587,3,69,34,0,575,587,
  	3,79,39,0,576,587,3,85,42,0,577,587,3,87,43,0,578,587,3,89,44,0,579,587,
  	3,91,45,0,580,587,3,93,46,0,581,587,3,95,47,0,582,587,3,97,48,0,583,587,
  	3,99,49,0,584,587,3,101,50,0,585,587,3,103,51,0,586,548,1,0,0,0,586,549,
  	1,0,0,0,586,550,1,0,0,0,586,551,1,0,0,0,586,552,1,0,0,0,586,553,1,0,0,
  	0,586,554,1,0,0,0,586,555,1,0,0,0,586,556,1,0,0,0,586,557,1,0,0,0,586,
  	558,1,0,0,0,586,559,1,0,0,0,586,560,1,0,0,0,586,561,1,0,0,0,586,562,1,
  	0,0,0,586,563,1,0,0,0,586,564,1,0,0,0,586,565,1,0,0,0,586,566,1,0,0,0,
  	586,567,1,0,0,0,586,568,1,0,0,0,586,569,1,0,0,0,586,570,1,0,0,0,586,571,
  	1,0,0,0,586,572,1,0,0,0,586,573,1,0,0,0,586,574,1,0,0,0,586,575,1,0,0,
  	0,586,576,1,0,0,0,586,577,1,0,0,0,586,578,1,0,0,0,586,579,1,0,0,0,586,
  	580,1,0,0,0,586,581,1,0,0,0,586,582,1,0,0,0,586,583,1,0,0,0,586,584,1,
  	0,0,0,586,585,1,0,0,0,587,590,1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,
  	589,110,1,0,0,0,590,588,1,0,0,0,591,592,7,0,0,0,592,593,1,0,0,0,593,594,
  	6,55,0,0,594,112,1,0,0,0,595,597,5,13,0,0,596,595,1,0,0,0,596,597,1,0,
  	0,0,597,598,1,0,0,0,598,599,5,10,0,0,599,114,1,0,0,0,600,601,5,45,0,0,
  	601,602,5,45,0,0,602,116,1,0,0,0,603,604,5,43,0,0,604,605,5,43,0,0,605,
  	118,1,0,0,0,606,607,5,40,0,0,607,120,1,0,0,0,608,609,5,41,0,0,609,122,
  	1,0,0,0,610,611,5,91,0,0,611,124,1,0,0,0,612,613,5,93,0,0,613,126,1,0,
  	0,0,614,615,5,44,0,0,615,128,1,0,0,0,616,617,5,61,0,0,617,130,1,0,0,0,
  	618,619,5,58,0,0,619,620,5,61,0,0,620,132,1,0,0,0,621,622,5,43,0,0,622,
  	623,5,61,0,0,623,134,1,0,0,0,624,625,5,45,0,0,625,626,5,61,0,0,626,136,
  	1,0,0,0,627,628,5,42,0,0,628,629,5,61,0,0,629,138,1,0,0,0,630,631,5,47,
  	0,0,631,632,5,61,0,0,632,140,1,0,0,0,633,634,5,47,0,0,634,635,5,47,0,
  	0,635,636,5,61,0,0,636,142,1,0,0,0,637,638,5,37,0,0,638,639,5,61,0,0,
  	639,144,1,0,0,0,640,641,5,124,0,0,641,642,5,61,0,0,642,146,1,0,0,0,643,
  	644,5,38,0,0,644,645,5,61,0,0,645,148,1,0,0,0,646,647,5,60,0,0,647,648,
  	5,60,0,0,648,649,5,61,0,0,649,150,1,0,0,0,650,651,5,62,0,0,651,652,5,
  	62,0,0,652,653,5,61,0,0,653,152,1,0,0,0,654,655,5,94,0,0,655,656,5,61,
  	0,0,656,154,1,0,0,0,657,658,5,42,0,0,658,659,5,42,0,0,659,660,5,61,0,
  	0,660,156,1,0,0,0,661,662,5,124,0,0,662,663,5,124,0,0,663,664,5,61,0,
  	0,664,158,1,0,0,0,665,666,5,38,0,0,666,667,5,38,0,0,667,668,5,61,0,0,
  	668,160,1,0,0,0,669,670,5,63,0,0,670,671,5,63,0,0,671,672,5,61,0,0,672,
  	162,1,0,0,0,673,674,5,43,0,0,674,164,1,0,0,0,675,676,5,45,0,0,676,166,
  	1,0,0,0,677,678,5,42,0,0,678,168,1,0,0,0,679,680,5,47,0,0,680,170,1,0,
  	0,0,681,682,5,58,0,0,682,172,1,0,0,0,683,684,5,46,0,0,684,174,1,0,0,0,
  	685,686,5,33,0,0,686,176,1,0,0,0,687,688,5,126,0,0,688,178,1,0,0,0,689,
  	690,5,37,0,0,690,180,1,0,0,0,691,692,5,47,0,0,692,693,5,47,0,0,693,182,
  	1,0,0,0,694,695,5,42,0,0,695,696,5,42,0,0,696,184,1,0,0,0,697,698,5,94,
  	0,0,698,186,1,0,0,0,699,700,5,124,0,0,700,701,5,124,0,0,701,188,1,0,0,
  	0,702,703,5,38,0,0,703,704,5,38,0,0,704,190,1,0,0,0,705,706,5,124,0,0,
  	706,192,1,0,0,0,707,708,5,38,0,0,708,194,1,0,0,0,709,710,5,48,0,0,710,
  	711,5,120,0,0,711,196,1,0,0,0,712,716,3,227,113,0,713,715,3,229,114,0,
  	714,713,1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,716,717,1,0,0,0,717,198,
  	1,0,0,0,718,716,1,0,0,0,719,726,3,203,101,0,720,726,3,201,100,0,721,726,
  	3,205,102,0,722,726,3,209,104,0,723,726,3,207,103,0,724,726,3,211,105,
  	0,725,719,1,0,0,0,725,720,1,0,0,0,725,721,1,0,0,0,725,722,1,0,0,0,725,
  	723,1,0,0,0,725,724,1,0,0,0,726,200,1,0,0,0,727,729,3,225,112,0,728,727,
  	1,0,0,0,729,730,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,202,1,0,0,
  	0,732,733,3,201,100,0,733,734,5,46,0,0,734,735,3,201,100,0,735,204,1,
  	0,0,0,736,737,5,48,0,0,737,738,5,120,0,0,738,741,1,0,0,0,739,742,3,225,
  	112,0,740,742,7,1,0,0,741,739,1,0,0,0,741,740,1,0,0,0,742,743,1,0,0,0,
  	743,741,1,0,0,0,743,744,1,0,0,0,744,206,1,0,0,0,745,746,5,48,0,0,746,
  	747,5,1096,0,0,747,750,1,0,0,0,748,751,3,225,112,0,749,751,7,2,0,0,750,
  	748,1,0,0,0,750,749,1,0,0,0,751,752,1,0,0,0,752,750,1,0,0,0,752,753,1,
  	0,0,0,753,208,1,0,0,0,754,755,5,48,0,0,755,756,5,98,0,0,756,758,1,0,0,
  	0,757,759,2,48,49,0,758,757,1,0,0,0,759,760,1,0,0,0,760,758,1,0,0,0,760,
  	761,1,0,0,0,761,210,1,0,0,0,762,763,5,48,0,0,763,764,5,1076,0,0,764,766,
  	1,0,0,0,765,767,2,48,49,0,766,765,1,0,0,0,767,768,1,0,0,0,768,766,1,0,
  	0,0,768,769,1,0,0,0,769,212,1,0,0,0,770,771,5,34,0,0,771,772,5,34,0,0,
  	772,773,5,34,0,0,773,214,1,0,0,0,774,775,5,34,0,0,775,776,5,34,0,0,776,
  	777,5,34,0,0,777,781,1,0,0,0,778,780,3,231,115,0,779,778,1,0,0,0,780,
  	783,1,0,0,0,781,782,1,0,0,0,781,779,1,0,0,0,782,784,1,0,0,0,783,781,1,
  	0,0,0,784,785,5,34,0,0,785,786,5,34,0,0,786,787,5,34,0,0,787,216,1,0,
  	0,0,788,792,5,34,0,0,789,791,8,3,0,0,790,789,1,0,0,0,791,794,1,0,0,0,
  	792,790,1,0,0,0,792,793,1,0,0,0,793,795,1,0,0,0,794,792,1,0,0,0,795,796,
  	5,34,0,0,796,218,1,0,0,0,797,798,5,59,0,0,798,799,5,59,0,0,799,800,5,
  	59,0,0,800,805,1,0,0,0,801,804,3,219,109,0,802,804,9,0,0,0,803,801,1,
  	0,0,0,803,802,1,0,0,0,804,807,1,0,0,0,805,806,1,0,0,0,805,803,1,0,0,0,
  	806,808,1,0,0,0,807,805,1,0,0,0,808,809,5,59,0,0,809,810,5,59,0,0,810,
  	811,5,59,0,0,811,812,1,0,0,0,812,813,6,109,0,0,813,220,1,0,0,0,814,815,
  	5,59,0,0,815,816,5,59,0,0,816,821,1,0,0,0,817,820,3,221,110,0,818,820,
  	8,4,0,0,819,817,1,0,0,0,819,818,1,0,0,0,820,823,1,0,0,0,821,819,1,0,0,
  	0,821,822,1,0,0,0,822,824,1,0,0,0,823,821,1,0,0,0,824,825,6,110,0,0,825,
  	222,1,0,0,0,826,827,5,59,0,0,827,828,5,45,0,0,828,829,5,45,0,0,829,834,
  	1,0,0,0,830,833,3,223,111,0,831,833,9,0,0,0,832,830,1,0,0,0,832,831,1,
  	0,0,0,833,836,1,0,0,0,834,835,1,0,0,0,834,832,1,0,0,0,835,837,1,0,0,0,
  	836,834,1,0,0,0,837,838,5,45,0,0,838,839,5,45,0,0,839,840,5,59,0,0,840,
  	841,1,0,0,0,841,842,6,111,0,0,842,224,1,0,0,0,843,844,2,48,57,0,844,226,
  	1,0,0,0,845,846,7,5,0,0,846,228,1,0,0,0,847,851,3,227,113,0,848,851,7,
  	6,0,0,849,851,3,227,113,0,850,847,1,0,0,0,850,848,1,0,0,0,850,849,1,0,
  	0,0,851,230,1,0,0,0,852,855,3,233,116,0,853,855,9,0,0,0,854,852,1,0,0,
  	0,854,853,1,0,0,0,855,856,1,0,0,0,856,857,1,0,0,0,856,854,1,0,0,0,857,
  	232,1,0,0,0,858,859,5,92,0,0,859,860,5,34,0,0,860,234,1,0,0,0,24,0,586,
  	588,596,716,725,730,741,743,750,752,760,768,781,792,803,805,819,821,832,
  	834,850,854,856,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  mavkalexerLexerStaticData = staticData.release();
}

}

MavkaLexer::MavkaLexer(CharStream *input) : Lexer(input) {
  MavkaLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *mavkalexerLexerStaticData->atn, mavkalexerLexerStaticData->decisionToDFA, mavkalexerLexerStaticData->sharedContextCache);
}

MavkaLexer::~MavkaLexer() {
  delete _interpreter;
}

std::string MavkaLexer::getGrammarFileName() const {
  return "MavkaLexer.g4";
}

const std::vector<std::string>& MavkaLexer::getRuleNames() const {
  return mavkalexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& MavkaLexer::getChannelNames() const {
  return mavkalexerLexerStaticData->channelNames;
}

const std::vector<std::string>& MavkaLexer::getModeNames() const {
  return mavkalexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& MavkaLexer::getVocabulary() const {
  return mavkalexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MavkaLexer::getSerializedATN() const {
  return mavkalexerLexerStaticData->serializedATN;
}

const atn::ATN& MavkaLexer::getATN() const {
  return *mavkalexerLexerStaticData->atn;
}




void MavkaLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  mavkalexerLexerInitialize();
#else
  ::antlr4::internal::call_once(mavkalexerLexerOnceFlag, mavkalexerLexerInitialize);
#endif
}
