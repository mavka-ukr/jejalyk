
// Generated from MavkaLexer.g4 by ANTLR 4.13.0


#include "MavkaLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct MavkaLexerStaticData final {
  MavkaLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MavkaLexerStaticData(const MavkaLexerStaticData&) = delete;
  MavkaLexerStaticData(MavkaLexerStaticData&&) = delete;
  MavkaLexerStaticData& operator=(const MavkaLexerStaticData&) = delete;
  MavkaLexerStaticData& operator=(MavkaLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag mavkalexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
MavkaLexerStaticData *mavkalexerLexerStaticData = nullptr;

void mavkalexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (mavkalexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(mavkalexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MavkaLexerStaticData>(
    std::vector<std::string>{
      "NL", "WS", "KW_END", "KW_DIIA", "KW_STRUCTURE", "KW_FOR", "KW_IF", 
      "KW_WAIT", "KW_TAKE", "KW_GIVE", "KW_AS", "KW_TA", "KW_IS", "KW_SPEC", 
      "KW_RETURN", "KW_ASYNC", "KW_SUBJECT", "KW_AND", "KW_OR", "KW_TRY", 
      "KW_CATCH", "KW_ELSE", "KW_THROW", "KW_WHILE", "KW_MODULE", "KW_EQ_WORD", 
      "KW_GR_WORD", "KW_SM_WORD", "KW_HAS_IS_WORD", "KW_MOCKUP", "KW_NOT", 
      "KW_JS", "KW_PARENT", "KW_TSE", "EQUAL", "GREATER", "LESSER", "DOT", 
      "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MOD", "POWER", "AND", "OR", 
      "PAREN_OPEN", "PAREN_CLOSE", "BRACKET_OPEN", "BRACKET_CLOSE", "QUESTION", 
      "COLON", "TILDA", "QUOTE", "DOUBLE_QUOTE", "EXCLAMATION", "COMA", 
      "INTEGER", "FLOAT", "HEX", "BIN", "ID", "KWID", "STRING_MULTILINE", 
      "STRING", "COMP_INST_START", "COMP_INST_END", "COMP_INST_ASSIGN", 
      "COMMENT", "LINE_COMMENT", "DIGIT", "ID_START", "ID_CONTINUE", "TRIPPLE_QUOTED_STRING_PART", 
      "ESCAPED_TRIPPLE_QUOTE"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", "'\\u0434\\u0456\\u044F'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'\\u043F\\u0435\\u0440\\u0435\\u0431\\u0440\\u0430\\u0442\\u0438'", 
      "'\\u044F\\u043A\\u0449\\u043E'", "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", 
      "'\\u0432\\u0437\\u044F\\u0442\\u0438'", "'\\u0434\\u0430\\u0442\\u0438'", 
      "'\\u044F\\u043A'", "'\\u0442\\u0430'", "'\\u0454'", "'\\u0441\\u043F\\u0435\\u0446'", 
      "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", "'\\u0442\\u0440\\u0438\\u0432\\u0430\\u043B\\u0430'", 
      "'\\u0441\\u0443\\u0431\\u02BC\\u0454\\u043A\\u0442'", "'\\u0456'", 
      "'\\u0430\\u0431\\u043E'", "'\\u0441\\u043F\\u0440\\u043E\\u0431\\u0443\\u0432\\u0430\\u0442\\u0438'", 
      "'\\u0437\\u043B\\u043E\\u0432\\u0438\\u0442\\u0438'", "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", 
      "'\\u0432\\u043F\\u0430\\u0441\\u0442\\u0438'", "'\\u043F\\u043E\\u043A\\u0438'", 
      "'\\u043C\\u043E\\u0434\\u0443\\u043B\\u044C'", "'\\u0440\\u0456\\u0432\\u043D\\u043E'", 
      "'\\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", "'\\u043C\\u0435\\u043D\\u0448\\u0435'", 
      "'\\u043C\\u0456\\u0441\\u0442\\u0438\\u0442\\u044C'", "'\\u043C\\u0430\\u043A\\u0435\\u0442'", 
      "'\\u043D\\u0435'", "'js'", "'\\u043F\\u0440\\u0435\\u0434\\u043E\\u043A'", 
      "'\\u0446\\u0435'", "'='", "'>'", "'<'", "'.'", "'+'", "'-'", "'*'", 
      "'/'", "'%'", "'^'", "'&'", "'|'", "'('", "')'", "'['", "']'", "'\\u003F'", 
      "':'", "'~'", "'''", "'\"'", "'!'", "','"
    },
    std::vector<std::string>{
      "", "NL", "WS", "KW_END", "KW_DIIA", "KW_STRUCTURE", "KW_FOR", "KW_IF", 
      "KW_WAIT", "KW_TAKE", "KW_GIVE", "KW_AS", "KW_TA", "KW_IS", "KW_SPEC", 
      "KW_RETURN", "KW_ASYNC", "KW_SUBJECT", "KW_AND", "KW_OR", "KW_TRY", 
      "KW_CATCH", "KW_ELSE", "KW_THROW", "KW_WHILE", "KW_MODULE", "KW_EQ_WORD", 
      "KW_GR_WORD", "KW_SM_WORD", "KW_HAS_IS_WORD", "KW_MOCKUP", "KW_NOT", 
      "KW_JS", "KW_PARENT", "KW_TSE", "EQUAL", "GREATER", "LESSER", "DOT", 
      "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MOD", "POWER", "AND", "OR", 
      "PAREN_OPEN", "PAREN_CLOSE", "BRACKET_OPEN", "BRACKET_CLOSE", "QUESTION", 
      "COLON", "TILDA", "QUOTE", "DOUBLE_QUOTE", "EXCLAMATION", "COMA", 
      "INTEGER", "FLOAT", "HEX", "BIN", "ID", "KWID", "STRING_MULTILINE", 
      "STRING", "COMP_INST_START", "COMP_INST_END", "COMP_INST_ASSIGN", 
      "COMMENT", "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,70,548,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,1,0,3,0,153,8,0,1,0,1,0,
  	1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
  	4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
  	1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
  	8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
  	1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
  	1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,
  	1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
  	1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,
  	1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,
  	1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,
  	1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,4,57,401,8,57,11,57,12,57,402,
  	1,58,4,58,406,8,58,11,58,12,58,407,1,58,1,58,4,58,412,8,58,11,58,12,58,
  	413,1,59,1,59,1,59,1,59,4,59,420,8,59,11,59,12,59,421,1,60,1,60,1,60,
  	4,60,427,8,60,11,60,12,60,428,1,61,1,61,5,61,433,8,61,10,61,12,61,436,
  	9,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
  	1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
  	1,62,1,62,1,62,1,62,1,62,1,62,3,62,471,8,62,1,63,1,63,1,63,1,63,5,63,
  	477,8,63,10,63,12,63,480,9,63,1,63,1,63,1,63,1,63,1,64,1,64,5,64,488,
  	8,64,10,64,12,64,491,9,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,67,
  	1,67,1,67,1,68,1,68,1,68,1,68,1,68,5,68,509,8,68,10,68,12,68,512,9,68,
  	1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,5,69,524,8,69,10,69,
  	12,69,527,9,69,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,72,3,72,538,
  	8,72,1,73,1,73,4,73,542,8,73,11,73,12,73,543,1,74,1,74,1,74,3,478,510,
  	543,0,75,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
  	13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
  	49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
  	36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
  	95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,
  	58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,
  	68,137,69,139,70,141,0,143,0,145,0,147,0,149,0,1,0,8,2,0,9,9,32,32,4,
  	0,88,88,120,120,1064,1064,1096,1096,5,0,65,70,97,102,1040,1044,1072,1076,
  	1168,1169,4,0,66,66,98,98,1044,1044,1076,1076,3,0,10,10,13,13,34,34,2,
  	0,10,10,13,13,9,0,65,90,95,95,97,122,1028,1028,1030,1031,1040,1103,1108,
  	1108,1110,1111,1168,1169,2,0,48,57,700,700,591,0,1,1,0,0,0,0,3,1,0,0,
  	0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
  	1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
  	0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
  	0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
  	1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
  	0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
  	0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
  	1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,
  	0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,
  	0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
  	0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,
  	0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,
  	0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,
  	1,152,1,0,0,0,3,158,1,0,0,0,5,162,1,0,0,0,7,169,1,0,0,0,9,173,1,0,0,0,
  	11,183,1,0,0,0,13,193,1,0,0,0,15,198,1,0,0,0,17,205,1,0,0,0,19,211,1,
  	0,0,0,21,216,1,0,0,0,23,219,1,0,0,0,25,222,1,0,0,0,27,224,1,0,0,0,29,
  	229,1,0,0,0,31,237,1,0,0,0,33,245,1,0,0,0,35,253,1,0,0,0,37,255,1,0,0,
  	0,39,259,1,0,0,0,41,270,1,0,0,0,43,278,1,0,0,0,45,285,1,0,0,0,47,292,
  	1,0,0,0,49,297,1,0,0,0,51,304,1,0,0,0,53,310,1,0,0,0,55,317,1,0,0,0,57,
  	323,1,0,0,0,59,331,1,0,0,0,61,337,1,0,0,0,63,340,1,0,0,0,65,343,1,0,0,
  	0,67,350,1,0,0,0,69,353,1,0,0,0,71,355,1,0,0,0,73,357,1,0,0,0,75,359,
  	1,0,0,0,77,361,1,0,0,0,79,363,1,0,0,0,81,365,1,0,0,0,83,367,1,0,0,0,85,
  	369,1,0,0,0,87,371,1,0,0,0,89,373,1,0,0,0,91,375,1,0,0,0,93,377,1,0,0,
  	0,95,379,1,0,0,0,97,381,1,0,0,0,99,383,1,0,0,0,101,385,1,0,0,0,103,387,
  	1,0,0,0,105,389,1,0,0,0,107,391,1,0,0,0,109,393,1,0,0,0,111,395,1,0,0,
  	0,113,397,1,0,0,0,115,400,1,0,0,0,117,405,1,0,0,0,119,415,1,0,0,0,121,
  	423,1,0,0,0,123,430,1,0,0,0,125,437,1,0,0,0,127,472,1,0,0,0,129,485,1,
  	0,0,0,131,494,1,0,0,0,133,497,1,0,0,0,135,500,1,0,0,0,137,503,1,0,0,0,
  	139,519,1,0,0,0,141,530,1,0,0,0,143,532,1,0,0,0,145,537,1,0,0,0,147,541,
  	1,0,0,0,149,545,1,0,0,0,151,153,5,13,0,0,152,151,1,0,0,0,152,153,1,0,
  	0,0,153,154,1,0,0,0,154,155,5,10,0,0,155,156,1,0,0,0,156,157,6,0,0,0,
  	157,2,1,0,0,0,158,159,7,0,0,0,159,160,1,0,0,0,160,161,6,1,0,0,161,4,1,
  	0,0,0,162,163,5,1082,0,0,163,164,5,1110,0,0,164,165,5,1085,0,0,165,166,
  	5,1077,0,0,166,167,5,1094,0,0,167,168,5,1100,0,0,168,6,1,0,0,0,169,170,
  	5,1076,0,0,170,171,5,1110,0,0,171,172,5,1103,0,0,172,8,1,0,0,0,173,174,
  	5,1089,0,0,174,175,5,1090,0,0,175,176,5,1088,0,0,176,177,5,1091,0,0,177,
  	178,5,1082,0,0,178,179,5,1090,0,0,179,180,5,1091,0,0,180,181,5,1088,0,
  	0,181,182,5,1072,0,0,182,10,1,0,0,0,183,184,5,1087,0,0,184,185,5,1077,
  	0,0,185,186,5,1088,0,0,186,187,5,1077,0,0,187,188,5,1073,0,0,188,189,
  	5,1088,0,0,189,190,5,1072,0,0,190,191,5,1090,0,0,191,192,5,1080,0,0,192,
  	12,1,0,0,0,193,194,5,1103,0,0,194,195,5,1082,0,0,195,196,5,1097,0,0,196,
  	197,5,1086,0,0,197,14,1,0,0,0,198,199,5,1095,0,0,199,200,5,1077,0,0,200,
  	201,5,1082,0,0,201,202,5,1072,0,0,202,203,5,1090,0,0,203,204,5,1080,0,
  	0,204,16,1,0,0,0,205,206,5,1074,0,0,206,207,5,1079,0,0,207,208,5,1103,
  	0,0,208,209,5,1090,0,0,209,210,5,1080,0,0,210,18,1,0,0,0,211,212,5,1076,
  	0,0,212,213,5,1072,0,0,213,214,5,1090,0,0,214,215,5,1080,0,0,215,20,1,
  	0,0,0,216,217,5,1103,0,0,217,218,5,1082,0,0,218,22,1,0,0,0,219,220,5,
  	1090,0,0,220,221,5,1072,0,0,221,24,1,0,0,0,222,223,5,1108,0,0,223,26,
  	1,0,0,0,224,225,5,1089,0,0,225,226,5,1087,0,0,226,227,5,1077,0,0,227,
  	228,5,1094,0,0,228,28,1,0,0,0,229,230,5,1074,0,0,230,231,5,1077,0,0,231,
  	232,5,1088,0,0,232,233,5,1085,0,0,233,234,5,1091,0,0,234,235,5,1090,0,
  	0,235,236,5,1080,0,0,236,30,1,0,0,0,237,238,5,1090,0,0,238,239,5,1088,
  	0,0,239,240,5,1080,0,0,240,241,5,1074,0,0,241,242,5,1072,0,0,242,243,
  	5,1083,0,0,243,244,5,1072,0,0,244,32,1,0,0,0,245,246,5,1089,0,0,246,247,
  	5,1091,0,0,247,248,5,1073,0,0,248,249,5,700,0,0,249,250,5,1108,0,0,250,
  	251,5,1082,0,0,251,252,5,1090,0,0,252,34,1,0,0,0,253,254,5,1110,0,0,254,
  	36,1,0,0,0,255,256,5,1072,0,0,256,257,5,1073,0,0,257,258,5,1086,0,0,258,
  	38,1,0,0,0,259,260,5,1089,0,0,260,261,5,1087,0,0,261,262,5,1088,0,0,262,
  	263,5,1086,0,0,263,264,5,1073,0,0,264,265,5,1091,0,0,265,266,5,1074,0,
  	0,266,267,5,1072,0,0,267,268,5,1090,0,0,268,269,5,1080,0,0,269,40,1,0,
  	0,0,270,271,5,1079,0,0,271,272,5,1083,0,0,272,273,5,1086,0,0,273,274,
  	5,1074,0,0,274,275,5,1080,0,0,275,276,5,1090,0,0,276,277,5,1080,0,0,277,
  	42,1,0,0,0,278,279,5,1110,0,0,279,280,5,1085,0,0,280,281,5,1072,0,0,281,
  	282,5,1082,0,0,282,283,5,1096,0,0,283,284,5,1077,0,0,284,44,1,0,0,0,285,
  	286,5,1074,0,0,286,287,5,1087,0,0,287,288,5,1072,0,0,288,289,5,1089,0,
  	0,289,290,5,1090,0,0,290,291,5,1080,0,0,291,46,1,0,0,0,292,293,5,1087,
  	0,0,293,294,5,1086,0,0,294,295,5,1082,0,0,295,296,5,1080,0,0,296,48,1,
  	0,0,0,297,298,5,1084,0,0,298,299,5,1086,0,0,299,300,5,1076,0,0,300,301,
  	5,1091,0,0,301,302,5,1083,0,0,302,303,5,1100,0,0,303,50,1,0,0,0,304,305,
  	5,1088,0,0,305,306,5,1110,0,0,306,307,5,1074,0,0,307,308,5,1085,0,0,308,
  	309,5,1086,0,0,309,52,1,0,0,0,310,311,5,1073,0,0,311,312,5,1110,0,0,312,
  	313,5,1083,0,0,313,314,5,1100,0,0,314,315,5,1096,0,0,315,316,5,1077,0,
  	0,316,54,1,0,0,0,317,318,5,1084,0,0,318,319,5,1077,0,0,319,320,5,1085,
  	0,0,320,321,5,1096,0,0,321,322,5,1077,0,0,322,56,1,0,0,0,323,324,5,1084,
  	0,0,324,325,5,1110,0,0,325,326,5,1089,0,0,326,327,5,1090,0,0,327,328,
  	5,1080,0,0,328,329,5,1090,0,0,329,330,5,1100,0,0,330,58,1,0,0,0,331,332,
  	5,1084,0,0,332,333,5,1072,0,0,333,334,5,1082,0,0,334,335,5,1077,0,0,335,
  	336,5,1090,0,0,336,60,1,0,0,0,337,338,5,1085,0,0,338,339,5,1077,0,0,339,
  	62,1,0,0,0,340,341,5,106,0,0,341,342,5,115,0,0,342,64,1,0,0,0,343,344,
  	5,1087,0,0,344,345,5,1088,0,0,345,346,5,1077,0,0,346,347,5,1076,0,0,347,
  	348,5,1086,0,0,348,349,5,1082,0,0,349,66,1,0,0,0,350,351,5,1094,0,0,351,
  	352,5,1077,0,0,352,68,1,0,0,0,353,354,5,61,0,0,354,70,1,0,0,0,355,356,
  	5,62,0,0,356,72,1,0,0,0,357,358,5,60,0,0,358,74,1,0,0,0,359,360,5,46,
  	0,0,360,76,1,0,0,0,361,362,5,43,0,0,362,78,1,0,0,0,363,364,5,45,0,0,364,
  	80,1,0,0,0,365,366,5,42,0,0,366,82,1,0,0,0,367,368,5,47,0,0,368,84,1,
  	0,0,0,369,370,5,37,0,0,370,86,1,0,0,0,371,372,5,94,0,0,372,88,1,0,0,0,
  	373,374,5,38,0,0,374,90,1,0,0,0,375,376,5,124,0,0,376,92,1,0,0,0,377,
  	378,5,40,0,0,378,94,1,0,0,0,379,380,5,41,0,0,380,96,1,0,0,0,381,382,5,
  	91,0,0,382,98,1,0,0,0,383,384,5,93,0,0,384,100,1,0,0,0,385,386,5,63,0,
  	0,386,102,1,0,0,0,387,388,5,58,0,0,388,104,1,0,0,0,389,390,5,126,0,0,
  	390,106,1,0,0,0,391,392,5,39,0,0,392,108,1,0,0,0,393,394,5,34,0,0,394,
  	110,1,0,0,0,395,396,5,33,0,0,396,112,1,0,0,0,397,398,5,44,0,0,398,114,
  	1,0,0,0,399,401,3,141,70,0,400,399,1,0,0,0,401,402,1,0,0,0,402,400,1,
  	0,0,0,402,403,1,0,0,0,403,116,1,0,0,0,404,406,3,141,70,0,405,404,1,0,
  	0,0,406,407,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,
  	411,5,46,0,0,410,412,3,141,70,0,411,410,1,0,0,0,412,413,1,0,0,0,413,411,
  	1,0,0,0,413,414,1,0,0,0,414,118,1,0,0,0,415,416,5,48,0,0,416,419,7,1,
  	0,0,417,420,3,141,70,0,418,420,7,2,0,0,419,417,1,0,0,0,419,418,1,0,0,
  	0,420,421,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,120,1,0,0,0,423,
  	424,5,48,0,0,424,426,7,3,0,0,425,427,2,48,49,0,426,425,1,0,0,0,427,428,
  	1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,122,1,0,0,0,430,434,3,143,
  	71,0,431,433,3,145,72,0,432,431,1,0,0,0,433,436,1,0,0,0,434,432,1,0,0,
  	0,434,435,1,0,0,0,435,124,1,0,0,0,436,434,1,0,0,0,437,470,3,107,53,0,
  	438,471,3,5,2,0,439,471,3,7,3,0,440,471,3,9,4,0,441,471,3,11,5,0,442,
  	471,3,13,6,0,443,471,3,15,7,0,444,471,3,17,8,0,445,471,3,19,9,0,446,471,
  	3,21,10,0,447,471,3,23,11,0,448,471,3,25,12,0,449,471,3,27,13,0,450,471,
  	3,29,14,0,451,471,3,31,15,0,452,471,3,33,16,0,453,471,3,35,17,0,454,471,
  	3,37,18,0,455,471,3,39,19,0,456,471,3,41,20,0,457,471,3,43,21,0,458,471,
  	3,45,22,0,459,471,3,47,23,0,460,471,3,49,24,0,461,471,3,51,25,0,462,471,
  	3,53,26,0,463,471,3,55,27,0,464,471,3,57,28,0,465,471,3,59,29,0,466,471,
  	3,61,30,0,467,471,3,63,31,0,468,471,3,65,32,0,469,471,3,67,33,0,470,438,
  	1,0,0,0,470,439,1,0,0,0,470,440,1,0,0,0,470,441,1,0,0,0,470,442,1,0,0,
  	0,470,443,1,0,0,0,470,444,1,0,0,0,470,445,1,0,0,0,470,446,1,0,0,0,470,
  	447,1,0,0,0,470,448,1,0,0,0,470,449,1,0,0,0,470,450,1,0,0,0,470,451,1,
  	0,0,0,470,452,1,0,0,0,470,453,1,0,0,0,470,454,1,0,0,0,470,455,1,0,0,0,
  	470,456,1,0,0,0,470,457,1,0,0,0,470,458,1,0,0,0,470,459,1,0,0,0,470,460,
  	1,0,0,0,470,461,1,0,0,0,470,462,1,0,0,0,470,463,1,0,0,0,470,464,1,0,0,
  	0,470,465,1,0,0,0,470,466,1,0,0,0,470,467,1,0,0,0,470,468,1,0,0,0,470,
  	469,1,0,0,0,471,126,1,0,0,0,472,473,5,34,0,0,473,474,5,34,0,0,474,478,
  	5,34,0,0,475,477,3,147,73,0,476,475,1,0,0,0,477,480,1,0,0,0,478,479,1,
  	0,0,0,478,476,1,0,0,0,479,481,1,0,0,0,480,478,1,0,0,0,481,482,5,34,0,
  	0,482,483,5,34,0,0,483,484,5,34,0,0,484,128,1,0,0,0,485,489,5,34,0,0,
  	486,488,8,4,0,0,487,486,1,0,0,0,488,491,1,0,0,0,489,487,1,0,0,0,489,490,
  	1,0,0,0,490,492,1,0,0,0,491,489,1,0,0,0,492,493,5,34,0,0,493,130,1,0,
  	0,0,494,495,5,59,0,0,495,496,5,43,0,0,496,132,1,0,0,0,497,498,5,59,0,
  	0,498,499,5,45,0,0,499,134,1,0,0,0,500,501,5,59,0,0,501,502,5,61,0,0,
  	502,136,1,0,0,0,503,504,5,59,0,0,504,505,5,59,0,0,505,510,5,59,0,0,506,
  	509,3,137,68,0,507,509,9,0,0,0,508,506,1,0,0,0,508,507,1,0,0,0,509,512,
  	1,0,0,0,510,511,1,0,0,0,510,508,1,0,0,0,511,513,1,0,0,0,512,510,1,0,0,
  	0,513,514,5,59,0,0,514,515,5,59,0,0,515,516,5,59,0,0,516,517,1,0,0,0,
  	517,518,6,68,0,0,518,138,1,0,0,0,519,520,5,59,0,0,520,525,5,59,0,0,521,
  	524,3,139,69,0,522,524,8,5,0,0,523,521,1,0,0,0,523,522,1,0,0,0,524,527,
  	1,0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,525,1,0,0,
  	0,528,529,6,69,0,0,529,140,1,0,0,0,530,531,2,48,57,0,531,142,1,0,0,0,
  	532,533,7,6,0,0,533,144,1,0,0,0,534,538,3,143,71,0,535,538,7,7,0,0,536,
  	538,3,143,71,0,537,534,1,0,0,0,537,535,1,0,0,0,537,536,1,0,0,0,538,146,
  	1,0,0,0,539,542,3,149,74,0,540,542,9,0,0,0,541,539,1,0,0,0,541,540,1,
  	0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,543,541,1,0,0,0,544,148,1,0,0,0,
  	545,546,5,92,0,0,546,547,5,34,0,0,547,150,1,0,0,0,19,0,152,402,407,413,
  	419,421,428,434,470,478,489,508,510,523,525,537,541,543,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  mavkalexerLexerStaticData = staticData.release();
}

}

MavkaLexer::MavkaLexer(CharStream *input) : Lexer(input) {
  MavkaLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *mavkalexerLexerStaticData->atn, mavkalexerLexerStaticData->decisionToDFA, mavkalexerLexerStaticData->sharedContextCache);
}

MavkaLexer::~MavkaLexer() {
  delete _interpreter;
}

std::string MavkaLexer::getGrammarFileName() const {
  return "MavkaLexer.g4";
}

const std::vector<std::string>& MavkaLexer::getRuleNames() const {
  return mavkalexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& MavkaLexer::getChannelNames() const {
  return mavkalexerLexerStaticData->channelNames;
}

const std::vector<std::string>& MavkaLexer::getModeNames() const {
  return mavkalexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& MavkaLexer::getVocabulary() const {
  return mavkalexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MavkaLexer::getSerializedATN() const {
  return mavkalexerLexerStaticData->serializedATN;
}

const atn::ATN& MavkaLexer::getATN() const {
  return *mavkalexerLexerStaticData->atn;
}




void MavkaLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  mavkalexerLexerInitialize();
#else
  ::antlr4::internal::call_once(mavkalexerLexerOnceFlag, mavkalexerLexerInitialize);
#endif
}
