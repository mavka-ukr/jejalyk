
// Generated from MavkaParser.g4 by ANTLR 4.13.0


#include "MavkaParserListener.h"
#include "MavkaParserVisitor.h"

#include "MavkaParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct MavkaParserStaticData final {
  MavkaParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MavkaParserStaticData(const MavkaParserStaticData&) = delete;
  MavkaParserStaticData(MavkaParserStaticData&&) = delete;
  MavkaParserStaticData& operator=(const MavkaParserStaticData&) = delete;
  MavkaParserStaticData& operator=(MavkaParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag mavkaparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
MavkaParserStaticData *mavkaparserParserStaticData = nullptr;

void mavkaparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (mavkaparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(mavkaparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MavkaParserStaticData>(
    std::vector<std::string>{
      "file", "program", "program_element", "module", "module_body", "module_body_element", 
      "method_declaration", "structure", "structure_elements", "structure_element", 
      "structure_param", "mockup", "mockup_module", "mockup_structure", 
      "mockup_diia", "mockup_subject", "mockup_object", "mockup_body", "mockup_body_element", 
      "diia", "if", "each", "fromto", "fromto_simple", "fromto_complex", 
      "fromto_value", "fromto_middle_symbol", "fromto_to_symbol", "while", 
      "try", "eval", "take", "give", "give_element", "string", "value", 
      "array_elements", "array_element", "dictionary_args", "dictionary_arg", 
      "expr", "throw", "array_destruction", "array_destruction_el", "object_destruction", 
      "object_destruction_el", "assign", "assign_simple", "assign_by_identifier", 
      "assign_by_element", "assign_array_destruction", "assign_object_destruction", 
      "assign_symbol", "wait_assign", "identifier", "extended_identifier", 
      "identifiers_chain", "super_identifiers_chain", "type_value", "type_value_item", 
      "args", "arg", "named_args", "named_arg", "params", "param", "param_value", 
      "body", "body_element_or_return", "body_element", "return_body_line", 
      "arithmetic_op_mul", "arithmetic_op_add", "bitwise_op", "test_op", 
      "comparison_op", "nl", "nls"
    },
    std::vector<std::string>{
      "", "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", "'\\u0434\\u0456\\u044F'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'\\u043F\\u0435\\u0440\\u0435\\u0431\\u0440\\u0430\\u0442\\u0438'", 
      "'=='", "'!='", "'>='", "'<='", "'>'", "'<'", "'\\u044F\\u043A\\u0449\\u043E'", 
      "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", "'\\u0432\\u0437\\u044F\\u0442\\u0438'", 
      "'\\u0432\\u0437\\u044F\\u0442\\u0438 \\u043F\\u0430\\u043A'", "'\\u0432\\u0437\\u044F\\u0442\\u0438 \\u0444\\u0430\\u0439\\u043B'", 
      "'\\u0434\\u0430\\u0442\\u0438'", "'\\u044F\\u043A'", "'\\u0442\\u0430'", 
      "'\\u0454'", "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", 
      "'\\u0442\\u0440\\u0438\\u0432\\u0430\\u043B\\u0430'", "'\\u0441\\u0443\\u0431\\u02BC\\u0454\\u043A\\u0442'", 
      "'\\u0456'", "'\\u0430\\u0431\\u043E'", "'\\u0441\\u043F\\u0440\\u043E\\u0431\\u0443\\u0432\\u0430\\u0442\\u0438'", 
      "'\\u0437\\u043B\\u043E\\u0432\\u0438\\u0442\\u0438'", "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", 
      "'\\u0432\\u043F\\u0430\\u0441\\u0442\\u0438'", "'\\u043F\\u043E\\u043A\\u0438'", 
      "'\\u043C\\u043E\\u0434\\u0443\\u043B\\u044C'", "'\\u003F'", "'\\u0440\\u0456\\u0432\\u043D\\u043E'", 
      "'\\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", "'\\u043C\\u0435\\u043D\\u0448\\u0435'", 
      "'\\u043D\\u0435 \\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", "'\\u043D\\u0435 \\u043C\\u0435\\u043D\\u0448\\u0435'", 
      "'\\u043D\\u0435 \\u0440\\u0456\\u0432\\u043D\\u043E'", "'\\u043D\\u0435 \\u0454'", 
      "'\\u043C\\u0456\\u0441\\u0442\\u0438\\u0442\\u044C'", "'\\u043D\\u0435 \\u043C\\u0456\\u0441\\u0442\\u0438\\u0442\\u044C'", 
      "'.*'", "'\\u043C\\u0430\\u043A\\u0435\\u0442'", "'\\u0432\\u0442\\u0456\\u043B\\u044E\\u0454'", 
      "'\\u0432\\u0442\\u0456\\u043B\\u0438\\u0442\\u0438'", "'js'", "'\\u043A\\u043E\\u043B\\u0438'", 
      "'\\u0442\\u0430\\u043A\\u043E\\u0436'", "'\\u043F\\u0440\\u0435\\u0434\\u043E\\u043A'", 
      "'\\u0446\\u0435'", "'\\u0442\\u0435\\u0441\\u0442'", "'\\u0439'", 
      "'...'", "'..'", "", "", "'--'", "'++'", "'('", "')'", "'['", "']'", 
      "','", "'='", "':='", "'+='", "'-='", "'*='", "'/='", "'//='", "'%='", 
      "'|='", "'&='", "'<<='", "'>>='", "'^='", "'**='", "'||='", "'&&='", 
      "'\\u003F\\u003F='", "'+'", "'-'", "'*'", "'/'", "':'", "'.'", "'!'", 
      "'~'", "'%'", "'//'", "'**'", "'^'", "'||'", "'&&'", "'|'", "'&'", 
      "'<<'", "'>>'", "'0x'", "", "", "", "", "", "", "", "", "'\"\"\"'"
    },
    std::vector<std::string>{
      "", "END", "DIIA", "STRUCTURE", "FOR", "EQ", "NOT_EQ", "GREATER_EQ", 
      "SMALLER_EQ", "GREATER", "SMALLER", "IF", "WAIT", "TAKE", "TAKE_PAK", 
      "TAKE_FILE", "GIVE", "AS", "TA", "IS", "RETURN", "ASYNC", "SUBJECT", 
      "AND", "OR", "TRY", "CATCH", "ELSE", "THROW", "WHILE", "MODULE", "TERNARY", 
      "EQ_WORD", "GR_WORD", "SM_WORD", "NOT_GR_WORD", "NOT_SM_WORD", "NOT_EQ_WORD", 
      "NOT_IS_WORD", "HAS_IS_WORD", "NOT_HAS_IS_WORD", "STAR_ALL", "MOCKUP", 
      "IMPLEMENTS", "IMPLEMENT", "EVAL", "WHEN", "ALSO", "PARENT", "TSE", 
      "TEST", "IY", "SPREAD", "FROMTO", "SKIP_SPACES", "NL", "DECREMENT", 
      "INCREMENT", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_ARRAY", "CLOSE_ARRAY", 
      "COMMA", "ASSIGN", "ASSIGN_PARENT", "ASSIGN_ADD", "ASSIGN_SUB", "ASSIGN_MUL", 
      "ASSIGN_DIV", "ASSIGN_DIVDIV", "ASSIGN_MOD", "ASSIGN_BW_OR", "ASSIGN_BW_AND", 
      "ASSIGN_BW_SHIFT_LEFT", "ASSIGN_BW_SHIFT_RIGHT", "ASSIGN_XOR", "ASSIGN_POW", 
      "ASSIGN_OR", "ASSIGN_AND", "ASSIGN_IF", "PLUS", "MINUS", "MUL", "DIV", 
      "COLON", "DOT", "NOT", "TILDA", "PERCENT", "DIVDIV", "POW", "XOR", 
      "OR_SYM", "AND_SYM", "OR_BW", "AND_BW", "BW_SHIFT_LEFT", "BW_SHIFT_RIGHT", 
      "HEX_START", "ID", "NUMBER", "INTEGER", "FLOAT", "HEX", "HEXUKR", 
      "BINNUM", "BINNUMUKR", "TRIPPLE_QUOTE", "STRING_MULTILINE", "STRING", 
      "COMMENT", "LINE_COMMENT", "OLD_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,112,982,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
  	63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
  	70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
  	77,1,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,164,8,1,10,1,12,1,167,9,1,1,2,1,2,
  	1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,185,8,2,1,
  	3,1,3,3,3,189,8,3,1,3,1,3,1,3,1,3,3,3,195,8,3,1,3,1,3,1,3,1,4,1,4,1,4,
  	1,4,5,4,204,8,4,10,4,12,4,207,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
  	1,5,1,5,1,5,1,5,1,5,1,5,3,5,224,8,5,1,6,3,6,227,8,6,1,6,1,6,1,6,1,6,3,
  	6,233,8,6,1,6,1,6,1,6,1,6,3,6,239,8,6,1,7,1,7,1,7,1,7,3,7,245,8,7,1,7,
  	1,7,1,7,1,7,3,7,251,8,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,260,8,8,10,8,
  	12,8,263,9,8,1,9,1,9,3,9,267,8,9,1,10,1,10,3,10,271,8,10,1,10,1,10,3,
  	10,275,8,10,1,11,1,11,1,11,1,11,1,11,3,11,282,8,11,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,3,12,292,8,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
  	1,13,1,13,1,13,1,13,3,13,305,8,13,1,13,1,13,1,13,1,14,1,14,3,14,312,8,
  	14,1,14,1,14,1,14,1,14,1,14,3,14,319,8,14,1,14,1,14,1,14,1,14,3,14,325,
  	8,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,
  	339,8,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,348,8,17,10,17,12,17,
  	351,9,17,1,18,1,18,1,18,3,18,356,8,18,1,19,3,19,359,8,19,1,19,1,19,1,
  	19,1,19,3,19,365,8,19,1,19,1,19,1,19,1,19,3,19,371,8,19,1,19,1,19,1,19,
  	1,19,3,19,377,8,19,1,19,1,19,1,19,1,19,3,19,383,8,19,1,19,1,19,1,19,1,
  	20,1,20,1,20,1,20,1,20,1,20,3,20,394,8,20,1,20,1,20,1,20,1,20,3,20,400,
  	8,20,1,20,1,20,1,20,3,20,405,8,20,1,21,1,21,1,21,3,21,410,8,21,1,21,1,
  	21,1,21,1,21,3,21,416,8,21,1,21,3,21,419,8,21,1,21,1,21,1,21,1,21,3,21,
  	425,8,21,1,21,1,21,1,22,1,22,3,22,431,8,22,1,23,1,23,1,23,3,23,436,8,
  	23,1,23,1,23,1,24,1,24,1,24,3,24,443,8,24,1,24,1,24,1,24,3,24,448,8,24,
  	1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,459,8,25,1,26,1,26,
  	1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,471,8,28,1,28,1,28,1,29,
  	1,29,1,29,1,29,1,29,1,29,3,29,481,8,29,1,29,1,29,1,29,3,29,486,8,29,1,
  	29,1,29,1,30,1,30,1,30,1,31,1,31,3,31,495,8,31,1,31,1,31,1,31,3,31,500,
  	8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,510,8,31,3,31,512,8,
  	31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,521,8,32,10,32,12,32,524,9,
  	32,1,33,1,33,1,33,3,33,529,8,33,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,
  	35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
  	35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,559,8,35,1,35,1,35,1,35,1,35,3,
  	35,565,8,35,1,35,1,35,1,35,3,35,570,8,35,1,35,3,35,573,8,35,1,35,1,35,
  	1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,35,1,35,3,35,608,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
  	1,35,4,35,633,8,35,11,35,12,35,634,5,35,637,8,35,10,35,12,35,640,9,35,
  	1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,651,8,36,10,36,12,36,
  	654,9,36,1,37,1,37,1,38,1,38,1,38,5,38,661,8,38,10,38,12,38,664,9,38,
  	1,39,1,39,1,39,3,39,669,8,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,
  	1,40,1,40,1,40,1,40,3,40,683,8,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,
  	691,8,40,1,40,1,40,3,40,695,8,40,1,40,1,40,3,40,699,8,40,1,40,1,40,1,
  	40,3,40,704,8,40,1,40,1,40,1,40,1,40,3,40,710,8,40,1,40,1,40,1,40,1,40,
  	3,40,716,8,40,1,40,1,40,1,40,1,40,3,40,722,8,40,1,40,1,40,1,40,3,40,727,
  	8,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
  	5,42,742,8,42,10,42,12,42,745,9,42,1,42,1,42,1,43,1,43,1,44,1,44,1,44,
  	1,44,5,44,755,8,44,10,44,12,44,758,9,44,1,44,1,44,1,45,1,45,1,45,1,45,
  	1,46,1,46,1,46,1,46,1,46,3,46,771,8,46,1,47,3,47,774,8,47,1,47,1,47,3,
  	47,778,8,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,
  	49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,
  	52,1,53,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,5,
  	56,819,8,56,10,56,12,56,822,9,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
  	57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,840,8,57,10,57,12,57,
  	843,9,57,1,58,1,58,1,58,5,58,848,8,58,10,58,12,58,851,9,58,1,59,1,59,
  	3,59,855,8,59,1,59,1,59,1,60,1,60,1,60,5,60,862,8,60,10,60,12,60,865,
  	9,60,1,61,1,61,3,61,869,8,61,1,61,1,61,1,61,1,62,1,62,1,62,5,62,877,8,
  	62,10,62,12,62,880,9,62,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,
  	1,64,1,64,1,64,5,64,894,8,64,10,64,12,64,897,9,64,1,64,1,64,1,64,1,64,
  	1,64,1,64,3,64,905,8,64,3,64,907,8,64,1,64,1,64,1,64,3,64,912,8,64,3,
  	64,914,8,64,1,65,1,65,1,65,3,65,919,8,65,1,65,3,65,922,8,65,1,65,1,65,
  	3,65,926,8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,935,8,66,1,67,1,
  	67,1,67,1,67,5,67,941,8,67,10,67,12,67,944,9,67,1,68,1,68,3,68,948,8,
  	68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,959,8,69,1,70,1,
  	70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,
  	77,5,77,977,8,77,10,77,12,77,980,9,77,1,77,0,3,70,112,114,78,0,2,4,6,
  	8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
  	56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
  	102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
  	138,140,142,144,146,148,150,152,154,0,11,2,0,80,83,88,90,1,0,5,10,1,0,
  	108,109,2,0,49,49,63,79,8,0,1,4,11,13,16,21,23,30,32,34,42,43,45,46,99,
  	99,2,0,24,24,94,94,2,0,82,83,88,90,1,0,80,81,2,0,91,91,94,97,2,0,23,24,
  	92,93,3,0,5,10,19,19,32,40,1075,0,156,1,0,0,0,2,159,1,0,0,0,4,184,1,0,
  	0,0,6,186,1,0,0,0,8,199,1,0,0,0,10,223,1,0,0,0,12,226,1,0,0,0,14,240,
  	1,0,0,0,16,255,1,0,0,0,18,266,1,0,0,0,20,268,1,0,0,0,22,281,1,0,0,0,24,
  	283,1,0,0,0,26,296,1,0,0,0,28,309,1,0,0,0,30,326,1,0,0,0,32,331,1,0,0,
  	0,34,343,1,0,0,0,36,355,1,0,0,0,38,358,1,0,0,0,40,387,1,0,0,0,42,406,
  	1,0,0,0,44,430,1,0,0,0,46,432,1,0,0,0,48,439,1,0,0,0,50,458,1,0,0,0,52,
  	460,1,0,0,0,54,462,1,0,0,0,56,464,1,0,0,0,58,474,1,0,0,0,60,489,1,0,0,
  	0,62,511,1,0,0,0,64,513,1,0,0,0,66,525,1,0,0,0,68,530,1,0,0,0,70,572,
  	1,0,0,0,72,641,1,0,0,0,74,655,1,0,0,0,76,657,1,0,0,0,78,665,1,0,0,0,80,
  	726,1,0,0,0,82,728,1,0,0,0,84,731,1,0,0,0,86,748,1,0,0,0,88,750,1,0,0,
  	0,90,761,1,0,0,0,92,770,1,0,0,0,94,773,1,0,0,0,96,782,1,0,0,0,98,788,
  	1,0,0,0,100,795,1,0,0,0,102,799,1,0,0,0,104,803,1,0,0,0,106,805,1,0,0,
  	0,108,808,1,0,0,0,110,810,1,0,0,0,112,812,1,0,0,0,114,823,1,0,0,0,116,
  	844,1,0,0,0,118,854,1,0,0,0,120,858,1,0,0,0,122,866,1,0,0,0,124,873,1,
  	0,0,0,126,881,1,0,0,0,128,913,1,0,0,0,130,918,1,0,0,0,132,934,1,0,0,0,
  	134,936,1,0,0,0,136,947,1,0,0,0,138,958,1,0,0,0,140,960,1,0,0,0,142,963,
  	1,0,0,0,144,965,1,0,0,0,146,967,1,0,0,0,148,969,1,0,0,0,150,971,1,0,0,
  	0,152,973,1,0,0,0,154,978,1,0,0,0,156,157,3,2,1,0,157,158,5,0,0,1,158,
  	1,1,0,0,0,159,165,3,4,2,0,160,161,3,152,76,0,161,162,3,4,2,0,162,164,
  	1,0,0,0,163,160,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,
  	0,166,3,1,0,0,0,167,165,1,0,0,0,168,185,3,6,3,0,169,185,3,14,7,0,170,
  	185,3,22,11,0,171,185,3,38,19,0,172,185,3,40,20,0,173,185,3,42,21,0,174,
  	185,3,56,28,0,175,185,3,58,29,0,176,185,3,80,40,0,177,185,3,82,41,0,178,
  	185,3,60,30,0,179,185,3,106,53,0,180,185,3,92,46,0,181,185,3,62,31,0,
  	182,185,3,64,32,0,183,185,3,154,77,0,184,168,1,0,0,0,184,169,1,0,0,0,
  	184,170,1,0,0,0,184,171,1,0,0,0,184,172,1,0,0,0,184,173,1,0,0,0,184,174,
  	1,0,0,0,184,175,1,0,0,0,184,176,1,0,0,0,184,177,1,0,0,0,184,178,1,0,0,
  	0,184,179,1,0,0,0,184,180,1,0,0,0,184,181,1,0,0,0,184,182,1,0,0,0,184,
  	183,1,0,0,0,185,5,1,0,0,0,186,188,5,30,0,0,187,189,3,108,54,0,188,187,
  	1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,0,190,194,3,152,76,0,191,192,3,
  	8,4,0,192,193,3,152,76,0,193,195,1,0,0,0,194,191,1,0,0,0,194,195,1,0,
  	0,0,195,196,1,0,0,0,196,197,3,154,77,0,197,198,5,1,0,0,198,7,1,0,0,0,
  	199,205,3,10,5,0,200,201,3,152,76,0,201,202,3,10,5,0,202,204,1,0,0,0,
  	203,200,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,9,
  	1,0,0,0,207,205,1,0,0,0,208,224,3,6,3,0,209,224,3,14,7,0,210,224,3,22,
  	11,0,211,224,3,38,19,0,212,224,3,40,20,0,213,224,3,42,21,0,214,224,3,
  	56,28,0,215,224,3,58,29,0,216,224,3,80,40,0,217,224,3,82,41,0,218,224,
  	3,60,30,0,219,224,3,106,53,0,220,224,3,92,46,0,221,224,3,64,32,0,222,
  	224,3,154,77,0,223,208,1,0,0,0,223,209,1,0,0,0,223,210,1,0,0,0,223,211,
  	1,0,0,0,223,212,1,0,0,0,223,213,1,0,0,0,223,214,1,0,0,0,223,215,1,0,0,
  	0,223,216,1,0,0,0,223,217,1,0,0,0,223,218,1,0,0,0,223,219,1,0,0,0,223,
  	220,1,0,0,0,223,221,1,0,0,0,223,222,1,0,0,0,224,11,1,0,0,0,225,227,5,
  	21,0,0,226,225,1,0,0,0,226,227,1,0,0,0,227,228,1,0,0,0,228,229,3,108,
  	54,0,229,230,5,58,0,0,230,232,3,154,77,0,231,233,3,128,64,0,232,231,1,
  	0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,235,3,154,77,0,235,236,1,0,
  	0,0,236,238,5,59,0,0,237,239,3,116,58,0,238,237,1,0,0,0,238,239,1,0,0,
  	0,239,13,1,0,0,0,240,241,5,3,0,0,241,244,3,108,54,0,242,243,5,19,0,0,
  	243,245,3,114,57,0,244,242,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,
  	250,3,152,76,0,247,248,3,16,8,0,248,249,3,152,76,0,249,251,1,0,0,0,250,
  	247,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,253,3,154,77,0,253,254,
  	5,1,0,0,254,15,1,0,0,0,255,261,3,18,9,0,256,257,3,152,76,0,257,258,3,
  	18,9,0,258,260,1,0,0,0,259,256,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,
  	0,261,262,1,0,0,0,262,17,1,0,0,0,263,261,1,0,0,0,264,267,3,20,10,0,265,
  	267,3,154,77,0,266,264,1,0,0,0,266,265,1,0,0,0,267,19,1,0,0,0,268,270,
  	3,108,54,0,269,271,3,116,58,0,270,269,1,0,0,0,270,271,1,0,0,0,271,274,
  	1,0,0,0,272,273,5,63,0,0,273,275,3,132,66,0,274,272,1,0,0,0,274,275,1,
  	0,0,0,275,21,1,0,0,0,276,282,3,24,12,0,277,282,3,26,13,0,278,282,3,28,
  	14,0,279,282,3,30,15,0,280,282,3,32,16,0,281,276,1,0,0,0,281,277,1,0,
  	0,0,281,278,1,0,0,0,281,279,1,0,0,0,281,280,1,0,0,0,282,23,1,0,0,0,283,
  	284,5,42,0,0,284,285,5,30,0,0,285,286,3,108,54,0,286,287,3,152,76,0,287,
  	291,3,154,77,0,288,289,3,34,17,0,289,290,3,152,76,0,290,292,1,0,0,0,291,
  	288,1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,294,3,154,77,0,294,295,
  	5,1,0,0,295,25,1,0,0,0,296,297,5,42,0,0,297,298,5,3,0,0,298,299,3,108,
  	54,0,299,300,3,152,76,0,300,304,3,154,77,0,301,302,3,34,17,0,302,303,
  	3,152,76,0,303,305,1,0,0,0,304,301,1,0,0,0,304,305,1,0,0,0,305,306,1,
  	0,0,0,306,307,3,154,77,0,307,308,5,1,0,0,308,27,1,0,0,0,309,311,5,42,
  	0,0,310,312,5,21,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,
  	313,314,5,2,0,0,314,315,3,108,54,0,315,316,5,58,0,0,316,318,3,154,77,
  	0,317,319,3,128,64,0,318,317,1,0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,
  	320,321,3,154,77,0,321,322,1,0,0,0,322,324,5,59,0,0,323,325,3,116,58,
  	0,324,323,1,0,0,0,324,325,1,0,0,0,325,29,1,0,0,0,326,327,5,42,0,0,327,
  	328,5,22,0,0,328,329,3,108,54,0,329,330,3,116,58,0,330,31,1,0,0,0,331,
  	332,5,42,0,0,332,333,3,108,54,0,333,334,3,152,76,0,334,338,3,154,77,0,
  	335,336,3,34,17,0,336,337,3,152,76,0,337,339,1,0,0,0,338,335,1,0,0,0,
  	338,339,1,0,0,0,339,340,1,0,0,0,340,341,3,154,77,0,341,342,5,1,0,0,342,
  	33,1,0,0,0,343,349,3,36,18,0,344,345,3,152,76,0,345,346,3,36,18,0,346,
  	348,1,0,0,0,347,344,1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,0,349,350,1,
  	0,0,0,350,35,1,0,0,0,351,349,1,0,0,0,352,356,3,20,10,0,353,356,3,12,6,
  	0,354,356,3,154,77,0,355,352,1,0,0,0,355,353,1,0,0,0,355,354,1,0,0,0,
  	356,37,1,0,0,0,357,359,5,21,0,0,358,357,1,0,0,0,358,359,1,0,0,0,359,360,
  	1,0,0,0,360,364,5,2,0,0,361,362,3,108,54,0,362,363,5,85,0,0,363,365,1,
  	0,0,0,364,361,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,367,3,108,54,
  	0,367,368,5,58,0,0,368,370,3,154,77,0,369,371,3,128,64,0,370,369,1,0,
  	0,0,370,371,1,0,0,0,371,372,1,0,0,0,372,373,3,154,77,0,373,374,1,0,0,
  	0,374,376,5,59,0,0,375,377,3,116,58,0,376,375,1,0,0,0,376,377,1,0,0,0,
  	377,378,1,0,0,0,378,382,3,152,76,0,379,380,3,134,67,0,380,381,3,152,76,
  	0,381,383,1,0,0,0,382,379,1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,
  	385,3,154,77,0,385,386,5,1,0,0,386,39,1,0,0,0,387,388,5,11,0,0,388,389,
  	3,80,40,0,389,393,3,152,76,0,390,391,3,134,67,0,391,392,3,152,76,0,392,
  	394,1,0,0,0,393,390,1,0,0,0,393,394,1,0,0,0,394,404,1,0,0,0,395,396,5,
  	27,0,0,396,397,3,134,67,0,397,398,3,152,76,0,398,400,1,0,0,0,399,395,
  	1,0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,405,5,1,0,0,402,403,5,27,
  	0,0,403,405,3,40,20,0,404,399,1,0,0,0,404,402,1,0,0,0,405,41,1,0,0,0,
  	406,409,5,4,0,0,407,410,3,80,40,0,408,410,3,44,22,0,409,407,1,0,0,0,409,
  	408,1,0,0,0,410,411,1,0,0,0,411,415,5,17,0,0,412,413,3,108,54,0,413,414,
  	5,62,0,0,414,416,1,0,0,0,415,412,1,0,0,0,415,416,1,0,0,0,416,418,1,0,
  	0,0,417,419,3,108,54,0,418,417,1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,
  	0,420,424,3,152,76,0,421,422,3,134,67,0,422,423,3,152,76,0,423,425,1,
  	0,0,0,424,421,1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,427,5,1,0,0,
  	427,43,1,0,0,0,428,431,3,46,23,0,429,431,3,48,24,0,430,428,1,0,0,0,430,
  	429,1,0,0,0,431,45,1,0,0,0,432,433,3,50,25,0,433,435,5,53,0,0,434,436,
  	3,54,27,0,435,434,1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,438,3,50,
  	25,0,438,47,1,0,0,0,439,440,3,50,25,0,440,442,5,53,0,0,441,443,3,52,26,
  	0,442,441,1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,0,444,445,3,50,25,0,445,
  	447,5,53,0,0,446,448,3,54,27,0,447,446,1,0,0,0,447,448,1,0,0,0,448,449,
  	1,0,0,0,449,450,3,50,25,0,450,49,1,0,0,0,451,459,5,100,0,0,452,459,5,
  	109,0,0,453,459,3,108,54,0,454,455,5,58,0,0,455,456,3,70,35,0,456,457,
  	5,59,0,0,457,459,1,0,0,0,458,451,1,0,0,0,458,452,1,0,0,0,458,453,1,0,
  	0,0,458,454,1,0,0,0,459,51,1,0,0,0,460,461,7,0,0,0,461,53,1,0,0,0,462,
  	463,7,1,0,0,463,55,1,0,0,0,464,465,5,29,0,0,465,466,3,80,40,0,466,470,
  	3,152,76,0,467,468,3,134,67,0,468,469,3,152,76,0,469,471,1,0,0,0,470,
  	467,1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,0,472,473,5,1,0,0,473,57,1,
  	0,0,0,474,475,5,25,0,0,475,476,3,152,76,0,476,477,3,134,67,0,477,478,
  	3,152,76,0,478,480,5,26,0,0,479,481,3,108,54,0,480,479,1,0,0,0,480,481,
  	1,0,0,0,481,485,1,0,0,0,482,483,3,134,67,0,483,484,3,152,76,0,484,486,
  	1,0,0,0,485,482,1,0,0,0,485,486,1,0,0,0,486,487,1,0,0,0,487,488,5,1,0,
  	0,488,59,1,0,0,0,489,490,5,45,0,0,490,491,3,70,35,0,491,61,1,0,0,0,492,
  	494,5,13,0,0,493,495,5,85,0,0,494,493,1,0,0,0,494,495,1,0,0,0,495,496,
  	1,0,0,0,496,499,3,112,56,0,497,498,5,17,0,0,498,500,3,108,54,0,499,497,
  	1,0,0,0,499,500,1,0,0,0,500,512,1,0,0,0,501,502,5,15,0,0,502,503,5,109,
  	0,0,503,504,5,17,0,0,504,512,3,108,54,0,505,506,5,13,0,0,506,509,5,109,
  	0,0,507,508,5,17,0,0,508,510,3,108,54,0,509,507,1,0,0,0,509,510,1,0,0,
  	0,510,512,1,0,0,0,511,492,1,0,0,0,511,501,1,0,0,0,511,505,1,0,0,0,512,
  	63,1,0,0,0,513,514,5,16,0,0,514,522,3,66,33,0,515,516,3,154,77,0,516,
  	517,5,62,0,0,517,518,3,154,77,0,518,519,3,66,33,0,519,521,1,0,0,0,520,
  	515,1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,65,1,
  	0,0,0,524,522,1,0,0,0,525,528,3,108,54,0,526,527,5,17,0,0,527,529,3,108,
  	54,0,528,526,1,0,0,0,528,529,1,0,0,0,529,67,1,0,0,0,530,531,7,2,0,0,531,
  	69,1,0,0,0,532,533,6,35,-1,0,533,573,5,100,0,0,534,573,3,68,34,0,535,
  	573,3,108,54,0,536,537,5,80,0,0,537,573,3,70,35,20,538,539,5,81,0,0,539,
  	573,3,70,35,19,540,541,5,56,0,0,541,573,3,70,35,18,542,543,5,57,0,0,543,
  	573,3,70,35,17,544,545,5,86,0,0,545,573,3,70,35,14,546,547,5,87,0,0,547,
  	573,3,70,35,13,548,549,5,58,0,0,549,550,3,80,40,0,550,551,5,59,0,0,551,
  	573,1,0,0,0,552,553,5,58,0,0,553,554,3,80,40,0,554,555,5,59,0,0,555,558,
  	5,58,0,0,556,559,3,120,60,0,557,559,3,124,62,0,558,556,1,0,0,0,558,557,
  	1,0,0,0,558,559,1,0,0,0,559,560,1,0,0,0,560,561,5,59,0,0,561,573,1,0,
  	0,0,562,564,5,60,0,0,563,565,3,72,36,0,564,563,1,0,0,0,564,565,1,0,0,
  	0,565,566,1,0,0,0,566,573,5,61,0,0,567,569,5,58,0,0,568,570,3,76,38,0,
  	569,568,1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,0,571,573,5,59,0,0,572,
  	532,1,0,0,0,572,534,1,0,0,0,572,535,1,0,0,0,572,536,1,0,0,0,572,538,1,
  	0,0,0,572,540,1,0,0,0,572,542,1,0,0,0,572,544,1,0,0,0,572,546,1,0,0,0,
  	572,548,1,0,0,0,572,552,1,0,0,0,572,562,1,0,0,0,572,567,1,0,0,0,573,638,
  	1,0,0,0,574,575,10,10,0,0,575,576,5,17,0,0,576,637,3,70,35,11,577,578,
  	10,9,0,0,578,579,3,142,71,0,579,580,3,70,35,10,580,637,1,0,0,0,581,582,
  	10,8,0,0,582,583,3,144,72,0,583,584,3,70,35,9,584,637,1,0,0,0,585,586,
  	10,7,0,0,586,587,3,146,73,0,587,588,3,70,35,8,588,637,1,0,0,0,589,590,
  	10,6,0,0,590,591,3,150,75,0,591,592,3,70,35,7,592,637,1,0,0,0,593,594,
  	10,5,0,0,594,595,3,148,74,0,595,596,3,70,35,6,596,637,1,0,0,0,597,598,
  	10,23,0,0,598,599,3,154,77,0,599,600,5,85,0,0,600,601,3,154,77,0,601,
  	602,3,110,55,0,602,637,1,0,0,0,603,604,10,22,0,0,604,607,5,58,0,0,605,
  	608,3,120,60,0,606,608,3,124,62,0,607,605,1,0,0,0,607,606,1,0,0,0,607,
  	608,1,0,0,0,608,609,1,0,0,0,609,637,5,59,0,0,610,611,10,21,0,0,611,612,
  	5,60,0,0,612,613,3,80,40,0,613,614,5,61,0,0,614,637,1,0,0,0,615,616,10,
  	16,0,0,616,637,5,56,0,0,617,618,10,15,0,0,618,637,5,57,0,0,619,620,10,
  	4,0,0,620,621,3,154,77,0,621,622,5,31,0,0,622,623,3,154,77,0,623,624,
  	3,80,40,0,624,625,3,154,77,0,625,626,5,84,0,0,626,627,3,154,77,0,627,
  	628,3,80,40,0,628,637,1,0,0,0,629,632,10,1,0,0,630,631,5,18,0,0,631,633,
  	3,70,35,0,632,630,1,0,0,0,633,634,1,0,0,0,634,632,1,0,0,0,634,635,1,0,
  	0,0,635,637,1,0,0,0,636,574,1,0,0,0,636,577,1,0,0,0,636,581,1,0,0,0,636,
  	585,1,0,0,0,636,589,1,0,0,0,636,593,1,0,0,0,636,597,1,0,0,0,636,603,1,
  	0,0,0,636,610,1,0,0,0,636,615,1,0,0,0,636,617,1,0,0,0,636,619,1,0,0,0,
  	636,629,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,71,
  	1,0,0,0,640,638,1,0,0,0,641,642,3,154,77,0,642,643,3,74,37,0,643,652,
  	3,154,77,0,644,645,3,154,77,0,645,646,5,62,0,0,646,647,3,154,77,0,647,
  	648,3,74,37,0,648,649,3,154,77,0,649,651,1,0,0,0,650,644,1,0,0,0,651,
  	654,1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,73,1,0,0,0,654,652,1,
  	0,0,0,655,656,3,80,40,0,656,75,1,0,0,0,657,662,3,78,39,0,658,659,5,62,
  	0,0,659,661,3,78,39,0,660,658,1,0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,
  	662,663,1,0,0,0,663,77,1,0,0,0,664,662,1,0,0,0,665,668,3,154,77,0,666,
  	669,3,108,54,0,667,669,5,109,0,0,668,666,1,0,0,0,668,667,1,0,0,0,669,
  	670,1,0,0,0,670,671,5,63,0,0,671,672,3,80,40,0,672,673,3,154,77,0,673,
  	79,1,0,0,0,674,675,5,48,0,0,675,676,3,154,77,0,676,677,5,85,0,0,677,678,
  	3,154,77,0,678,679,3,108,54,0,679,682,5,58,0,0,680,683,3,120,60,0,681,
  	683,3,124,62,0,682,680,1,0,0,0,682,681,1,0,0,0,682,683,1,0,0,0,683,684,
  	1,0,0,0,684,685,5,59,0,0,685,727,1,0,0,0,686,727,3,70,35,0,687,688,5,
  	12,0,0,688,727,3,70,35,0,689,691,5,21,0,0,690,689,1,0,0,0,690,691,1,0,
  	0,0,691,692,1,0,0,0,692,694,5,58,0,0,693,695,3,128,64,0,694,693,1,0,0,
  	0,694,695,1,0,0,0,695,696,1,0,0,0,696,698,5,59,0,0,697,699,3,116,58,0,
  	698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,701,5,84,0,0,701,
  	727,3,80,40,0,702,704,5,21,0,0,703,702,1,0,0,0,703,704,1,0,0,0,704,705,
  	1,0,0,0,705,706,5,2,0,0,706,707,5,58,0,0,707,709,3,154,77,0,708,710,3,
  	128,64,0,709,708,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,712,3,154,
  	77,0,712,713,1,0,0,0,713,715,5,59,0,0,714,716,3,116,58,0,715,714,1,0,
  	0,0,715,716,1,0,0,0,716,717,1,0,0,0,717,721,3,152,76,0,718,719,3,134,
  	67,0,719,720,3,152,76,0,720,722,1,0,0,0,721,718,1,0,0,0,721,722,1,0,0,
  	0,722,723,1,0,0,0,723,724,3,154,77,0,724,725,5,1,0,0,725,727,1,0,0,0,
  	726,674,1,0,0,0,726,686,1,0,0,0,726,687,1,0,0,0,726,690,1,0,0,0,726,703,
  	1,0,0,0,727,81,1,0,0,0,728,729,5,28,0,0,729,730,3,80,40,0,730,83,1,0,
  	0,0,731,732,5,60,0,0,732,733,3,154,77,0,733,734,3,86,43,0,734,743,3,154,
  	77,0,735,736,3,154,77,0,736,737,5,62,0,0,737,738,3,154,77,0,738,739,3,
  	86,43,0,739,740,3,154,77,0,740,742,1,0,0,0,741,735,1,0,0,0,742,745,1,
  	0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,746,1,0,0,0,745,743,1,0,0,0,
  	746,747,5,61,0,0,747,85,1,0,0,0,748,749,3,108,54,0,749,87,1,0,0,0,750,
  	751,5,58,0,0,751,756,3,90,45,0,752,753,5,62,0,0,753,755,3,90,45,0,754,
  	752,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,1,0,0,0,757,759,1,
  	0,0,0,758,756,1,0,0,0,759,760,5,59,0,0,760,89,1,0,0,0,761,762,3,154,77,
  	0,762,763,3,108,54,0,763,764,3,154,77,0,764,91,1,0,0,0,765,771,3,94,47,
  	0,766,771,3,96,48,0,767,771,3,98,49,0,768,771,3,100,50,0,769,771,3,102,
  	51,0,770,765,1,0,0,0,770,766,1,0,0,0,770,767,1,0,0,0,770,768,1,0,0,0,
  	770,769,1,0,0,0,771,93,1,0,0,0,772,774,5,22,0,0,773,772,1,0,0,0,773,774,
  	1,0,0,0,774,775,1,0,0,0,775,777,3,108,54,0,776,778,3,116,58,0,777,776,
  	1,0,0,0,777,778,1,0,0,0,778,779,1,0,0,0,779,780,3,104,52,0,780,781,3,
  	80,40,0,781,95,1,0,0,0,782,783,3,114,57,0,783,784,5,85,0,0,784,785,3,
  	108,54,0,785,786,3,104,52,0,786,787,3,80,40,0,787,97,1,0,0,0,788,789,
  	3,114,57,0,789,790,5,60,0,0,790,791,3,80,40,0,791,792,5,61,0,0,792,793,
  	3,104,52,0,793,794,3,80,40,0,794,99,1,0,0,0,795,796,3,84,42,0,796,797,
  	5,63,0,0,797,798,3,80,40,0,798,101,1,0,0,0,799,800,3,88,44,0,800,801,
  	5,63,0,0,801,802,3,80,40,0,802,103,1,0,0,0,803,804,7,3,0,0,804,105,1,
  	0,0,0,805,806,5,12,0,0,806,807,3,92,46,0,807,107,1,0,0,0,808,809,5,99,
  	0,0,809,109,1,0,0,0,810,811,7,4,0,0,811,111,1,0,0,0,812,813,6,56,-1,0,
  	813,814,3,108,54,0,814,820,1,0,0,0,815,816,10,1,0,0,816,817,5,85,0,0,
  	817,819,3,110,55,0,818,815,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,820,
  	821,1,0,0,0,821,113,1,0,0,0,822,820,1,0,0,0,823,824,6,57,-1,0,824,825,
  	3,108,54,0,825,841,1,0,0,0,826,827,10,2,0,0,827,828,3,154,77,0,828,829,
  	5,85,0,0,829,830,3,154,77,0,830,831,3,110,55,0,831,840,1,0,0,0,832,833,
  	10,1,0,0,833,834,5,60,0,0,834,835,3,154,77,0,835,836,3,80,40,0,836,837,
  	3,154,77,0,837,838,5,61,0,0,838,840,1,0,0,0,839,826,1,0,0,0,839,832,1,
  	0,0,0,840,843,1,0,0,0,841,839,1,0,0,0,841,842,1,0,0,0,842,115,1,0,0,0,
  	843,841,1,0,0,0,844,849,3,118,59,0,845,846,7,5,0,0,846,848,3,118,59,0,
  	847,845,1,0,0,0,848,851,1,0,0,0,849,847,1,0,0,0,849,850,1,0,0,0,850,117,
  	1,0,0,0,851,849,1,0,0,0,852,853,5,60,0,0,853,855,5,61,0,0,854,852,1,0,
  	0,0,854,855,1,0,0,0,855,856,1,0,0,0,856,857,3,112,56,0,857,119,1,0,0,
  	0,858,863,3,122,61,0,859,860,5,62,0,0,860,862,3,122,61,0,861,859,1,0,
  	0,0,862,865,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,121,1,0,0,0,865,
  	863,1,0,0,0,866,868,3,154,77,0,867,869,5,52,0,0,868,867,1,0,0,0,868,869,
  	1,0,0,0,869,870,1,0,0,0,870,871,3,80,40,0,871,872,3,154,77,0,872,123,
  	1,0,0,0,873,878,3,126,63,0,874,875,5,62,0,0,875,877,3,126,63,0,876,874,
  	1,0,0,0,877,880,1,0,0,0,878,876,1,0,0,0,878,879,1,0,0,0,879,125,1,0,0,
  	0,880,878,1,0,0,0,881,882,3,154,77,0,882,883,3,108,54,0,883,884,5,63,
  	0,0,884,885,3,80,40,0,885,886,3,154,77,0,886,127,1,0,0,0,887,895,3,130,
  	65,0,888,889,3,154,77,0,889,890,5,62,0,0,890,891,3,154,77,0,891,892,3,
  	130,65,0,892,894,1,0,0,0,893,888,1,0,0,0,894,897,1,0,0,0,895,893,1,0,
  	0,0,895,896,1,0,0,0,896,906,1,0,0,0,897,895,1,0,0,0,898,899,3,154,77,
  	0,899,900,5,62,0,0,900,901,3,154,77,0,901,902,5,52,0,0,902,904,3,108,
  	54,0,903,905,3,116,58,0,904,903,1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,
  	0,906,898,1,0,0,0,906,907,1,0,0,0,907,914,1,0,0,0,908,909,5,52,0,0,909,
  	911,3,108,54,0,910,912,3,116,58,0,911,910,1,0,0,0,911,912,1,0,0,0,912,
  	914,1,0,0,0,913,887,1,0,0,0,913,908,1,0,0,0,914,129,1,0,0,0,915,919,3,
  	108,54,0,916,919,3,84,42,0,917,919,3,88,44,0,918,915,1,0,0,0,918,916,
  	1,0,0,0,918,917,1,0,0,0,919,921,1,0,0,0,920,922,3,116,58,0,921,920,1,
  	0,0,0,921,922,1,0,0,0,922,925,1,0,0,0,923,924,5,63,0,0,924,926,3,132,
  	66,0,925,923,1,0,0,0,925,926,1,0,0,0,926,131,1,0,0,0,927,935,5,100,0,
  	0,928,935,7,2,0,0,929,935,3,108,54,0,930,931,5,58,0,0,931,935,5,59,0,
  	0,932,933,5,60,0,0,933,935,5,61,0,0,934,927,1,0,0,0,934,928,1,0,0,0,934,
  	929,1,0,0,0,934,930,1,0,0,0,934,932,1,0,0,0,935,133,1,0,0,0,936,942,3,
  	136,68,0,937,938,3,152,76,0,938,939,3,136,68,0,939,941,1,0,0,0,940,937,
  	1,0,0,0,941,944,1,0,0,0,942,940,1,0,0,0,942,943,1,0,0,0,943,135,1,0,0,
  	0,944,942,1,0,0,0,945,948,3,138,69,0,946,948,3,140,70,0,947,945,1,0,0,
  	0,947,946,1,0,0,0,948,137,1,0,0,0,949,959,3,40,20,0,950,959,3,42,21,0,
  	951,959,3,56,28,0,952,959,3,58,29,0,953,959,3,80,40,0,954,959,3,82,41,
  	0,955,959,3,106,53,0,956,959,3,92,46,0,957,959,3,154,77,0,958,949,1,0,
  	0,0,958,950,1,0,0,0,958,951,1,0,0,0,958,952,1,0,0,0,958,953,1,0,0,0,958,
  	954,1,0,0,0,958,955,1,0,0,0,958,956,1,0,0,0,958,957,1,0,0,0,959,139,1,
  	0,0,0,960,961,5,20,0,0,961,962,3,80,40,0,962,141,1,0,0,0,963,964,7,6,
  	0,0,964,143,1,0,0,0,965,966,7,7,0,0,966,145,1,0,0,0,967,968,7,8,0,0,968,
  	147,1,0,0,0,969,970,7,9,0,0,970,149,1,0,0,0,971,972,7,10,0,0,972,151,
  	1,0,0,0,973,974,5,55,0,0,974,153,1,0,0,0,975,977,3,152,76,0,976,975,1,
  	0,0,0,977,980,1,0,0,0,978,976,1,0,0,0,978,979,1,0,0,0,979,155,1,0,0,0,
  	980,978,1,0,0,0,96,165,184,188,194,205,223,226,232,238,244,250,261,266,
  	270,274,281,291,304,311,318,324,338,349,355,358,364,370,376,382,393,399,
  	404,409,415,418,424,430,435,442,447,458,470,480,485,494,499,509,511,522,
  	528,558,564,569,572,607,634,636,638,652,662,668,682,690,694,698,703,709,
  	715,721,726,743,756,770,773,777,820,839,841,849,854,863,868,878,895,904,
  	906,911,913,918,921,925,934,942,947,958,978
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  mavkaparserParserStaticData = staticData.release();
}

}

MavkaParser::MavkaParser(TokenStream *input) : MavkaParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

MavkaParser::MavkaParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  MavkaParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *mavkaparserParserStaticData->atn, mavkaparserParserStaticData->decisionToDFA, mavkaparserParserStaticData->sharedContextCache, options);
}

MavkaParser::~MavkaParser() {
  delete _interpreter;
}

const atn::ATN& MavkaParser::getATN() const {
  return *mavkaparserParserStaticData->atn;
}

std::string MavkaParser::getGrammarFileName() const {
  return "MavkaParser.g4";
}

const std::vector<std::string>& MavkaParser::getRuleNames() const {
  return mavkaparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& MavkaParser::getVocabulary() const {
  return mavkaparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MavkaParser::getSerializedATN() const {
  return mavkaparserParserStaticData->serializedATN;
}


//----------------- FileContext ------------------------------------------------------------------

MavkaParser::FileContext::FileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::FileContext::EOF() {
  return getToken(MavkaParser::EOF, 0);
}

MavkaParser::ProgramContext* MavkaParser::FileContext::program() {
  return getRuleContext<MavkaParser::ProgramContext>(0);
}


size_t MavkaParser::FileContext::getRuleIndex() const {
  return MavkaParser::RuleFile;
}

void MavkaParser::FileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile(this);
}

void MavkaParser::FileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile(this);
}


std::any MavkaParser::FileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFile(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::FileContext* MavkaParser::file() {
  FileContext *_localctx = _tracker.createInstance<FileContext>(_ctx, getState());
  enterRule(_localctx, 0, MavkaParser::RuleFile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(156);
    antlrcpp::downCast<FileContext *>(_localctx)->f_program = program();
    setState(157);
    match(MavkaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

MavkaParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Program_elementContext *> MavkaParser::ProgramContext::program_element() {
  return getRuleContexts<MavkaParser::Program_elementContext>();
}

MavkaParser::Program_elementContext* MavkaParser::ProgramContext::program_element(size_t i) {
  return getRuleContext<MavkaParser::Program_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::ProgramContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::ProgramContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::ProgramContext::getRuleIndex() const {
  return MavkaParser::RuleProgram;
}

void MavkaParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void MavkaParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}


std::any MavkaParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ProgramContext* MavkaParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 2, MavkaParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(159);
    program_element();
    setState(165);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::NL) {
      setState(160);
      nl();
      setState(161);
      program_element();
      setState(167);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Program_elementContext ------------------------------------------------------------------

MavkaParser::Program_elementContext::Program_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ModuleContext* MavkaParser::Program_elementContext::module() {
  return getRuleContext<MavkaParser::ModuleContext>(0);
}

MavkaParser::StructureContext* MavkaParser::Program_elementContext::structure() {
  return getRuleContext<MavkaParser::StructureContext>(0);
}

MavkaParser::MockupContext* MavkaParser::Program_elementContext::mockup() {
  return getRuleContext<MavkaParser::MockupContext>(0);
}

MavkaParser::DiiaContext* MavkaParser::Program_elementContext::diia() {
  return getRuleContext<MavkaParser::DiiaContext>(0);
}

MavkaParser::IfContext* MavkaParser::Program_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Program_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Program_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Program_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Program_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Program_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::EvalContext* MavkaParser::Program_elementContext::eval() {
  return getRuleContext<MavkaParser::EvalContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Program_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Program_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::TakeContext* MavkaParser::Program_elementContext::take() {
  return getRuleContext<MavkaParser::TakeContext>(0);
}

MavkaParser::GiveContext* MavkaParser::Program_elementContext::give() {
  return getRuleContext<MavkaParser::GiveContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Program_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Program_elementContext::getRuleIndex() const {
  return MavkaParser::RuleProgram_element;
}

void MavkaParser::Program_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram_element(this);
}

void MavkaParser::Program_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram_element(this);
}


std::any MavkaParser::Program_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitProgram_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Program_elementContext* MavkaParser::program_element() {
  Program_elementContext *_localctx = _tracker.createInstance<Program_elementContext>(_ctx, getState());
  enterRule(_localctx, 4, MavkaParser::RuleProgram_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(184);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(168);
      module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(169);
      structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(170);
      mockup();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(171);
      diia();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(172);
      if_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(173);
      each();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(174);
      while_();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(175);
      try_();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(176);
      expr();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(177);
      throw_();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(178);
      eval();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(179);
      wait_assign();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(180);
      assign();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(181);
      take();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(182);
      give();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(183);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleContext ------------------------------------------------------------------

MavkaParser::ModuleContext::ModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::ModuleContext::MODULE() {
  return getToken(MavkaParser::MODULE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::ModuleContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::ModuleContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

MavkaParser::NlsContext* MavkaParser::ModuleContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}

tree::TerminalNode* MavkaParser::ModuleContext::END() {
  return getToken(MavkaParser::END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::ModuleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Module_bodyContext* MavkaParser::ModuleContext::module_body() {
  return getRuleContext<MavkaParser::Module_bodyContext>(0);
}


size_t MavkaParser::ModuleContext::getRuleIndex() const {
  return MavkaParser::RuleModule;
}

void MavkaParser::ModuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule(this);
}

void MavkaParser::ModuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule(this);
}


std::any MavkaParser::ModuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ModuleContext* MavkaParser::module() {
  ModuleContext *_localctx = _tracker.createInstance<ModuleContext>(_ctx, getState());
  enterRule(_localctx, 6, MavkaParser::RuleModule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(186);
    match(MavkaParser::MODULE);
    setState(188);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(187);
      antlrcpp::downCast<ModuleContext *>(_localctx)->m_name = identifier();
    }
    setState(190);
    nl();
    setState(194);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      setState(191);
      antlrcpp::downCast<ModuleContext *>(_localctx)->m_body = module_body();
      setState(192);
      nl();
      break;
    }

    default:
      break;
    }
    setState(196);
    nls();
    setState(197);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_bodyContext ------------------------------------------------------------------

MavkaParser::Module_bodyContext::Module_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Module_body_elementContext *> MavkaParser::Module_bodyContext::module_body_element() {
  return getRuleContexts<MavkaParser::Module_body_elementContext>();
}

MavkaParser::Module_body_elementContext* MavkaParser::Module_bodyContext::module_body_element(size_t i) {
  return getRuleContext<MavkaParser::Module_body_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Module_bodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Module_bodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Module_bodyContext::getRuleIndex() const {
  return MavkaParser::RuleModule_body;
}

void MavkaParser::Module_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_body(this);
}

void MavkaParser::Module_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_body(this);
}


std::any MavkaParser::Module_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule_body(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Module_bodyContext* MavkaParser::module_body() {
  Module_bodyContext *_localctx = _tracker.createInstance<Module_bodyContext>(_ctx, getState());
  enterRule(_localctx, 8, MavkaParser::RuleModule_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(199);
    module_body_element();
    setState(205);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(200);
        nl();
        setState(201);
        module_body_element(); 
      }
      setState(207);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_body_elementContext ------------------------------------------------------------------

MavkaParser::Module_body_elementContext::Module_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ModuleContext* MavkaParser::Module_body_elementContext::module() {
  return getRuleContext<MavkaParser::ModuleContext>(0);
}

MavkaParser::StructureContext* MavkaParser::Module_body_elementContext::structure() {
  return getRuleContext<MavkaParser::StructureContext>(0);
}

MavkaParser::MockupContext* MavkaParser::Module_body_elementContext::mockup() {
  return getRuleContext<MavkaParser::MockupContext>(0);
}

MavkaParser::DiiaContext* MavkaParser::Module_body_elementContext::diia() {
  return getRuleContext<MavkaParser::DiiaContext>(0);
}

MavkaParser::IfContext* MavkaParser::Module_body_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Module_body_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Module_body_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Module_body_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Module_body_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Module_body_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::EvalContext* MavkaParser::Module_body_elementContext::eval() {
  return getRuleContext<MavkaParser::EvalContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Module_body_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Module_body_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::GiveContext* MavkaParser::Module_body_elementContext::give() {
  return getRuleContext<MavkaParser::GiveContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Module_body_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Module_body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleModule_body_element;
}

void MavkaParser::Module_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_body_element(this);
}

void MavkaParser::Module_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_body_element(this);
}


std::any MavkaParser::Module_body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule_body_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Module_body_elementContext* MavkaParser::module_body_element() {
  Module_body_elementContext *_localctx = _tracker.createInstance<Module_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 10, MavkaParser::RuleModule_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(223);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(208);
      module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(209);
      structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(210);
      mockup();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(211);
      diia();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(212);
      if_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(213);
      each();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(214);
      while_();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(215);
      try_();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(216);
      expr();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(217);
      throw_();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(218);
      eval();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(219);
      wait_assign();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(220);
      assign();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(221);
      give();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(222);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Method_declarationContext ------------------------------------------------------------------

MavkaParser::Method_declarationContext::Method_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Method_declarationContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::Method_declarationContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Method_declarationContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Method_declarationContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Method_declarationContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Method_declarationContext::ASYNC() {
  return getToken(MavkaParser::ASYNC, 0);
}

MavkaParser::Type_valueContext* MavkaParser::Method_declarationContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::Method_declarationContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}


size_t MavkaParser::Method_declarationContext::getRuleIndex() const {
  return MavkaParser::RuleMethod_declaration;
}

void MavkaParser::Method_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethod_declaration(this);
}

void MavkaParser::Method_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethod_declaration(this);
}


std::any MavkaParser::Method_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMethod_declaration(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Method_declarationContext* MavkaParser::method_declaration() {
  Method_declarationContext *_localctx = _tracker.createInstance<Method_declarationContext>(_ctx, getState());
  enterRule(_localctx, 12, MavkaParser::RuleMethod_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(226);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ASYNC) {
      setState(225);
      antlrcpp::downCast<Method_declarationContext *>(_localctx)->md_async = match(MavkaParser::ASYNC);
    }
    setState(228);
    antlrcpp::downCast<Method_declarationContext *>(_localctx)->md_name = identifier();
    setState(229);
    match(MavkaParser::OPEN_PAREN);

    setState(230);
    nls();
    setState(232);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 52) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 52)) & 140737488355649) != 0)) {
      setState(231);
      antlrcpp::downCast<Method_declarationContext *>(_localctx)->md_params = params();
    }
    setState(234);
    nls();
    setState(236);
    match(MavkaParser::CLOSE_PAREN);
    setState(238);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::OPEN_ARRAY

    || _la == MavkaParser::ID) {
      setState(237);
      antlrcpp::downCast<Method_declarationContext *>(_localctx)->md_type = type_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureContext ------------------------------------------------------------------

MavkaParser::StructureContext::StructureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::StructureContext::STRUCTURE() {
  return getToken(MavkaParser::STRUCTURE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::StructureContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::StructureContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

MavkaParser::NlsContext* MavkaParser::StructureContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}

tree::TerminalNode* MavkaParser::StructureContext::END() {
  return getToken(MavkaParser::END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::StructureContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::StructureContext::IS() {
  return getToken(MavkaParser::IS, 0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::StructureContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::Structure_elementsContext* MavkaParser::StructureContext::structure_elements() {
  return getRuleContext<MavkaParser::Structure_elementsContext>(0);
}


size_t MavkaParser::StructureContext::getRuleIndex() const {
  return MavkaParser::RuleStructure;
}

void MavkaParser::StructureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure(this);
}

void MavkaParser::StructureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure(this);
}


std::any MavkaParser::StructureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::StructureContext* MavkaParser::structure() {
  StructureContext *_localctx = _tracker.createInstance<StructureContext>(_ctx, getState());
  enterRule(_localctx, 14, MavkaParser::RuleStructure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(240);
    match(MavkaParser::STRUCTURE);
    setState(241);
    antlrcpp::downCast<StructureContext *>(_localctx)->s_name = identifier();
    setState(244);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::IS) {
      setState(242);
      match(MavkaParser::IS);
      setState(243);
      antlrcpp::downCast<StructureContext *>(_localctx)->s_parent = super_identifiers_chain(0);
    }
    setState(246);
    nl();
    setState(250);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      setState(247);
      antlrcpp::downCast<StructureContext *>(_localctx)->s_elements = structure_elements();
      setState(248);
      nl();
      break;
    }

    default:
      break;
    }
    setState(252);
    nls();
    setState(253);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_elementsContext ------------------------------------------------------------------

MavkaParser::Structure_elementsContext::Structure_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Structure_elementContext *> MavkaParser::Structure_elementsContext::structure_element() {
  return getRuleContexts<MavkaParser::Structure_elementContext>();
}

MavkaParser::Structure_elementContext* MavkaParser::Structure_elementsContext::structure_element(size_t i) {
  return getRuleContext<MavkaParser::Structure_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Structure_elementsContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Structure_elementsContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Structure_elementsContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_elements;
}

void MavkaParser::Structure_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_elements(this);
}

void MavkaParser::Structure_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_elements(this);
}


std::any MavkaParser::Structure_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_elements(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_elementsContext* MavkaParser::structure_elements() {
  Structure_elementsContext *_localctx = _tracker.createInstance<Structure_elementsContext>(_ctx, getState());
  enterRule(_localctx, 16, MavkaParser::RuleStructure_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(255);
    structure_element();
    setState(261);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(256);
        nl();
        setState(257);
        structure_element(); 
      }
      setState(263);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_elementContext ------------------------------------------------------------------

MavkaParser::Structure_elementContext::Structure_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Structure_paramContext* MavkaParser::Structure_elementContext::structure_param() {
  return getRuleContext<MavkaParser::Structure_paramContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Structure_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Structure_elementContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_element;
}

void MavkaParser::Structure_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_element(this);
}

void MavkaParser::Structure_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_element(this);
}


std::any MavkaParser::Structure_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_elementContext* MavkaParser::structure_element() {
  Structure_elementContext *_localctx = _tracker.createInstance<Structure_elementContext>(_ctx, getState());
  enterRule(_localctx, 18, MavkaParser::RuleStructure_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(266);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(264);
        structure_param();
        break;
      }

      case MavkaParser::NL: {
        enterOuterAlt(_localctx, 2);
        setState(265);
        nls();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_paramContext ------------------------------------------------------------------

MavkaParser::Structure_paramContext::Structure_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Structure_paramContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Structure_paramContext::ASSIGN() {
  return getToken(MavkaParser::ASSIGN, 0);
}

MavkaParser::Type_valueContext* MavkaParser::Structure_paramContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::Param_valueContext* MavkaParser::Structure_paramContext::param_value() {
  return getRuleContext<MavkaParser::Param_valueContext>(0);
}


size_t MavkaParser::Structure_paramContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_param;
}

void MavkaParser::Structure_paramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_param(this);
}

void MavkaParser::Structure_paramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_param(this);
}


std::any MavkaParser::Structure_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_param(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_paramContext* MavkaParser::structure_param() {
  Structure_paramContext *_localctx = _tracker.createInstance<Structure_paramContext>(_ctx, getState());
  enterRule(_localctx, 20, MavkaParser::RuleStructure_param);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(268);
    antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_name = identifier();
    setState(270);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::OPEN_ARRAY

    || _la == MavkaParser::ID) {
      setState(269);
      antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_type = type_value();
    }
    setState(274);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ASSIGN) {
      setState(272);
      match(MavkaParser::ASSIGN);
      setState(273);
      antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_value = param_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MockupContext ------------------------------------------------------------------

MavkaParser::MockupContext::MockupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Mockup_moduleContext* MavkaParser::MockupContext::mockup_module() {
  return getRuleContext<MavkaParser::Mockup_moduleContext>(0);
}

MavkaParser::Mockup_structureContext* MavkaParser::MockupContext::mockup_structure() {
  return getRuleContext<MavkaParser::Mockup_structureContext>(0);
}

MavkaParser::Mockup_diiaContext* MavkaParser::MockupContext::mockup_diia() {
  return getRuleContext<MavkaParser::Mockup_diiaContext>(0);
}

MavkaParser::Mockup_subjectContext* MavkaParser::MockupContext::mockup_subject() {
  return getRuleContext<MavkaParser::Mockup_subjectContext>(0);
}

MavkaParser::Mockup_objectContext* MavkaParser::MockupContext::mockup_object() {
  return getRuleContext<MavkaParser::Mockup_objectContext>(0);
}


size_t MavkaParser::MockupContext::getRuleIndex() const {
  return MavkaParser::RuleMockup;
}

void MavkaParser::MockupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup(this);
}

void MavkaParser::MockupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup(this);
}


std::any MavkaParser::MockupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::MockupContext* MavkaParser::mockup() {
  MockupContext *_localctx = _tracker.createInstance<MockupContext>(_ctx, getState());
  enterRule(_localctx, 22, MavkaParser::RuleMockup);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(281);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(276);
      mockup_module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(277);
      mockup_structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(278);
      mockup_diia();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(279);
      mockup_subject();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(280);
      mockup_object();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_moduleContext ------------------------------------------------------------------

MavkaParser::Mockup_moduleContext::Mockup_moduleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::MOCKUP() {
  return getToken(MavkaParser::MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::MODULE() {
  return getToken(MavkaParser::MODULE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_moduleContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_moduleContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mockup_moduleContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mockup_moduleContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::END() {
  return getToken(MavkaParser::END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_moduleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Mockup_bodyContext* MavkaParser::Mockup_moduleContext::mockup_body() {
  return getRuleContext<MavkaParser::Mockup_bodyContext>(0);
}


size_t MavkaParser::Mockup_moduleContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_module;
}

void MavkaParser::Mockup_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_module(this);
}

void MavkaParser::Mockup_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_module(this);
}


std::any MavkaParser::Mockup_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_module(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_moduleContext* MavkaParser::mockup_module() {
  Mockup_moduleContext *_localctx = _tracker.createInstance<Mockup_moduleContext>(_ctx, getState());
  enterRule(_localctx, 24, MavkaParser::RuleMockup_module);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(283);
    match(MavkaParser::MOCKUP);
    setState(284);
    match(MavkaParser::MODULE);
    setState(285);
    antlrcpp::downCast<Mockup_moduleContext *>(_localctx)->mm_name = identifier();
    setState(286);
    nl();
    setState(287);
    nls();
    setState(291);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      setState(288);
      antlrcpp::downCast<Mockup_moduleContext *>(_localctx)->mm_elements = mockup_body();
      setState(289);
      nl();
      break;
    }

    default:
      break;
    }
    setState(293);
    nls();
    setState(294);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_structureContext ------------------------------------------------------------------

MavkaParser::Mockup_structureContext::Mockup_structureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::MOCKUP() {
  return getToken(MavkaParser::MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::STRUCTURE() {
  return getToken(MavkaParser::STRUCTURE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_structureContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_structureContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mockup_structureContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mockup_structureContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::END() {
  return getToken(MavkaParser::END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_structureContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Mockup_bodyContext* MavkaParser::Mockup_structureContext::mockup_body() {
  return getRuleContext<MavkaParser::Mockup_bodyContext>(0);
}


size_t MavkaParser::Mockup_structureContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_structure;
}

void MavkaParser::Mockup_structureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_structure(this);
}

void MavkaParser::Mockup_structureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_structure(this);
}


std::any MavkaParser::Mockup_structureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_structure(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_structureContext* MavkaParser::mockup_structure() {
  Mockup_structureContext *_localctx = _tracker.createInstance<Mockup_structureContext>(_ctx, getState());
  enterRule(_localctx, 26, MavkaParser::RuleMockup_structure);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(296);
    match(MavkaParser::MOCKUP);
    setState(297);
    match(MavkaParser::STRUCTURE);
    setState(298);
    antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_name = identifier();
    setState(299);
    nl();
    setState(300);
    nls();
    setState(304);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      setState(301);
      antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_elements = mockup_body();
      setState(302);
      nl();
      break;
    }

    default:
      break;
    }
    setState(306);
    nls();
    setState(307);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_diiaContext ------------------------------------------------------------------

MavkaParser::Mockup_diiaContext::Mockup_diiaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::MOCKUP() {
  return getToken(MavkaParser::MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::DIIA() {
  return getToken(MavkaParser::DIIA, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_diiaContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mockup_diiaContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mockup_diiaContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::ASYNC() {
  return getToken(MavkaParser::ASYNC, 0);
}

MavkaParser::Type_valueContext* MavkaParser::Mockup_diiaContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::Mockup_diiaContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}


size_t MavkaParser::Mockup_diiaContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_diia;
}

void MavkaParser::Mockup_diiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_diia(this);
}

void MavkaParser::Mockup_diiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_diia(this);
}


std::any MavkaParser::Mockup_diiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_diia(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_diiaContext* MavkaParser::mockup_diia() {
  Mockup_diiaContext *_localctx = _tracker.createInstance<Mockup_diiaContext>(_ctx, getState());
  enterRule(_localctx, 28, MavkaParser::RuleMockup_diia);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(309);
    match(MavkaParser::MOCKUP);
    setState(311);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ASYNC) {
      setState(310);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_async = match(MavkaParser::ASYNC);
    }
    setState(313);
    match(MavkaParser::DIIA);
    setState(314);
    antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_name = identifier();
    setState(315);
    match(MavkaParser::OPEN_PAREN);

    setState(316);
    nls();
    setState(318);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 52) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 52)) & 140737488355649) != 0)) {
      setState(317);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_params = params();
    }
    setState(320);
    nls();
    setState(322);
    match(MavkaParser::CLOSE_PAREN);
    setState(324);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::OPEN_ARRAY

    || _la == MavkaParser::ID) {
      setState(323);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_type = type_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_subjectContext ------------------------------------------------------------------

MavkaParser::Mockup_subjectContext::Mockup_subjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_subjectContext::MOCKUP() {
  return getToken(MavkaParser::MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_subjectContext::SUBJECT() {
  return getToken(MavkaParser::SUBJECT, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_subjectContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::Mockup_subjectContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::Mockup_subjectContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_subject;
}

void MavkaParser::Mockup_subjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_subject(this);
}

void MavkaParser::Mockup_subjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_subject(this);
}


std::any MavkaParser::Mockup_subjectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_subject(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_subjectContext* MavkaParser::mockup_subject() {
  Mockup_subjectContext *_localctx = _tracker.createInstance<Mockup_subjectContext>(_ctx, getState());
  enterRule(_localctx, 30, MavkaParser::RuleMockup_subject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(326);
    match(MavkaParser::MOCKUP);
    setState(327);
    match(MavkaParser::SUBJECT);
    setState(328);
    antlrcpp::downCast<Mockup_subjectContext *>(_localctx)->ms_name = identifier();
    setState(329);
    antlrcpp::downCast<Mockup_subjectContext *>(_localctx)->ms_type = type_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_objectContext ------------------------------------------------------------------

MavkaParser::Mockup_objectContext::Mockup_objectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_objectContext::MOCKUP() {
  return getToken(MavkaParser::MOCKUP, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_objectContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_objectContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mockup_objectContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mockup_objectContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_objectContext::END() {
  return getToken(MavkaParser::END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_objectContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Mockup_bodyContext* MavkaParser::Mockup_objectContext::mockup_body() {
  return getRuleContext<MavkaParser::Mockup_bodyContext>(0);
}


size_t MavkaParser::Mockup_objectContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_object;
}

void MavkaParser::Mockup_objectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_object(this);
}

void MavkaParser::Mockup_objectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_object(this);
}


std::any MavkaParser::Mockup_objectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_object(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_objectContext* MavkaParser::mockup_object() {
  Mockup_objectContext *_localctx = _tracker.createInstance<Mockup_objectContext>(_ctx, getState());
  enterRule(_localctx, 32, MavkaParser::RuleMockup_object);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(331);
    match(MavkaParser::MOCKUP);
    setState(332);
    antlrcpp::downCast<Mockup_objectContext *>(_localctx)->mo_name = identifier();
    setState(333);
    nl();
    setState(334);
    nls();
    setState(338);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      setState(335);
      antlrcpp::downCast<Mockup_objectContext *>(_localctx)->mo_elements = mockup_body();
      setState(336);
      nl();
      break;
    }

    default:
      break;
    }
    setState(340);
    nls();
    setState(341);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_bodyContext ------------------------------------------------------------------

MavkaParser::Mockup_bodyContext::Mockup_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Mockup_body_elementContext *> MavkaParser::Mockup_bodyContext::mockup_body_element() {
  return getRuleContexts<MavkaParser::Mockup_body_elementContext>();
}

MavkaParser::Mockup_body_elementContext* MavkaParser::Mockup_bodyContext::mockup_body_element(size_t i) {
  return getRuleContext<MavkaParser::Mockup_body_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_bodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_bodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Mockup_bodyContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_body;
}

void MavkaParser::Mockup_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_body(this);
}

void MavkaParser::Mockup_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_body(this);
}


std::any MavkaParser::Mockup_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_body(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_bodyContext* MavkaParser::mockup_body() {
  Mockup_bodyContext *_localctx = _tracker.createInstance<Mockup_bodyContext>(_ctx, getState());
  enterRule(_localctx, 34, MavkaParser::RuleMockup_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(343);
    mockup_body_element();
    setState(349);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(344);
        nl();
        setState(345);
        mockup_body_element(); 
      }
      setState(351);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_body_elementContext ------------------------------------------------------------------

MavkaParser::Mockup_body_elementContext::Mockup_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Structure_paramContext* MavkaParser::Mockup_body_elementContext::structure_param() {
  return getRuleContext<MavkaParser::Structure_paramContext>(0);
}

MavkaParser::Method_declarationContext* MavkaParser::Mockup_body_elementContext::method_declaration() {
  return getRuleContext<MavkaParser::Method_declarationContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Mockup_body_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Mockup_body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_body_element;
}

void MavkaParser::Mockup_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_body_element(this);
}

void MavkaParser::Mockup_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_body_element(this);
}


std::any MavkaParser::Mockup_body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_body_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_body_elementContext* MavkaParser::mockup_body_element() {
  Mockup_body_elementContext *_localctx = _tracker.createInstance<Mockup_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 36, MavkaParser::RuleMockup_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(355);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(352);
      structure_param();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(353);
      method_declaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(354);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiiaContext ------------------------------------------------------------------

MavkaParser::DiiaContext::DiiaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::DiiaContext::DIIA() {
  return getToken(MavkaParser::DIIA, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::DiiaContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::DiiaContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::DiiaContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::DiiaContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::DiiaContext::END() {
  return getToken(MavkaParser::END, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::DiiaContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::DiiaContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

tree::TerminalNode* MavkaParser::DiiaContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::ASYNC() {
  return getToken(MavkaParser::ASYNC, 0);
}

MavkaParser::Type_valueContext* MavkaParser::DiiaContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::BodyContext* MavkaParser::DiiaContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::DiiaContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}


size_t MavkaParser::DiiaContext::getRuleIndex() const {
  return MavkaParser::RuleDiia;
}

void MavkaParser::DiiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiia(this);
}

void MavkaParser::DiiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiia(this);
}


std::any MavkaParser::DiiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDiia(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::DiiaContext* MavkaParser::diia() {
  DiiaContext *_localctx = _tracker.createInstance<DiiaContext>(_ctx, getState());
  enterRule(_localctx, 38, MavkaParser::RuleDiia);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(358);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ASYNC) {
      setState(357);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_async = match(MavkaParser::ASYNC);
    }
    setState(360);
    match(MavkaParser::DIIA);
    setState(364);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      setState(361);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_structure = identifier();
      setState(362);
      match(MavkaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(366);
    antlrcpp::downCast<DiiaContext *>(_localctx)->d_name = identifier();
    setState(367);
    match(MavkaParser::OPEN_PAREN);

    setState(368);
    nls();
    setState(370);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 52) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 52)) & 140737488355649) != 0)) {
      setState(369);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_params = params();
    }
    setState(372);
    nls();
    setState(374);
    match(MavkaParser::CLOSE_PAREN);
    setState(376);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::OPEN_ARRAY

    || _la == MavkaParser::ID) {
      setState(375);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_type = type_value();
    }
    setState(378);
    nl();
    setState(382);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      setState(379);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_body = body();
      setState(380);
      nl();
      break;
    }

    default:
      break;
    }
    setState(384);
    nls();
    setState(385);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfContext ------------------------------------------------------------------

MavkaParser::IfContext::IfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::IfContext::IF() {
  return getToken(MavkaParser::IF, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::IfContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::IfContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

MavkaParser::ExprContext* MavkaParser::IfContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

std::vector<MavkaParser::BodyContext *> MavkaParser::IfContext::body() {
  return getRuleContexts<MavkaParser::BodyContext>();
}

MavkaParser::BodyContext* MavkaParser::IfContext::body(size_t i) {
  return getRuleContext<MavkaParser::BodyContext>(i);
}

tree::TerminalNode* MavkaParser::IfContext::END() {
  return getToken(MavkaParser::END, 0);
}

tree::TerminalNode* MavkaParser::IfContext::ELSE() {
  return getToken(MavkaParser::ELSE, 0);
}

MavkaParser::IfContext* MavkaParser::IfContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}


size_t MavkaParser::IfContext::getRuleIndex() const {
  return MavkaParser::RuleIf;
}

void MavkaParser::IfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf(this);
}

void MavkaParser::IfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf(this);
}


std::any MavkaParser::IfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIf(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::IfContext* MavkaParser::if_() {
  IfContext *_localctx = _tracker.createInstance<IfContext>(_ctx, getState());
  enterRule(_localctx, 40, MavkaParser::RuleIf);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(387);
    match(MavkaParser::IF);
    setState(388);
    antlrcpp::downCast<IfContext *>(_localctx)->i_value = expr();
    setState(389);
    nl();
    setState(393);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1693634935714224148) != 0) || ((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 806879427) != 0)) {
      setState(390);
      antlrcpp::downCast<IfContext *>(_localctx)->i_body = body();
      setState(391);
      nl();
    }
    setState(404);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      setState(399);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::ELSE) {
        setState(395);
        match(MavkaParser::ELSE);
        setState(396);
        antlrcpp::downCast<IfContext *>(_localctx)->i_else_body = body();
        setState(397);
        nl();
      }
      setState(401);
      match(MavkaParser::END);
      break;
    }

    case 2: {
      setState(402);
      match(MavkaParser::ELSE);
      setState(403);
      antlrcpp::downCast<IfContext *>(_localctx)->i_else_if = if_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EachContext ------------------------------------------------------------------

MavkaParser::EachContext::EachContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::EachContext::FOR() {
  return getToken(MavkaParser::FOR, 0);
}

tree::TerminalNode* MavkaParser::EachContext::AS() {
  return getToken(MavkaParser::AS, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::EachContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::EachContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::EachContext::END() {
  return getToken(MavkaParser::END, 0);
}

MavkaParser::ExprContext* MavkaParser::EachContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::FromtoContext* MavkaParser::EachContext::fromto() {
  return getRuleContext<MavkaParser::FromtoContext>(0);
}

tree::TerminalNode* MavkaParser::EachContext::COMMA() {
  return getToken(MavkaParser::COMMA, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::EachContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::EachContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

MavkaParser::BodyContext* MavkaParser::EachContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}


size_t MavkaParser::EachContext::getRuleIndex() const {
  return MavkaParser::RuleEach;
}

void MavkaParser::EachContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEach(this);
}

void MavkaParser::EachContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEach(this);
}


std::any MavkaParser::EachContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitEach(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::EachContext* MavkaParser::each() {
  EachContext *_localctx = _tracker.createInstance<EachContext>(_ctx, getState());
  enterRule(_localctx, 42, MavkaParser::RuleEach);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(406);
    match(MavkaParser::FOR);
    setState(409);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(407);
      antlrcpp::downCast<EachContext *>(_localctx)->e_iterator = expr();
      break;
    }

    case 2: {
      setState(408);
      antlrcpp::downCast<EachContext *>(_localctx)->e_fromto = fromto();
      break;
    }

    default:
      break;
    }
    setState(411);
    match(MavkaParser::AS);
    setState(415);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(412);
      antlrcpp::downCast<EachContext *>(_localctx)->e_key_name = identifier();
      setState(413);
      match(MavkaParser::COMMA);
      break;
    }

    default:
      break;
    }
    setState(418);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(417);
      antlrcpp::downCast<EachContext *>(_localctx)->e_name = identifier();
    }
    setState(420);
    nl();
    setState(424);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1693634935714224148) != 0) || ((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 806879427) != 0)) {
      setState(421);
      antlrcpp::downCast<EachContext *>(_localctx)->e_body = body();
      setState(422);
      nl();
    }
    setState(426);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromtoContext ------------------------------------------------------------------

MavkaParser::FromtoContext::FromtoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Fromto_simpleContext* MavkaParser::FromtoContext::fromto_simple() {
  return getRuleContext<MavkaParser::Fromto_simpleContext>(0);
}

MavkaParser::Fromto_complexContext* MavkaParser::FromtoContext::fromto_complex() {
  return getRuleContext<MavkaParser::Fromto_complexContext>(0);
}


size_t MavkaParser::FromtoContext::getRuleIndex() const {
  return MavkaParser::RuleFromto;
}

void MavkaParser::FromtoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto(this);
}

void MavkaParser::FromtoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto(this);
}


std::any MavkaParser::FromtoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::FromtoContext* MavkaParser::fromto() {
  FromtoContext *_localctx = _tracker.createInstance<FromtoContext>(_ctx, getState());
  enterRule(_localctx, 44, MavkaParser::RuleFromto);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(430);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(428);
      fromto_simple();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(429);
      fromto_complex();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_simpleContext ------------------------------------------------------------------

MavkaParser::Fromto_simpleContext::Fromto_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Fromto_simpleContext::FROMTO() {
  return getToken(MavkaParser::FROMTO, 0);
}

std::vector<MavkaParser::Fromto_valueContext *> MavkaParser::Fromto_simpleContext::fromto_value() {
  return getRuleContexts<MavkaParser::Fromto_valueContext>();
}

MavkaParser::Fromto_valueContext* MavkaParser::Fromto_simpleContext::fromto_value(size_t i) {
  return getRuleContext<MavkaParser::Fromto_valueContext>(i);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::Fromto_simpleContext::fromto_to_symbol() {
  return getRuleContext<MavkaParser::Fromto_to_symbolContext>(0);
}


size_t MavkaParser::Fromto_simpleContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_simple;
}

void MavkaParser::Fromto_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_simple(this);
}

void MavkaParser::Fromto_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_simple(this);
}


std::any MavkaParser::Fromto_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_simple(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_simpleContext* MavkaParser::fromto_simple() {
  Fromto_simpleContext *_localctx = _tracker.createInstance<Fromto_simpleContext>(_ctx, getState());
  enterRule(_localctx, 46, MavkaParser::RuleFromto_simple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(432);
    antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_from = fromto_value();
    setState(433);
    match(MavkaParser::FROMTO);
    setState(435);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2016) != 0)) {
      setState(434);
      antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_to_symbol = fromto_to_symbol();
    }
    setState(437);
    antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_to = fromto_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_complexContext ------------------------------------------------------------------

MavkaParser::Fromto_complexContext::Fromto_complexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_complexContext::FROMTO() {
  return getTokens(MavkaParser::FROMTO);
}

tree::TerminalNode* MavkaParser::Fromto_complexContext::FROMTO(size_t i) {
  return getToken(MavkaParser::FROMTO, i);
}

std::vector<MavkaParser::Fromto_valueContext *> MavkaParser::Fromto_complexContext::fromto_value() {
  return getRuleContexts<MavkaParser::Fromto_valueContext>();
}

MavkaParser::Fromto_valueContext* MavkaParser::Fromto_complexContext::fromto_value(size_t i) {
  return getRuleContext<MavkaParser::Fromto_valueContext>(i);
}

MavkaParser::Fromto_middle_symbolContext* MavkaParser::Fromto_complexContext::fromto_middle_symbol() {
  return getRuleContext<MavkaParser::Fromto_middle_symbolContext>(0);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::Fromto_complexContext::fromto_to_symbol() {
  return getRuleContext<MavkaParser::Fromto_to_symbolContext>(0);
}


size_t MavkaParser::Fromto_complexContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_complex;
}

void MavkaParser::Fromto_complexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_complex(this);
}

void MavkaParser::Fromto_complexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_complex(this);
}


std::any MavkaParser::Fromto_complexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_complex(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_complexContext* MavkaParser::fromto_complex() {
  Fromto_complexContext *_localctx = _tracker.createInstance<Fromto_complexContext>(_ctx, getState());
  enterRule(_localctx, 48, MavkaParser::RuleFromto_complex);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(439);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_from = fromto_value();
    setState(440);
    match(MavkaParser::FROMTO);
    setState(442);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 1807) != 0)) {
      setState(441);
      antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_middle_symbol = fromto_middle_symbol();
    }
    setState(444);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_middle = fromto_value();
    setState(445);
    match(MavkaParser::FROMTO);
    setState(447);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2016) != 0)) {
      setState(446);
      antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_to_symbol = fromto_to_symbol();
    }
    setState(449);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_to = fromto_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_valueContext ------------------------------------------------------------------

MavkaParser::Fromto_valueContext::Fromto_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::Fromto_valueContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_value;
}

void MavkaParser::Fromto_valueContext::copyFrom(Fromto_valueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Fromto_idContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::Fromto_idContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Fromto_idContext::Fromto_idContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_idContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_id(this);
}
void MavkaParser::Fromto_idContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_id(this);
}

std::any MavkaParser::Fromto_idContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_id(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Fromto_stringContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Fromto_stringContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

MavkaParser::Fromto_stringContext::Fromto_stringContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_string(this);
}
void MavkaParser::Fromto_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_string(this);
}

std::any MavkaParser::Fromto_stringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_string(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Fromto_numberContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Fromto_numberContext::NUMBER() {
  return getToken(MavkaParser::NUMBER, 0);
}

MavkaParser::Fromto_numberContext::Fromto_numberContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_numberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_number(this);
}
void MavkaParser::Fromto_numberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_number(this);
}

std::any MavkaParser::Fromto_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_number(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Fromto_nestedContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Fromto_nestedContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::Fromto_nestedContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::ValueContext* MavkaParser::Fromto_nestedContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::Fromto_nestedContext::Fromto_nestedContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_nestedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_nested(this);
}
void MavkaParser::Fromto_nestedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_nested(this);
}

std::any MavkaParser::Fromto_nestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_nested(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::Fromto_valueContext* MavkaParser::fromto_value() {
  Fromto_valueContext *_localctx = _tracker.createInstance<Fromto_valueContext>(_ctx, getState());
  enterRule(_localctx, 50, MavkaParser::RuleFromto_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(458);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::NUMBER: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_numberContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(451);
        match(MavkaParser::NUMBER);
        break;
      }

      case MavkaParser::STRING: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_stringContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(452);
        match(MavkaParser::STRING);
        break;
      }

      case MavkaParser::ID: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_idContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(453);
        identifier();
        break;
      }

      case MavkaParser::OPEN_PAREN: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_nestedContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(454);
        match(MavkaParser::OPEN_PAREN);
        setState(455);
        antlrcpp::downCast<Fromto_nestedContext *>(_localctx)->fn_value = value(0);
        setState(456);
        match(MavkaParser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_middle_symbolContext ------------------------------------------------------------------

MavkaParser::Fromto_middle_symbolContext::Fromto_middle_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::MUL() {
  return getToken(MavkaParser::MUL, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::DIV() {
  return getToken(MavkaParser::DIV, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::PERCENT() {
  return getToken(MavkaParser::PERCENT, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::DIVDIV() {
  return getToken(MavkaParser::DIVDIV, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::POW() {
  return getToken(MavkaParser::POW, 0);
}


size_t MavkaParser::Fromto_middle_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_middle_symbol;
}

void MavkaParser::Fromto_middle_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_middle_symbol(this);
}

void MavkaParser::Fromto_middle_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_middle_symbol(this);
}


std::any MavkaParser::Fromto_middle_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_middle_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_middle_symbolContext* MavkaParser::fromto_middle_symbol() {
  Fromto_middle_symbolContext *_localctx = _tracker.createInstance<Fromto_middle_symbolContext>(_ctx, getState());
  enterRule(_localctx, 52, MavkaParser::RuleFromto_middle_symbol);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(460);
    _la = _input->LA(1);
    if (!(((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 1807) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_to_symbolContext ------------------------------------------------------------------

MavkaParser::Fromto_to_symbolContext::Fromto_to_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::NOT_EQ() {
  return getToken(MavkaParser::NOT_EQ, 0);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::EQ() {
  return getToken(MavkaParser::EQ, 0);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::SMALLER() {
  return getToken(MavkaParser::SMALLER, 0);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::GREATER_EQ() {
  return getToken(MavkaParser::GREATER_EQ, 0);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::SMALLER_EQ() {
  return getToken(MavkaParser::SMALLER_EQ, 0);
}


size_t MavkaParser::Fromto_to_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_to_symbol;
}

void MavkaParser::Fromto_to_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_to_symbol(this);
}

void MavkaParser::Fromto_to_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_to_symbol(this);
}


std::any MavkaParser::Fromto_to_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_to_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::fromto_to_symbol() {
  Fromto_to_symbolContext *_localctx = _tracker.createInstance<Fromto_to_symbolContext>(_ctx, getState());
  enterRule(_localctx, 54, MavkaParser::RuleFromto_to_symbol);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(462);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2016) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileContext ------------------------------------------------------------------

MavkaParser::WhileContext::WhileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::WhileContext::WHILE() {
  return getToken(MavkaParser::WHILE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::WhileContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::WhileContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::WhileContext::END() {
  return getToken(MavkaParser::END, 0);
}

MavkaParser::ExprContext* MavkaParser::WhileContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::BodyContext* MavkaParser::WhileContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}


size_t MavkaParser::WhileContext::getRuleIndex() const {
  return MavkaParser::RuleWhile;
}

void MavkaParser::WhileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhile(this);
}

void MavkaParser::WhileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhile(this);
}


std::any MavkaParser::WhileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWhile(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::WhileContext* MavkaParser::while_() {
  WhileContext *_localctx = _tracker.createInstance<WhileContext>(_ctx, getState());
  enterRule(_localctx, 56, MavkaParser::RuleWhile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(464);
    match(MavkaParser::WHILE);
    setState(465);
    antlrcpp::downCast<WhileContext *>(_localctx)->w_value = expr();
    setState(466);
    nl();
    setState(470);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1693634935714224148) != 0) || ((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 806879427) != 0)) {
      setState(467);
      antlrcpp::downCast<WhileContext *>(_localctx)->w_body = body();
      setState(468);
      nl();
    }
    setState(472);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryContext ------------------------------------------------------------------

MavkaParser::TryContext::TryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::TryContext::TRY() {
  return getToken(MavkaParser::TRY, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::TryContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::TryContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::TryContext::CATCH() {
  return getToken(MavkaParser::CATCH, 0);
}

tree::TerminalNode* MavkaParser::TryContext::END() {
  return getToken(MavkaParser::END, 0);
}

std::vector<MavkaParser::BodyContext *> MavkaParser::TryContext::body() {
  return getRuleContexts<MavkaParser::BodyContext>();
}

MavkaParser::BodyContext* MavkaParser::TryContext::body(size_t i) {
  return getRuleContext<MavkaParser::BodyContext>(i);
}

MavkaParser::IdentifierContext* MavkaParser::TryContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}


size_t MavkaParser::TryContext::getRuleIndex() const {
  return MavkaParser::RuleTry;
}

void MavkaParser::TryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry(this);
}

void MavkaParser::TryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry(this);
}


std::any MavkaParser::TryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTry(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::TryContext* MavkaParser::try_() {
  TryContext *_localctx = _tracker.createInstance<TryContext>(_ctx, getState());
  enterRule(_localctx, 58, MavkaParser::RuleTry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(474);
    match(MavkaParser::TRY);
    setState(475);
    nl();
    setState(476);
    antlrcpp::downCast<TryContext *>(_localctx)->t_body = body();
    setState(477);
    nl();
    setState(478);
    match(MavkaParser::CATCH);
    setState(480);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      setState(479);
      antlrcpp::downCast<TryContext *>(_localctx)->tc_name = identifier();
      break;
    }

    default:
      break;
    }
    setState(485);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1693634935714224148) != 0) || ((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 806879427) != 0)) {
      setState(482);
      antlrcpp::downCast<TryContext *>(_localctx)->tc_body = body();
      setState(483);
      nl();
    }
    setState(487);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvalContext ------------------------------------------------------------------

MavkaParser::EvalContext::EvalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::EvalContext::EVAL() {
  return getToken(MavkaParser::EVAL, 0);
}

MavkaParser::ValueContext* MavkaParser::EvalContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}


size_t MavkaParser::EvalContext::getRuleIndex() const {
  return MavkaParser::RuleEval;
}

void MavkaParser::EvalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEval(this);
}

void MavkaParser::EvalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEval(this);
}


std::any MavkaParser::EvalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitEval(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::EvalContext* MavkaParser::eval() {
  EvalContext *_localctx = _tracker.createInstance<EvalContext>(_ctx, getState());
  enterRule(_localctx, 60, MavkaParser::RuleEval);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(489);
    match(MavkaParser::EVAL);
    setState(490);
    antlrcpp::downCast<EvalContext *>(_localctx)->e_value = value(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TakeContext ------------------------------------------------------------------

MavkaParser::TakeContext::TakeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::TakeContext::getRuleIndex() const {
  return MavkaParser::RuleTake;
}

void MavkaParser::TakeContext::copyFrom(TakeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Take_moduleContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Take_moduleContext::TAKE() {
  return getToken(MavkaParser::TAKE, 0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::Take_moduleContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}

tree::TerminalNode* MavkaParser::Take_moduleContext::AS() {
  return getToken(MavkaParser::AS, 0);
}

tree::TerminalNode* MavkaParser::Take_moduleContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Take_moduleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Take_moduleContext::Take_moduleContext(TakeContext *ctx) { copyFrom(ctx); }

void MavkaParser::Take_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_module(this);
}
void MavkaParser::Take_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_module(this);
}

std::any MavkaParser::Take_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_module(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Take_fileContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Take_fileContext::TAKE_FILE() {
  return getToken(MavkaParser::TAKE_FILE, 0);
}

tree::TerminalNode* MavkaParser::Take_fileContext::AS() {
  return getToken(MavkaParser::AS, 0);
}

tree::TerminalNode* MavkaParser::Take_fileContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Take_fileContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Take_fileContext::Take_fileContext(TakeContext *ctx) { copyFrom(ctx); }

void MavkaParser::Take_fileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_file(this);
}
void MavkaParser::Take_fileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_file(this);
}

std::any MavkaParser::Take_fileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_file(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Take_remoteContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Take_remoteContext::TAKE() {
  return getToken(MavkaParser::TAKE, 0);
}

tree::TerminalNode* MavkaParser::Take_remoteContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

tree::TerminalNode* MavkaParser::Take_remoteContext::AS() {
  return getToken(MavkaParser::AS, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Take_remoteContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Take_remoteContext::Take_remoteContext(TakeContext *ctx) { copyFrom(ctx); }

void MavkaParser::Take_remoteContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_remote(this);
}
void MavkaParser::Take_remoteContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_remote(this);
}

std::any MavkaParser::Take_remoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_remote(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::TakeContext* MavkaParser::take() {
  TakeContext *_localctx = _tracker.createInstance<TakeContext>(_ctx, getState());
  enterRule(_localctx, 62, MavkaParser::RuleTake);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(511);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<MavkaParser::Take_moduleContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(492);
      match(MavkaParser::TAKE);
      setState(494);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::DOT) {
        setState(493);
        antlrcpp::downCast<Take_moduleContext *>(_localctx)->tm_relative = match(MavkaParser::DOT);
      }
      setState(496);
      antlrcpp::downCast<Take_moduleContext *>(_localctx)->tm_elements_chain = identifiers_chain(0);
      setState(499);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::AS) {
        setState(497);
        match(MavkaParser::AS);
        setState(498);
        antlrcpp::downCast<Take_moduleContext *>(_localctx)->tm_as = identifier();
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<MavkaParser::Take_fileContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(501);
      match(MavkaParser::TAKE_FILE);
      setState(502);
      antlrcpp::downCast<Take_fileContext *>(_localctx)->tf_name = match(MavkaParser::STRING);
      setState(503);
      match(MavkaParser::AS);
      setState(504);
      antlrcpp::downCast<Take_fileContext *>(_localctx)->tf_as = identifier();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<MavkaParser::Take_remoteContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(505);
      match(MavkaParser::TAKE);
      setState(506);
      antlrcpp::downCast<Take_remoteContext *>(_localctx)->tr_url = match(MavkaParser::STRING);
      setState(509);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::AS) {
        setState(507);
        match(MavkaParser::AS);
        setState(508);
        antlrcpp::downCast<Take_remoteContext *>(_localctx)->tr_as = identifier();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GiveContext ------------------------------------------------------------------

MavkaParser::GiveContext::GiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::GiveContext::GIVE() {
  return getToken(MavkaParser::GIVE, 0);
}

std::vector<MavkaParser::Give_elementContext *> MavkaParser::GiveContext::give_element() {
  return getRuleContexts<MavkaParser::Give_elementContext>();
}

MavkaParser::Give_elementContext* MavkaParser::GiveContext::give_element(size_t i) {
  return getRuleContext<MavkaParser::Give_elementContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::GiveContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::GiveContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::GiveContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::GiveContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::GiveContext::getRuleIndex() const {
  return MavkaParser::RuleGive;
}

void MavkaParser::GiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGive(this);
}

void MavkaParser::GiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGive(this);
}


std::any MavkaParser::GiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGive(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::GiveContext* MavkaParser::give() {
  GiveContext *_localctx = _tracker.createInstance<GiveContext>(_ctx, getState());
  enterRule(_localctx, 64, MavkaParser::RuleGive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(513);
    match(MavkaParser::GIVE);
    setState(514);
    give_element();
    setState(522);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(515);
        nls();
        setState(516);
        match(MavkaParser::COMMA);
        setState(517);
        nls();
        setState(518);
        give_element(); 
      }
      setState(524);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Give_elementContext ------------------------------------------------------------------

MavkaParser::Give_elementContext::Give_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::Give_elementContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::Give_elementContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

tree::TerminalNode* MavkaParser::Give_elementContext::AS() {
  return getToken(MavkaParser::AS, 0);
}


size_t MavkaParser::Give_elementContext::getRuleIndex() const {
  return MavkaParser::RuleGive_element;
}

void MavkaParser::Give_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGive_element(this);
}

void MavkaParser::Give_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGive_element(this);
}


std::any MavkaParser::Give_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGive_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Give_elementContext* MavkaParser::give_element() {
  Give_elementContext *_localctx = _tracker.createInstance<Give_elementContext>(_ctx, getState());
  enterRule(_localctx, 66, MavkaParser::RuleGive_element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(525);
    antlrcpp::downCast<Give_elementContext *>(_localctx)->ge_name = identifier();
    setState(528);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::AS) {
      setState(526);
      match(MavkaParser::AS);
      setState(527);
      antlrcpp::downCast<Give_elementContext *>(_localctx)->ge_as = identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

MavkaParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::StringContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

tree::TerminalNode* MavkaParser::StringContext::STRING_MULTILINE() {
  return getToken(MavkaParser::STRING_MULTILINE, 0);
}


size_t MavkaParser::StringContext::getRuleIndex() const {
  return MavkaParser::RuleString;
}

void MavkaParser::StringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString(this);
}

void MavkaParser::StringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString(this);
}


std::any MavkaParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::StringContext* MavkaParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 68, MavkaParser::RuleString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(530);
    _la = _input->LA(1);
    if (!(_la == MavkaParser::STRING_MULTILINE

    || _la == MavkaParser::STRING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueContext ------------------------------------------------------------------

MavkaParser::ValueContext::ValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::ValueContext::getRuleIndex() const {
  return MavkaParser::RuleValue;
}

void MavkaParser::ValueContext::copyFrom(ValueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Pre_incrementContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Pre_incrementContext::INCREMENT() {
  return getToken(MavkaParser::INCREMENT, 0);
}

MavkaParser::ValueContext* MavkaParser::Pre_incrementContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::Pre_incrementContext::Pre_incrementContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Pre_incrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPre_increment(this);
}
void MavkaParser::Pre_incrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPre_increment(this);
}

std::any MavkaParser::Pre_incrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPre_increment(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Arithmetic_addContext ------------------------------------------------------------------

std::vector<MavkaParser::ValueContext *> MavkaParser::Arithmetic_addContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::Arithmetic_addContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Arithmetic_op_addContext* MavkaParser::Arithmetic_addContext::arithmetic_op_add() {
  return getRuleContext<MavkaParser::Arithmetic_op_addContext>(0);
}

MavkaParser::Arithmetic_addContext::Arithmetic_addContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Arithmetic_addContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_add(this);
}
void MavkaParser::Arithmetic_addContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_add(this);
}

std::any MavkaParser::Arithmetic_addContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_add(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Bitwise_notContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Bitwise_notContext::TILDA() {
  return getToken(MavkaParser::TILDA, 0);
}

MavkaParser::ValueContext* MavkaParser::Bitwise_notContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::Bitwise_notContext::Bitwise_notContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Bitwise_notContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise_not(this);
}
void MavkaParser::Bitwise_notContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise_not(this);
}

std::any MavkaParser::Bitwise_notContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_not(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NestedContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NestedContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::NestedContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::ExprContext* MavkaParser::NestedContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::NestedContext::NestedContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::NestedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNested(this);
}
void MavkaParser::NestedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNested(this);
}

std::any MavkaParser::NestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNested(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NumberContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NumberContext::NUMBER() {
  return getToken(MavkaParser::NUMBER, 0);
}

MavkaParser::NumberContext::NumberContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::NumberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumber(this);
}
void MavkaParser::NumberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumber(this);
}

std::any MavkaParser::NumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNumber(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NegativeContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NegativeContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}

MavkaParser::ValueContext* MavkaParser::NegativeContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::NegativeContext::NegativeContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::NegativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNegative(this);
}
void MavkaParser::NegativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNegative(this);
}

std::any MavkaParser::NegativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNegative(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NotContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NotContext::NOT() {
  return getToken(MavkaParser::NOT, 0);
}

MavkaParser::ValueContext* MavkaParser::NotContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::NotContext::NotContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::NotContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNot(this);
}
void MavkaParser::NotContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNot(this);
}

std::any MavkaParser::NotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNot(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArrayContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::ArrayContext::OPEN_ARRAY() {
  return getToken(MavkaParser::OPEN_ARRAY, 0);
}

tree::TerminalNode* MavkaParser::ArrayContext::CLOSE_ARRAY() {
  return getToken(MavkaParser::CLOSE_ARRAY, 0);
}

MavkaParser::Array_elementsContext* MavkaParser::ArrayContext::array_elements() {
  return getRuleContext<MavkaParser::Array_elementsContext>(0);
}

MavkaParser::ArrayContext::ArrayContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::ArrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray(this);
}
void MavkaParser::ArrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray(this);
}

std::any MavkaParser::ArrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BitwiseContext ------------------------------------------------------------------

std::vector<MavkaParser::ValueContext *> MavkaParser::BitwiseContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::BitwiseContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Bitwise_opContext* MavkaParser::BitwiseContext::bitwise_op() {
  return getRuleContext<MavkaParser::Bitwise_opContext>(0);
}

MavkaParser::BitwiseContext::BitwiseContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::BitwiseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise(this);
}
void MavkaParser::BitwiseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise(this);
}

std::any MavkaParser::BitwiseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Post_decrementContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Post_decrementContext::DECREMENT() {
  return getToken(MavkaParser::DECREMENT, 0);
}

MavkaParser::ValueContext* MavkaParser::Post_decrementContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::Post_decrementContext::Post_decrementContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Post_decrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPost_decrement(this);
}
void MavkaParser::Post_decrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPost_decrement(this);
}

std::any MavkaParser::Post_decrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPost_decrement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IdContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::IdContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::IdContext::IdContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::IdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterId(this);
}
void MavkaParser::IdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitId(this);
}

std::any MavkaParser::IdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitId(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Arithmetic_mulContext ------------------------------------------------------------------

std::vector<MavkaParser::ValueContext *> MavkaParser::Arithmetic_mulContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::Arithmetic_mulContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Arithmetic_op_mulContext* MavkaParser::Arithmetic_mulContext::arithmetic_op_mul() {
  return getRuleContext<MavkaParser::Arithmetic_op_mulContext>(0);
}

MavkaParser::Arithmetic_mulContext::Arithmetic_mulContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Arithmetic_mulContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_mul(this);
}
void MavkaParser::Arithmetic_mulContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_mul(this);
}

std::any MavkaParser::Arithmetic_mulContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_mul(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Get_elementContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Get_elementContext::OPEN_ARRAY() {
  return getToken(MavkaParser::OPEN_ARRAY, 0);
}

tree::TerminalNode* MavkaParser::Get_elementContext::CLOSE_ARRAY() {
  return getToken(MavkaParser::CLOSE_ARRAY, 0);
}

MavkaParser::ValueContext* MavkaParser::Get_elementContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Get_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::Get_elementContext::Get_elementContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Get_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGet_element(this);
}
void MavkaParser::Get_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGet_element(this);
}

std::any MavkaParser::Get_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGet_element(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ChainContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::ChainContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ChainContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::ChainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::ValueContext* MavkaParser::ChainContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::Extended_identifierContext* MavkaParser::ChainContext::extended_identifier() {
  return getRuleContext<MavkaParser::Extended_identifierContext>(0);
}

MavkaParser::ChainContext::ChainContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::ChainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChain(this);
}
void MavkaParser::ChainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChain(this);
}

std::any MavkaParser::ChainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitChain(this);
  else
    return visitor->visitChildren(this);
}
//----------------- String_valueContext ------------------------------------------------------------------

MavkaParser::StringContext* MavkaParser::String_valueContext::string() {
  return getRuleContext<MavkaParser::StringContext>(0);
}

MavkaParser::String_valueContext::String_valueContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::String_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString_value(this);
}
void MavkaParser::String_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString_value(this);
}

std::any MavkaParser::String_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitString_value(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ComparisonContext ------------------------------------------------------------------

std::vector<MavkaParser::ValueContext *> MavkaParser::ComparisonContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::ComparisonContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Comparison_opContext* MavkaParser::ComparisonContext::comparison_op() {
  return getRuleContext<MavkaParser::Comparison_opContext>(0);
}

MavkaParser::ComparisonContext::ComparisonContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::ComparisonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison(this);
}
void MavkaParser::ComparisonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison(this);
}

std::any MavkaParser::ComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComparison(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TestContext ------------------------------------------------------------------

std::vector<MavkaParser::ValueContext *> MavkaParser::TestContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::TestContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Test_opContext* MavkaParser::TestContext::test_op() {
  return getRuleContext<MavkaParser::Test_opContext>(0);
}

MavkaParser::TestContext::TestContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::TestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTest(this);
}
void MavkaParser::TestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTest(this);
}

std::any MavkaParser::TestContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTest(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Call_exprContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MavkaParser::Call_exprContext::OPEN_PAREN() {
  return getTokens(MavkaParser::OPEN_PAREN);
}

tree::TerminalNode* MavkaParser::Call_exprContext::OPEN_PAREN(size_t i) {
  return getToken(MavkaParser::OPEN_PAREN, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Call_exprContext::CLOSE_PAREN() {
  return getTokens(MavkaParser::CLOSE_PAREN);
}

tree::TerminalNode* MavkaParser::Call_exprContext::CLOSE_PAREN(size_t i) {
  return getToken(MavkaParser::CLOSE_PAREN, i);
}

MavkaParser::ExprContext* MavkaParser::Call_exprContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ArgsContext* MavkaParser::Call_exprContext::args() {
  return getRuleContext<MavkaParser::ArgsContext>(0);
}

MavkaParser::Named_argsContext* MavkaParser::Call_exprContext::named_args() {
  return getRuleContext<MavkaParser::Named_argsContext>(0);
}

MavkaParser::Call_exprContext::Call_exprContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Call_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_expr(this);
}
void MavkaParser::Call_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_expr(this);
}

std::any MavkaParser::Call_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall_expr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PositiveContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::PositiveContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

MavkaParser::ValueContext* MavkaParser::PositiveContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::PositiveContext::PositiveContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::PositiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositive(this);
}
void MavkaParser::PositiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositive(this);
}

std::any MavkaParser::PositiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPositive(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CallContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::CallContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::CallContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::ValueContext* MavkaParser::CallContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::ArgsContext* MavkaParser::CallContext::args() {
  return getRuleContext<MavkaParser::ArgsContext>(0);
}

MavkaParser::Named_argsContext* MavkaParser::CallContext::named_args() {
  return getRuleContext<MavkaParser::Named_argsContext>(0);
}

MavkaParser::CallContext::CallContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::CallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall(this);
}
void MavkaParser::CallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall(this);
}

std::any MavkaParser::CallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AsContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::AsContext::AS() {
  return getToken(MavkaParser::AS, 0);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::AsContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::AsContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::AsContext::AsContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::AsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAs(this);
}
void MavkaParser::AsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAs(this);
}

std::any MavkaParser::AsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAs(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DictionaryContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::DictionaryContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::DictionaryContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::Dictionary_argsContext* MavkaParser::DictionaryContext::dictionary_args() {
  return getRuleContext<MavkaParser::Dictionary_argsContext>(0);
}

MavkaParser::DictionaryContext::DictionaryContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::DictionaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionary(this);
}
void MavkaParser::DictionaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionary(this);
}

std::any MavkaParser::DictionaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDictionary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Pre_decrementContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Pre_decrementContext::DECREMENT() {
  return getToken(MavkaParser::DECREMENT, 0);
}

MavkaParser::ValueContext* MavkaParser::Pre_decrementContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::Pre_decrementContext::Pre_decrementContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Pre_decrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPre_decrement(this);
}
void MavkaParser::Pre_decrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPre_decrement(this);
}

std::any MavkaParser::Pre_decrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPre_decrement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Post_incrementContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Post_incrementContext::INCREMENT() {
  return getToken(MavkaParser::INCREMENT, 0);
}

MavkaParser::ValueContext* MavkaParser::Post_incrementContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::Post_incrementContext::Post_incrementContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Post_incrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPost_increment(this);
}
void MavkaParser::Post_incrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPost_increment(this);
}

std::any MavkaParser::Post_incrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPost_increment(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TernaryContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::TernaryContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::TernaryContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::TernaryContext::TERNARY() {
  return getToken(MavkaParser::TERNARY, 0);
}

tree::TerminalNode* MavkaParser::TernaryContext::COLON() {
  return getToken(MavkaParser::COLON, 0);
}

MavkaParser::ValueContext* MavkaParser::TernaryContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

std::vector<MavkaParser::ExprContext *> MavkaParser::TernaryContext::expr() {
  return getRuleContexts<MavkaParser::ExprContext>();
}

MavkaParser::ExprContext* MavkaParser::TernaryContext::expr(size_t i) {
  return getRuleContext<MavkaParser::ExprContext>(i);
}

MavkaParser::TernaryContext::TernaryContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::TernaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTernary(this);
}
void MavkaParser::TernaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTernary(this);
}

std::any MavkaParser::TernaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTernary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GodContext ------------------------------------------------------------------

std::vector<MavkaParser::ValueContext *> MavkaParser::GodContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::GodContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::GodContext::TA() {
  return getTokens(MavkaParser::TA);
}

tree::TerminalNode* MavkaParser::GodContext::TA(size_t i) {
  return getToken(MavkaParser::TA, i);
}

MavkaParser::GodContext::GodContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::GodContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGod(this);
}
void MavkaParser::GodContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGod(this);
}

std::any MavkaParser::GodContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGod(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ValueContext* MavkaParser::value() {
   return value(0);
}

MavkaParser::ValueContext* MavkaParser::value(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::ValueContext *_localctx = _tracker.createInstance<ValueContext>(_ctx, parentState);
  MavkaParser::ValueContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 70;
  enterRecursionRule(_localctx, 70, MavkaParser::RuleValue, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(572);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<NumberContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(533);
      match(MavkaParser::NUMBER);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<String_valueContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(534);
      string();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<IdContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(535);
      identifier();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<PositiveContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(536);
      match(MavkaParser::PLUS);
      setState(537);
      antlrcpp::downCast<PositiveContext *>(_localctx)->p_value = value(20);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<NegativeContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(538);
      match(MavkaParser::MINUS);
      setState(539);
      antlrcpp::downCast<NegativeContext *>(_localctx)->n_value = value(19);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<Pre_decrementContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(540);
      match(MavkaParser::DECREMENT);
      setState(541);
      antlrcpp::downCast<Pre_decrementContext *>(_localctx)->pd_value = value(18);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<Pre_incrementContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(542);
      match(MavkaParser::INCREMENT);
      setState(543);
      antlrcpp::downCast<Pre_incrementContext *>(_localctx)->pi_value = value(17);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<NotContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(544);
      match(MavkaParser::NOT);
      setState(545);
      antlrcpp::downCast<NotContext *>(_localctx)->n_value = value(14);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<Bitwise_notContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(546);
      match(MavkaParser::TILDA);
      setState(547);
      antlrcpp::downCast<Bitwise_notContext *>(_localctx)->bn_value = value(13);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<NestedContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(548);
      match(MavkaParser::OPEN_PAREN);
      setState(549);
      antlrcpp::downCast<NestedContext *>(_localctx)->n_value = expr();
      setState(550);
      match(MavkaParser::CLOSE_PAREN);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<Call_exprContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(552);
      match(MavkaParser::OPEN_PAREN);
      setState(553);
      antlrcpp::downCast<Call_exprContext *>(_localctx)->ce_value = expr();
      setState(554);
      match(MavkaParser::CLOSE_PAREN);
      setState(555);
      match(MavkaParser::OPEN_PAREN);
      setState(558);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
      case 1: {
        setState(556);
        antlrcpp::downCast<Call_exprContext *>(_localctx)->ce_args = args();
        break;
      }

      case 2: {
        setState(557);
        antlrcpp::downCast<Call_exprContext *>(_localctx)->ce_named_args = named_args();
        break;
      }

      default:
        break;
      }
      setState(560);
      match(MavkaParser::CLOSE_PAREN);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<ArrayContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(562);
      match(MavkaParser::OPEN_ARRAY);
      setState(564);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1693634934870118404) != 0) || ((((_la - 80) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 80)) & 806879427) != 0)) {
        setState(563);
        antlrcpp::downCast<ArrayContext *>(_localctx)->a_elements = array_elements();
      }
      setState(566);
      match(MavkaParser::CLOSE_ARRAY);
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<DictionaryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(567);
      match(MavkaParser::OPEN_PAREN);
      setState(569);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 55) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 55)) & 18031990695526401) != 0)) {
        setState(568);
        antlrcpp::downCast<DictionaryContext *>(_localctx)->d_args = dictionary_args();
      }
      setState(571);
      match(MavkaParser::CLOSE_PAREN);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(638);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(636);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<AsContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->a_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(574);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(575);
          match(MavkaParser::AS);
          setState(576);
          antlrcpp::downCast<AsContext *>(_localctx)->a_right = value(11);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<Arithmetic_mulContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->a_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(577);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(578);
          antlrcpp::downCast<Arithmetic_mulContext *>(_localctx)->a_operation = arithmetic_op_mul();
          setState(579);
          antlrcpp::downCast<Arithmetic_mulContext *>(_localctx)->a_right = value(10);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<Arithmetic_addContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->a_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(581);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(582);
          antlrcpp::downCast<Arithmetic_addContext *>(_localctx)->a_operation = arithmetic_op_add();
          setState(583);
          antlrcpp::downCast<Arithmetic_addContext *>(_localctx)->a_right = value(9);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<BitwiseContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->b_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(585);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(586);
          antlrcpp::downCast<BitwiseContext *>(_localctx)->b_operation = bitwise_op();
          setState(587);
          antlrcpp::downCast<BitwiseContext *>(_localctx)->b_right = value(8);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<ComparisonContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(589);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(590);
          antlrcpp::downCast<ComparisonContext *>(_localctx)->c_operation = comparison_op();
          setState(591);
          antlrcpp::downCast<ComparisonContext *>(_localctx)->c_right = value(7);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<TestContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->t_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(593);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(594);
          antlrcpp::downCast<TestContext *>(_localctx)->t_operation = test_op();
          setState(595);
          antlrcpp::downCast<TestContext *>(_localctx)->t_right = value(6);
          break;
        }

        case 7: {
          auto newContext = _tracker.createInstance<ChainContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(597);

          if (!(precpred(_ctx, 23))) throw FailedPredicateException(this, "precpred(_ctx, 23)");
          setState(598);
          nls();
          setState(599);
          match(MavkaParser::DOT);
          setState(600);
          nls();
          setState(601);
          antlrcpp::downCast<ChainContext *>(_localctx)->c_right = extended_identifier();
          break;
        }

        case 8: {
          auto newContext = _tracker.createInstance<CallContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(603);

          if (!(precpred(_ctx, 22))) throw FailedPredicateException(this, "precpred(_ctx, 22)");
          setState(604);
          match(MavkaParser::OPEN_PAREN);
          setState(607);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
          case 1: {
            setState(605);
            antlrcpp::downCast<CallContext *>(_localctx)->c_args = args();
            break;
          }

          case 2: {
            setState(606);
            antlrcpp::downCast<CallContext *>(_localctx)->c_named_args = named_args();
            break;
          }

          default:
            break;
          }
          setState(609);
          match(MavkaParser::CLOSE_PAREN);
          break;
        }

        case 9: {
          auto newContext = _tracker.createInstance<Get_elementContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->ge_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(610);

          if (!(precpred(_ctx, 21))) throw FailedPredicateException(this, "precpred(_ctx, 21)");
          setState(611);
          match(MavkaParser::OPEN_ARRAY);
          setState(612);
          antlrcpp::downCast<Get_elementContext *>(_localctx)->ge_element = expr();
          setState(613);
          match(MavkaParser::CLOSE_ARRAY);
          break;
        }

        case 10: {
          auto newContext = _tracker.createInstance<Post_decrementContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->pd_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(615);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
          setState(616);
          match(MavkaParser::DECREMENT);
          break;
        }

        case 11: {
          auto newContext = _tracker.createInstance<Post_incrementContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->pi_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(617);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
          setState(618);
          match(MavkaParser::INCREMENT);
          break;
        }

        case 12: {
          auto newContext = _tracker.createInstance<TernaryContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->t_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(619);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(620);
          nls();
          setState(621);
          match(MavkaParser::TERNARY);
          setState(622);
          nls();
          setState(623);
          antlrcpp::downCast<TernaryContext *>(_localctx)->t_positive = expr();
          setState(624);
          nls();
          setState(625);
          match(MavkaParser::COLON);
          setState(626);
          nls();
          setState(627);
          antlrcpp::downCast<TernaryContext *>(_localctx)->t_negative = expr();
          break;
        }

        case 13: {
          auto newContext = _tracker.createInstance<GodContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(629);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(632); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(630);
                    match(MavkaParser::TA);
                    setState(631);
                    value(0);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(634); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        default:
          break;
        } 
      }
      setState(640);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Array_elementsContext ------------------------------------------------------------------

MavkaParser::Array_elementsContext::Array_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Array_elementsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Array_elementsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::Array_elementContext *> MavkaParser::Array_elementsContext::array_element() {
  return getRuleContexts<MavkaParser::Array_elementContext>();
}

MavkaParser::Array_elementContext* MavkaParser::Array_elementsContext::array_element(size_t i) {
  return getRuleContext<MavkaParser::Array_elementContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Array_elementsContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::Array_elementsContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::Array_elementsContext::getRuleIndex() const {
  return MavkaParser::RuleArray_elements;
}

void MavkaParser::Array_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_elements(this);
}

void MavkaParser::Array_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_elements(this);
}


std::any MavkaParser::Array_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray_elements(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Array_elementsContext* MavkaParser::array_elements() {
  Array_elementsContext *_localctx = _tracker.createInstance<Array_elementsContext>(_ctx, getState());
  enterRule(_localctx, 72, MavkaParser::RuleArray_elements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(641);
    nls();
    setState(642);
    array_element();
    setState(643);
    nls();
    setState(652);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::NL

    || _la == MavkaParser::COMMA) {
      setState(644);
      nls();
      setState(645);
      match(MavkaParser::COMMA);
      setState(646);
      nls();
      setState(647);
      array_element();
      setState(648);
      nls();
      setState(654);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_elementContext ------------------------------------------------------------------

MavkaParser::Array_elementContext::Array_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ExprContext* MavkaParser::Array_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Array_elementContext::getRuleIndex() const {
  return MavkaParser::RuleArray_element;
}

void MavkaParser::Array_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_element(this);
}

void MavkaParser::Array_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_element(this);
}


std::any MavkaParser::Array_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Array_elementContext* MavkaParser::array_element() {
  Array_elementContext *_localctx = _tracker.createInstance<Array_elementContext>(_ctx, getState());
  enterRule(_localctx, 74, MavkaParser::RuleArray_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(655);
    antlrcpp::downCast<Array_elementContext *>(_localctx)->ae_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dictionary_argsContext ------------------------------------------------------------------

MavkaParser::Dictionary_argsContext::Dictionary_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Dictionary_argContext *> MavkaParser::Dictionary_argsContext::dictionary_arg() {
  return getRuleContexts<MavkaParser::Dictionary_argContext>();
}

MavkaParser::Dictionary_argContext* MavkaParser::Dictionary_argsContext::dictionary_arg(size_t i) {
  return getRuleContext<MavkaParser::Dictionary_argContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Dictionary_argsContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::Dictionary_argsContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::Dictionary_argsContext::getRuleIndex() const {
  return MavkaParser::RuleDictionary_args;
}

void MavkaParser::Dictionary_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionary_args(this);
}

void MavkaParser::Dictionary_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionary_args(this);
}


std::any MavkaParser::Dictionary_argsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDictionary_args(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Dictionary_argsContext* MavkaParser::dictionary_args() {
  Dictionary_argsContext *_localctx = _tracker.createInstance<Dictionary_argsContext>(_ctx, getState());
  enterRule(_localctx, 76, MavkaParser::RuleDictionary_args);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(657);
    dictionary_arg();
    setState(662);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMMA) {
      setState(658);
      match(MavkaParser::COMMA);
      setState(659);
      dictionary_arg();
      setState(664);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dictionary_argContext ------------------------------------------------------------------

MavkaParser::Dictionary_argContext::Dictionary_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Dictionary_argContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Dictionary_argContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Dictionary_argContext::ASSIGN() {
  return getToken(MavkaParser::ASSIGN, 0);
}

MavkaParser::ExprContext* MavkaParser::Dictionary_argContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::Dictionary_argContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Dictionary_argContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}


size_t MavkaParser::Dictionary_argContext::getRuleIndex() const {
  return MavkaParser::RuleDictionary_arg;
}

void MavkaParser::Dictionary_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionary_arg(this);
}

void MavkaParser::Dictionary_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionary_arg(this);
}


std::any MavkaParser::Dictionary_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDictionary_arg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Dictionary_argContext* MavkaParser::dictionary_arg() {
  Dictionary_argContext *_localctx = _tracker.createInstance<Dictionary_argContext>(_ctx, getState());
  enterRule(_localctx, 78, MavkaParser::RuleDictionary_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(665);
    nls();
    setState(668);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::ID: {
        setState(666);
        antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_name_id = identifier();
        break;
      }

      case MavkaParser::STRING: {
        setState(667);
        antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_name_string = match(MavkaParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(670);
    match(MavkaParser::ASSIGN);
    setState(671);
    antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_value = expr();
    setState(672);
    nls();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

MavkaParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::ExprContext::getRuleIndex() const {
  return MavkaParser::RuleExpr;
}

void MavkaParser::ExprContext::copyFrom(ExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Anonymous_diiaContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::DIIA() {
  return getToken(MavkaParser::DIIA, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Anonymous_diiaContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Anonymous_diiaContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Anonymous_diiaContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Anonymous_diiaContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::END() {
  return getToken(MavkaParser::END, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::ASYNC() {
  return getToken(MavkaParser::ASYNC, 0);
}

MavkaParser::Type_valueContext* MavkaParser::Anonymous_diiaContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::BodyContext* MavkaParser::Anonymous_diiaContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::Anonymous_diiaContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Anonymous_diiaContext::Anonymous_diiaContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::Anonymous_diiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymous_diia(this);
}
void MavkaParser::Anonymous_diiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymous_diia(this);
}

std::any MavkaParser::Anonymous_diiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAnonymous_diia(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WaitContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::WaitContext::WAIT() {
  return getToken(MavkaParser::WAIT, 0);
}

MavkaParser::ValueContext* MavkaParser::WaitContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::WaitContext::WaitContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::WaitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWait(this);
}
void MavkaParser::WaitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWait(this);
}

std::any MavkaParser::WaitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWait(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Call_parentContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Call_parentContext::PARENT() {
  return getToken(MavkaParser::PARENT, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Call_parentContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Call_parentContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Call_parentContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

tree::TerminalNode* MavkaParser::Call_parentContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::Call_parentContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Call_parentContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::ArgsContext* MavkaParser::Call_parentContext::args() {
  return getRuleContext<MavkaParser::ArgsContext>(0);
}

MavkaParser::Named_argsContext* MavkaParser::Call_parentContext::named_args() {
  return getRuleContext<MavkaParser::Named_argsContext>(0);
}

MavkaParser::Call_parentContext::Call_parentContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::Call_parentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_parent(this);
}
void MavkaParser::Call_parentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_parent(this);
}

std::any MavkaParser::Call_parentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall_parent(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FunctionContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::FunctionContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::FunctionContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* MavkaParser::FunctionContext::COLON() {
  return getToken(MavkaParser::COLON, 0);
}

MavkaParser::ExprContext* MavkaParser::FunctionContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

tree::TerminalNode* MavkaParser::FunctionContext::ASYNC() {
  return getToken(MavkaParser::ASYNC, 0);
}

MavkaParser::ParamsContext* MavkaParser::FunctionContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::FunctionContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::FunctionContext::FunctionContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::FunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction(this);
}
void MavkaParser::FunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction(this);
}

std::any MavkaParser::FunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleContext ------------------------------------------------------------------

MavkaParser::ValueContext* MavkaParser::SimpleContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::SimpleContext::SimpleContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::SimpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple(this);
}
void MavkaParser::SimpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple(this);
}

std::any MavkaParser::SimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitSimple(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::ExprContext* MavkaParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 80, MavkaParser::RuleExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(726);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<MavkaParser::Call_parentContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(674);
      match(MavkaParser::PARENT);
      setState(675);
      nls();
      setState(676);
      match(MavkaParser::DOT);
      setState(677);
      nls();
      setState(678);
      antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_id = identifier();
      setState(679);
      match(MavkaParser::OPEN_PAREN);
      setState(682);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
      case 1: {
        setState(680);
        antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_args = args();
        break;
      }

      case 2: {
        setState(681);
        antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_named_args = named_args();
        break;
      }

      default:
        break;
      }
      setState(684);
      match(MavkaParser::CLOSE_PAREN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<MavkaParser::SimpleContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(686);
      value(0);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<MavkaParser::WaitContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(687);
      match(MavkaParser::WAIT);
      setState(688);
      antlrcpp::downCast<WaitContext *>(_localctx)->w_value = value(0);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<MavkaParser::FunctionContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(690);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::ASYNC) {
        setState(689);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_async = match(MavkaParser::ASYNC);
      }
      setState(692);
      match(MavkaParser::OPEN_PAREN);
      setState(694);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 52) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 52)) & 140737488355649) != 0)) {
        setState(693);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_params = params();
      }
      setState(696);
      match(MavkaParser::CLOSE_PAREN);
      setState(698);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::OPEN_ARRAY

      || _la == MavkaParser::ID) {
        setState(697);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_type = type_value();
      }
      setState(700);
      match(MavkaParser::COLON);
      setState(701);
      antlrcpp::downCast<FunctionContext *>(_localctx)->f_body = expr();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<MavkaParser::Anonymous_diiaContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(703);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::ASYNC) {
        setState(702);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_async = match(MavkaParser::ASYNC);
      }
      setState(705);
      match(MavkaParser::DIIA);
      setState(706);
      match(MavkaParser::OPEN_PAREN);

      setState(707);
      nls();
      setState(709);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 52) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 52)) & 140737488355649) != 0)) {
        setState(708);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_params = params();
      }
      setState(711);
      nls();
      setState(713);
      match(MavkaParser::CLOSE_PAREN);
      setState(715);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::OPEN_ARRAY

      || _la == MavkaParser::ID) {
        setState(714);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_type = type_value();
      }
      setState(717);
      nl();
      setState(721);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
      case 1: {
        setState(718);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_body = body();
        setState(719);
        nl();
        break;
      }

      default:
        break;
      }
      setState(723);
      nls();
      setState(724);
      match(MavkaParser::END);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowContext ------------------------------------------------------------------

MavkaParser::ThrowContext::ThrowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::ThrowContext::THROW() {
  return getToken(MavkaParser::THROW, 0);
}

MavkaParser::ExprContext* MavkaParser::ThrowContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::ThrowContext::getRuleIndex() const {
  return MavkaParser::RuleThrow;
}

void MavkaParser::ThrowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrow(this);
}

void MavkaParser::ThrowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrow(this);
}


std::any MavkaParser::ThrowContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitThrow(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ThrowContext* MavkaParser::throw_() {
  ThrowContext *_localctx = _tracker.createInstance<ThrowContext>(_ctx, getState());
  enterRule(_localctx, 82, MavkaParser::RuleThrow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(728);
    match(MavkaParser::THROW);
    setState(729);
    antlrcpp::downCast<ThrowContext *>(_localctx)->t_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_destructionContext ------------------------------------------------------------------

MavkaParser::Array_destructionContext::Array_destructionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Array_destructionContext::OPEN_ARRAY() {
  return getToken(MavkaParser::OPEN_ARRAY, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Array_destructionContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Array_destructionContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::Array_destruction_elContext *> MavkaParser::Array_destructionContext::array_destruction_el() {
  return getRuleContexts<MavkaParser::Array_destruction_elContext>();
}

MavkaParser::Array_destruction_elContext* MavkaParser::Array_destructionContext::array_destruction_el(size_t i) {
  return getRuleContext<MavkaParser::Array_destruction_elContext>(i);
}

tree::TerminalNode* MavkaParser::Array_destructionContext::CLOSE_ARRAY() {
  return getToken(MavkaParser::CLOSE_ARRAY, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Array_destructionContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::Array_destructionContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::Array_destructionContext::getRuleIndex() const {
  return MavkaParser::RuleArray_destruction;
}

void MavkaParser::Array_destructionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_destruction(this);
}

void MavkaParser::Array_destructionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_destruction(this);
}


std::any MavkaParser::Array_destructionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray_destruction(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Array_destructionContext* MavkaParser::array_destruction() {
  Array_destructionContext *_localctx = _tracker.createInstance<Array_destructionContext>(_ctx, getState());
  enterRule(_localctx, 84, MavkaParser::RuleArray_destruction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(731);
    match(MavkaParser::OPEN_ARRAY);
    setState(732);
    nls();
    setState(733);
    array_destruction_el();
    setState(734);
    nls();
    setState(743);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::NL

    || _la == MavkaParser::COMMA) {
      setState(735);
      nls();
      setState(736);
      match(MavkaParser::COMMA);
      setState(737);
      nls();
      setState(738);
      array_destruction_el();
      setState(739);
      nls();
      setState(745);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(746);
    match(MavkaParser::CLOSE_ARRAY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_destruction_elContext ------------------------------------------------------------------

MavkaParser::Array_destruction_elContext::Array_destruction_elContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Array_destruction_elContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}


size_t MavkaParser::Array_destruction_elContext::getRuleIndex() const {
  return MavkaParser::RuleArray_destruction_el;
}

void MavkaParser::Array_destruction_elContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_destruction_el(this);
}

void MavkaParser::Array_destruction_elContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_destruction_el(this);
}


std::any MavkaParser::Array_destruction_elContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray_destruction_el(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Array_destruction_elContext* MavkaParser::array_destruction_el() {
  Array_destruction_elContext *_localctx = _tracker.createInstance<Array_destruction_elContext>(_ctx, getState());
  enterRule(_localctx, 86, MavkaParser::RuleArray_destruction_el);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(748);
    antlrcpp::downCast<Array_destruction_elContext *>(_localctx)->ade_id = identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_destructionContext ------------------------------------------------------------------

MavkaParser::Object_destructionContext::Object_destructionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Object_destructionContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

std::vector<MavkaParser::Object_destruction_elContext *> MavkaParser::Object_destructionContext::object_destruction_el() {
  return getRuleContexts<MavkaParser::Object_destruction_elContext>();
}

MavkaParser::Object_destruction_elContext* MavkaParser::Object_destructionContext::object_destruction_el(size_t i) {
  return getRuleContext<MavkaParser::Object_destruction_elContext>(i);
}

tree::TerminalNode* MavkaParser::Object_destructionContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Object_destructionContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::Object_destructionContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::Object_destructionContext::getRuleIndex() const {
  return MavkaParser::RuleObject_destruction;
}

void MavkaParser::Object_destructionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_destruction(this);
}

void MavkaParser::Object_destructionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_destruction(this);
}


std::any MavkaParser::Object_destructionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitObject_destruction(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Object_destructionContext* MavkaParser::object_destruction() {
  Object_destructionContext *_localctx = _tracker.createInstance<Object_destructionContext>(_ctx, getState());
  enterRule(_localctx, 88, MavkaParser::RuleObject_destruction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(750);
    match(MavkaParser::OPEN_PAREN);
    setState(751);
    object_destruction_el();
    setState(756);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMMA) {
      setState(752);
      match(MavkaParser::COMMA);
      setState(753);
      object_destruction_el();
      setState(758);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(759);
    match(MavkaParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_destruction_elContext ------------------------------------------------------------------

MavkaParser::Object_destruction_elContext::Object_destruction_elContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Object_destruction_elContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Object_destruction_elContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

MavkaParser::IdentifierContext* MavkaParser::Object_destruction_elContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}


size_t MavkaParser::Object_destruction_elContext::getRuleIndex() const {
  return MavkaParser::RuleObject_destruction_el;
}

void MavkaParser::Object_destruction_elContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_destruction_el(this);
}

void MavkaParser::Object_destruction_elContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_destruction_el(this);
}


std::any MavkaParser::Object_destruction_elContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitObject_destruction_el(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Object_destruction_elContext* MavkaParser::object_destruction_el() {
  Object_destruction_elContext *_localctx = _tracker.createInstance<Object_destruction_elContext>(_ctx, getState());
  enterRule(_localctx, 90, MavkaParser::RuleObject_destruction_el);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(761);
    nls();
    setState(762);
    antlrcpp::downCast<Object_destruction_elContext *>(_localctx)->ode_id = identifier();
    setState(763);
    nls();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignContext ------------------------------------------------------------------

MavkaParser::AssignContext::AssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Assign_simpleContext* MavkaParser::AssignContext::assign_simple() {
  return getRuleContext<MavkaParser::Assign_simpleContext>(0);
}

MavkaParser::Assign_by_identifierContext* MavkaParser::AssignContext::assign_by_identifier() {
  return getRuleContext<MavkaParser::Assign_by_identifierContext>(0);
}

MavkaParser::Assign_by_elementContext* MavkaParser::AssignContext::assign_by_element() {
  return getRuleContext<MavkaParser::Assign_by_elementContext>(0);
}

MavkaParser::Assign_array_destructionContext* MavkaParser::AssignContext::assign_array_destruction() {
  return getRuleContext<MavkaParser::Assign_array_destructionContext>(0);
}

MavkaParser::Assign_object_destructionContext* MavkaParser::AssignContext::assign_object_destruction() {
  return getRuleContext<MavkaParser::Assign_object_destructionContext>(0);
}


size_t MavkaParser::AssignContext::getRuleIndex() const {
  return MavkaParser::RuleAssign;
}

void MavkaParser::AssignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign(this);
}

void MavkaParser::AssignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign(this);
}


std::any MavkaParser::AssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::AssignContext* MavkaParser::assign() {
  AssignContext *_localctx = _tracker.createInstance<AssignContext>(_ctx, getState());
  enterRule(_localctx, 92, MavkaParser::RuleAssign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(770);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(765);
      assign_simple();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(766);
      assign_by_identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(767);
      assign_by_element();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(768);
      assign_array_destruction();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(769);
      assign_object_destruction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_simpleContext ------------------------------------------------------------------

MavkaParser::Assign_simpleContext::Assign_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Assign_simpleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_simpleContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Assign_simpleContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

tree::TerminalNode* MavkaParser::Assign_simpleContext::SUBJECT() {
  return getToken(MavkaParser::SUBJECT, 0);
}

MavkaParser::Type_valueContext* MavkaParser::Assign_simpleContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::Assign_simpleContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_simple;
}

void MavkaParser::Assign_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_simple(this);
}

void MavkaParser::Assign_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_simple(this);
}


std::any MavkaParser::Assign_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_simple(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_simpleContext* MavkaParser::assign_simple() {
  Assign_simpleContext *_localctx = _tracker.createInstance<Assign_simpleContext>(_ctx, getState());
  enterRule(_localctx, 94, MavkaParser::RuleAssign_simple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(773);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::SUBJECT) {
      setState(772);
      antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_subject = match(MavkaParser::SUBJECT);
    }
    setState(775);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_identifier = identifier();
    setState(777);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::OPEN_ARRAY

    || _la == MavkaParser::ID) {
      setState(776);
      antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_type = type_value();
    }
    setState(779);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_symbol = assign_symbol();
    setState(780);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_by_identifierContext ------------------------------------------------------------------

MavkaParser::Assign_by_identifierContext::Assign_by_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_by_identifierContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Assign_by_identifierContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::Assign_by_identifierContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_by_identifierContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Assign_by_identifierContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Assign_by_identifierContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_by_identifier;
}

void MavkaParser::Assign_by_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_by_identifier(this);
}

void MavkaParser::Assign_by_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_by_identifier(this);
}


std::any MavkaParser::Assign_by_identifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_by_identifier(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_by_identifierContext* MavkaParser::assign_by_identifier() {
  Assign_by_identifierContext *_localctx = _tracker.createInstance<Assign_by_identifierContext>(_ctx, getState());
  enterRule(_localctx, 96, MavkaParser::RuleAssign_by_identifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(782);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_left = super_identifiers_chain(0);
    setState(783);
    match(MavkaParser::DOT);
    setState(784);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_identifier = identifier();
    setState(785);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_symbol = assign_symbol();
    setState(786);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_by_elementContext ------------------------------------------------------------------

MavkaParser::Assign_by_elementContext::Assign_by_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_by_elementContext::OPEN_ARRAY() {
  return getToken(MavkaParser::OPEN_ARRAY, 0);
}

tree::TerminalNode* MavkaParser::Assign_by_elementContext::CLOSE_ARRAY() {
  return getToken(MavkaParser::CLOSE_ARRAY, 0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Assign_by_elementContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

std::vector<MavkaParser::ExprContext *> MavkaParser::Assign_by_elementContext::expr() {
  return getRuleContexts<MavkaParser::ExprContext>();
}

MavkaParser::ExprContext* MavkaParser::Assign_by_elementContext::expr(size_t i) {
  return getRuleContext<MavkaParser::ExprContext>(i);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_by_elementContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}


size_t MavkaParser::Assign_by_elementContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_by_element;
}

void MavkaParser::Assign_by_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_by_element(this);
}

void MavkaParser::Assign_by_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_by_element(this);
}


std::any MavkaParser::Assign_by_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_by_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_by_elementContext* MavkaParser::assign_by_element() {
  Assign_by_elementContext *_localctx = _tracker.createInstance<Assign_by_elementContext>(_ctx, getState());
  enterRule(_localctx, 98, MavkaParser::RuleAssign_by_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(788);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_left = super_identifiers_chain(0);
    setState(789);
    match(MavkaParser::OPEN_ARRAY);
    setState(790);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_index = expr();
    setState(791);
    match(MavkaParser::CLOSE_ARRAY);
    setState(792);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_symbol = assign_symbol();
    setState(793);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_array_destructionContext ------------------------------------------------------------------

MavkaParser::Assign_array_destructionContext::Assign_array_destructionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_array_destructionContext::ASSIGN() {
  return getToken(MavkaParser::ASSIGN, 0);
}

MavkaParser::Array_destructionContext* MavkaParser::Assign_array_destructionContext::array_destruction() {
  return getRuleContext<MavkaParser::Array_destructionContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Assign_array_destructionContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Assign_array_destructionContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_array_destruction;
}

void MavkaParser::Assign_array_destructionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_array_destruction(this);
}

void MavkaParser::Assign_array_destructionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_array_destruction(this);
}


std::any MavkaParser::Assign_array_destructionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_array_destruction(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_array_destructionContext* MavkaParser::assign_array_destruction() {
  Assign_array_destructionContext *_localctx = _tracker.createInstance<Assign_array_destructionContext>(_ctx, getState());
  enterRule(_localctx, 100, MavkaParser::RuleAssign_array_destruction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(795);
    antlrcpp::downCast<Assign_array_destructionContext *>(_localctx)->aad_array_destruction = array_destruction();
    setState(796);
    match(MavkaParser::ASSIGN);
    setState(797);
    antlrcpp::downCast<Assign_array_destructionContext *>(_localctx)->aad_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_object_destructionContext ------------------------------------------------------------------

MavkaParser::Assign_object_destructionContext::Assign_object_destructionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_object_destructionContext::ASSIGN() {
  return getToken(MavkaParser::ASSIGN, 0);
}

MavkaParser::Object_destructionContext* MavkaParser::Assign_object_destructionContext::object_destruction() {
  return getRuleContext<MavkaParser::Object_destructionContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Assign_object_destructionContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Assign_object_destructionContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_object_destruction;
}

void MavkaParser::Assign_object_destructionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_object_destruction(this);
}

void MavkaParser::Assign_object_destructionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_object_destruction(this);
}


std::any MavkaParser::Assign_object_destructionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_object_destruction(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_object_destructionContext* MavkaParser::assign_object_destruction() {
  Assign_object_destructionContext *_localctx = _tracker.createInstance<Assign_object_destructionContext>(_ctx, getState());
  enterRule(_localctx, 102, MavkaParser::RuleAssign_object_destruction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(799);
    antlrcpp::downCast<Assign_object_destructionContext *>(_localctx)->aod_object_destruction = object_destruction();
    setState(800);
    match(MavkaParser::ASSIGN);
    setState(801);
    antlrcpp::downCast<Assign_object_destructionContext *>(_localctx)->aod_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_symbolContext ------------------------------------------------------------------

MavkaParser::Assign_symbolContext::Assign_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::TSE() {
  return getToken(MavkaParser::TSE, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN() {
  return getToken(MavkaParser::ASSIGN, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_PARENT() {
  return getToken(MavkaParser::ASSIGN_PARENT, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_ADD() {
  return getToken(MavkaParser::ASSIGN_ADD, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_SUB() {
  return getToken(MavkaParser::ASSIGN_SUB, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_MUL() {
  return getToken(MavkaParser::ASSIGN_MUL, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_DIV() {
  return getToken(MavkaParser::ASSIGN_DIV, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_DIVDIV() {
  return getToken(MavkaParser::ASSIGN_DIVDIV, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_MOD() {
  return getToken(MavkaParser::ASSIGN_MOD, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_POW() {
  return getToken(MavkaParser::ASSIGN_POW, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_BW_AND() {
  return getToken(MavkaParser::ASSIGN_BW_AND, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_BW_OR() {
  return getToken(MavkaParser::ASSIGN_BW_OR, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_BW_SHIFT_LEFT() {
  return getToken(MavkaParser::ASSIGN_BW_SHIFT_LEFT, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_BW_SHIFT_RIGHT() {
  return getToken(MavkaParser::ASSIGN_BW_SHIFT_RIGHT, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_XOR() {
  return getToken(MavkaParser::ASSIGN_XOR, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_AND() {
  return getToken(MavkaParser::ASSIGN_AND, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_OR() {
  return getToken(MavkaParser::ASSIGN_OR, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_IF() {
  return getToken(MavkaParser::ASSIGN_IF, 0);
}


size_t MavkaParser::Assign_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_symbol;
}

void MavkaParser::Assign_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_symbol(this);
}

void MavkaParser::Assign_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_symbol(this);
}


std::any MavkaParser::Assign_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_symbolContext* MavkaParser::assign_symbol() {
  Assign_symbolContext *_localctx = _tracker.createInstance<Assign_symbolContext>(_ctx, getState());
  enterRule(_localctx, 104, MavkaParser::RuleAssign_symbol);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(803);
    _la = _input->LA(1);
    if (!(((((_la - 49) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 49)) & 2147467265) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Wait_assignContext ------------------------------------------------------------------

MavkaParser::Wait_assignContext::Wait_assignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Wait_assignContext::WAIT() {
  return getToken(MavkaParser::WAIT, 0);
}

MavkaParser::AssignContext* MavkaParser::Wait_assignContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}


size_t MavkaParser::Wait_assignContext::getRuleIndex() const {
  return MavkaParser::RuleWait_assign;
}

void MavkaParser::Wait_assignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWait_assign(this);
}

void MavkaParser::Wait_assignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWait_assign(this);
}


std::any MavkaParser::Wait_assignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWait_assign(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Wait_assignContext* MavkaParser::wait_assign() {
  Wait_assignContext *_localctx = _tracker.createInstance<Wait_assignContext>(_ctx, getState());
  enterRule(_localctx, 106, MavkaParser::RuleWait_assign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(805);
    match(MavkaParser::WAIT);
    setState(806);
    antlrcpp::downCast<Wait_assignContext *>(_localctx)->wa_assign = assign();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

MavkaParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::IdentifierContext::ID() {
  return getToken(MavkaParser::ID, 0);
}


size_t MavkaParser::IdentifierContext::getRuleIndex() const {
  return MavkaParser::RuleIdentifier;
}

void MavkaParser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void MavkaParser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}


std::any MavkaParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::IdentifierContext* MavkaParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 108, MavkaParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(808);
    match(MavkaParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extended_identifierContext ------------------------------------------------------------------

MavkaParser::Extended_identifierContext::Extended_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::ID() {
  return getToken(MavkaParser::ID, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::END() {
  return getToken(MavkaParser::END, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::DIIA() {
  return getToken(MavkaParser::DIIA, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::STRUCTURE() {
  return getToken(MavkaParser::STRUCTURE, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::FOR() {
  return getToken(MavkaParser::FOR, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::IF() {
  return getToken(MavkaParser::IF, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::WAIT() {
  return getToken(MavkaParser::WAIT, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::TAKE() {
  return getToken(MavkaParser::TAKE, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::GIVE() {
  return getToken(MavkaParser::GIVE, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::AS() {
  return getToken(MavkaParser::AS, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::IS() {
  return getToken(MavkaParser::IS, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::RETURN() {
  return getToken(MavkaParser::RETURN, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::ASYNC() {
  return getToken(MavkaParser::ASYNC, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::AND() {
  return getToken(MavkaParser::AND, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::OR() {
  return getToken(MavkaParser::OR, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::TRY() {
  return getToken(MavkaParser::TRY, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::CATCH() {
  return getToken(MavkaParser::CATCH, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::ELSE() {
  return getToken(MavkaParser::ELSE, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::THROW() {
  return getToken(MavkaParser::THROW, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::WHILE() {
  return getToken(MavkaParser::WHILE, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::MODULE() {
  return getToken(MavkaParser::MODULE, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::EQ_WORD() {
  return getToken(MavkaParser::EQ_WORD, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::GR_WORD() {
  return getToken(MavkaParser::GR_WORD, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::SM_WORD() {
  return getToken(MavkaParser::SM_WORD, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::MOCKUP() {
  return getToken(MavkaParser::MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::IMPLEMENTS() {
  return getToken(MavkaParser::IMPLEMENTS, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::EVAL() {
  return getToken(MavkaParser::EVAL, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::WHEN() {
  return getToken(MavkaParser::WHEN, 0);
}

tree::TerminalNode* MavkaParser::Extended_identifierContext::TA() {
  return getToken(MavkaParser::TA, 0);
}


size_t MavkaParser::Extended_identifierContext::getRuleIndex() const {
  return MavkaParser::RuleExtended_identifier;
}

void MavkaParser::Extended_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtended_identifier(this);
}

void MavkaParser::Extended_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtended_identifier(this);
}


std::any MavkaParser::Extended_identifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitExtended_identifier(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Extended_identifierContext* MavkaParser::extended_identifier() {
  Extended_identifierContext *_localctx = _tracker.createInstance<Extended_identifierContext>(_ctx, getState());
  enterRule(_localctx, 110, MavkaParser::RuleExtended_identifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(810);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 118779463809054) != 0) || _la == MavkaParser::ID)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Identifiers_chainContext ------------------------------------------------------------------

MavkaParser::Identifiers_chainContext::Identifiers_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Identifiers_chainContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Identifiers_chainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::Identifiers_chainContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}

MavkaParser::Extended_identifierContext* MavkaParser::Identifiers_chainContext::extended_identifier() {
  return getRuleContext<MavkaParser::Extended_identifierContext>(0);
}


size_t MavkaParser::Identifiers_chainContext::getRuleIndex() const {
  return MavkaParser::RuleIdentifiers_chain;
}

void MavkaParser::Identifiers_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifiers_chain(this);
}

void MavkaParser::Identifiers_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifiers_chain(this);
}


std::any MavkaParser::Identifiers_chainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIdentifiers_chain(this);
  else
    return visitor->visitChildren(this);
}


MavkaParser::Identifiers_chainContext* MavkaParser::identifiers_chain() {
   return identifiers_chain(0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::identifiers_chain(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::Identifiers_chainContext *_localctx = _tracker.createInstance<Identifiers_chainContext>(_ctx, parentState);
  MavkaParser::Identifiers_chainContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 112;
  enterRecursionRule(_localctx, 112, MavkaParser::RuleIdentifiers_chain, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(813);
    antlrcpp::downCast<Identifiers_chainContext *>(_localctx)->ic_identifier = identifier();
    _ctx->stop = _input->LT(-1);
    setState(820);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Identifiers_chainContext>(parentContext, parentState);
        _localctx->ic_left = previousContext;
        pushNewRecursionContext(_localctx, startState, RuleIdentifiers_chain);
        setState(815);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(816);
        match(MavkaParser::DOT);
        setState(817);
        antlrcpp::downCast<Identifiers_chainContext *>(_localctx)->ic_right = extended_identifier(); 
      }
      setState(822);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Super_identifiers_chainContext ------------------------------------------------------------------

MavkaParser::Super_identifiers_chainContext::Super_identifiers_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Super_identifiers_chainContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Super_identifiers_chainContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Super_identifiers_chainContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Super_identifiers_chainContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::Extended_identifierContext* MavkaParser::Super_identifiers_chainContext::extended_identifier() {
  return getRuleContext<MavkaParser::Extended_identifierContext>(0);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::OPEN_ARRAY() {
  return getToken(MavkaParser::OPEN_ARRAY, 0);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::CLOSE_ARRAY() {
  return getToken(MavkaParser::CLOSE_ARRAY, 0);
}

MavkaParser::ExprContext* MavkaParser::Super_identifiers_chainContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Super_identifiers_chainContext::getRuleIndex() const {
  return MavkaParser::RuleSuper_identifiers_chain;
}

void MavkaParser::Super_identifiers_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuper_identifiers_chain(this);
}

void MavkaParser::Super_identifiers_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuper_identifiers_chain(this);
}


std::any MavkaParser::Super_identifiers_chainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitSuper_identifiers_chain(this);
  else
    return visitor->visitChildren(this);
}


MavkaParser::Super_identifiers_chainContext* MavkaParser::super_identifiers_chain() {
   return super_identifiers_chain(0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::super_identifiers_chain(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::Super_identifiers_chainContext *_localctx = _tracker.createInstance<Super_identifiers_chainContext>(_ctx, parentState);
  MavkaParser::Super_identifiers_chainContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 114;
  enterRecursionRule(_localctx, 114, MavkaParser::RuleSuper_identifiers_chain, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(824);
    antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_identifier = identifier();
    _ctx->stop = _input->LT(-1);
    setState(841);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(839);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Super_identifiers_chainContext>(parentContext, parentState);
          _localctx->sic_left = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleSuper_identifiers_chain);
          setState(826);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(827);
          nls();
          setState(828);
          match(MavkaParser::DOT);
          setState(829);
          nls();
          setState(830);
          antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_right = extended_identifier();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Super_identifiers_chainContext>(parentContext, parentState);
          _localctx->sic_left = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleSuper_identifiers_chain);
          setState(832);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(833);
          match(MavkaParser::OPEN_ARRAY);
          setState(834);
          nls();
          setState(835);
          antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_index = expr();
          setState(836);
          nls();
          setState(837);
          match(MavkaParser::CLOSE_ARRAY);
          break;
        }

        default:
          break;
        } 
      }
      setState(843);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Type_valueContext ------------------------------------------------------------------

MavkaParser::Type_valueContext::Type_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Type_value_itemContext *> MavkaParser::Type_valueContext::type_value_item() {
  return getRuleContexts<MavkaParser::Type_value_itemContext>();
}

MavkaParser::Type_value_itemContext* MavkaParser::Type_valueContext::type_value_item(size_t i) {
  return getRuleContext<MavkaParser::Type_value_itemContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Type_valueContext::OR_BW() {
  return getTokens(MavkaParser::OR_BW);
}

tree::TerminalNode* MavkaParser::Type_valueContext::OR_BW(size_t i) {
  return getToken(MavkaParser::OR_BW, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Type_valueContext::OR() {
  return getTokens(MavkaParser::OR);
}

tree::TerminalNode* MavkaParser::Type_valueContext::OR(size_t i) {
  return getToken(MavkaParser::OR, i);
}


size_t MavkaParser::Type_valueContext::getRuleIndex() const {
  return MavkaParser::RuleType_value;
}

void MavkaParser::Type_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value(this);
}

void MavkaParser::Type_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value(this);
}


std::any MavkaParser::Type_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_valueContext* MavkaParser::type_value() {
  Type_valueContext *_localctx = _tracker.createInstance<Type_valueContext>(_ctx, getState());
  enterRule(_localctx, 116, MavkaParser::RuleType_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(844);
    type_value_item();
    setState(849);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::OR || _la == MavkaParser::OR_BW) {
      setState(845);
      _la = _input->LA(1);
      if (!(_la == MavkaParser::OR || _la == MavkaParser::OR_BW)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(846);
      type_value_item();
      setState(851);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_itemContext ------------------------------------------------------------------

MavkaParser::Type_value_itemContext::Type_value_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Identifiers_chainContext* MavkaParser::Type_value_itemContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}

tree::TerminalNode* MavkaParser::Type_value_itemContext::CLOSE_ARRAY() {
  return getToken(MavkaParser::CLOSE_ARRAY, 0);
}

tree::TerminalNode* MavkaParser::Type_value_itemContext::OPEN_ARRAY() {
  return getToken(MavkaParser::OPEN_ARRAY, 0);
}


size_t MavkaParser::Type_value_itemContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item;
}

void MavkaParser::Type_value_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item(this);
}

void MavkaParser::Type_value_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item(this);
}


std::any MavkaParser::Type_value_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_itemContext* MavkaParser::type_value_item() {
  Type_value_itemContext *_localctx = _tracker.createInstance<Type_value_itemContext>(_ctx, getState());
  enterRule(_localctx, 118, MavkaParser::RuleType_value_item);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(854);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::OPEN_ARRAY) {
      setState(852);
      antlrcpp::downCast<Type_value_itemContext *>(_localctx)->tv_array = match(MavkaParser::OPEN_ARRAY);
      setState(853);
      match(MavkaParser::CLOSE_ARRAY);
    }
    setState(856);
    antlrcpp::downCast<Type_value_itemContext *>(_localctx)->tv_single = identifiers_chain(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgsContext ------------------------------------------------------------------

MavkaParser::ArgsContext::ArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::ArgContext *> MavkaParser::ArgsContext::arg() {
  return getRuleContexts<MavkaParser::ArgContext>();
}

MavkaParser::ArgContext* MavkaParser::ArgsContext::arg(size_t i) {
  return getRuleContext<MavkaParser::ArgContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::ArgsContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::ArgsContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::ArgsContext::getRuleIndex() const {
  return MavkaParser::RuleArgs;
}

void MavkaParser::ArgsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgs(this);
}

void MavkaParser::ArgsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgs(this);
}


std::any MavkaParser::ArgsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArgs(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ArgsContext* MavkaParser::args() {
  ArgsContext *_localctx = _tracker.createInstance<ArgsContext>(_ctx, getState());
  enterRule(_localctx, 120, MavkaParser::RuleArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(858);
    arg();
    setState(863);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMMA) {
      setState(859);
      match(MavkaParser::COMMA);
      setState(860);
      arg();
      setState(865);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgContext ------------------------------------------------------------------

MavkaParser::ArgContext::ArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlsContext *> MavkaParser::ArgContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ArgContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

MavkaParser::ExprContext* MavkaParser::ArgContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

tree::TerminalNode* MavkaParser::ArgContext::SPREAD() {
  return getToken(MavkaParser::SPREAD, 0);
}


size_t MavkaParser::ArgContext::getRuleIndex() const {
  return MavkaParser::RuleArg;
}

void MavkaParser::ArgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArg(this);
}

void MavkaParser::ArgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArg(this);
}


std::any MavkaParser::ArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ArgContext* MavkaParser::arg() {
  ArgContext *_localctx = _tracker.createInstance<ArgContext>(_ctx, getState());
  enterRule(_localctx, 122, MavkaParser::RuleArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(866);
    nls();
    setState(868);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::SPREAD) {
      setState(867);
      antlrcpp::downCast<ArgContext *>(_localctx)->a_spread = match(MavkaParser::SPREAD);
    }
    setState(870);
    antlrcpp::downCast<ArgContext *>(_localctx)->a_value = expr();
    setState(871);
    nls();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argsContext ------------------------------------------------------------------

MavkaParser::Named_argsContext::Named_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Named_argContext *> MavkaParser::Named_argsContext::named_arg() {
  return getRuleContexts<MavkaParser::Named_argContext>();
}

MavkaParser::Named_argContext* MavkaParser::Named_argsContext::named_arg(size_t i) {
  return getRuleContext<MavkaParser::Named_argContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Named_argsContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::Named_argsContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::Named_argsContext::getRuleIndex() const {
  return MavkaParser::RuleNamed_args;
}

void MavkaParser::Named_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_args(this);
}

void MavkaParser::Named_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_args(this);
}


std::any MavkaParser::Named_argsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNamed_args(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Named_argsContext* MavkaParser::named_args() {
  Named_argsContext *_localctx = _tracker.createInstance<Named_argsContext>(_ctx, getState());
  enterRule(_localctx, 124, MavkaParser::RuleNamed_args);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(873);
    named_arg();
    setState(878);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMMA) {
      setState(874);
      match(MavkaParser::COMMA);
      setState(875);
      named_arg();
      setState(880);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argContext ------------------------------------------------------------------

MavkaParser::Named_argContext::Named_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Named_argContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Named_argContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Named_argContext::ASSIGN() {
  return getToken(MavkaParser::ASSIGN, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Named_argContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Named_argContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Named_argContext::getRuleIndex() const {
  return MavkaParser::RuleNamed_arg;
}

void MavkaParser::Named_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_arg(this);
}

void MavkaParser::Named_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_arg(this);
}


std::any MavkaParser::Named_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNamed_arg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Named_argContext* MavkaParser::named_arg() {
  Named_argContext *_localctx = _tracker.createInstance<Named_argContext>(_ctx, getState());
  enterRule(_localctx, 126, MavkaParser::RuleNamed_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(881);
    nls();
    setState(882);
    antlrcpp::downCast<Named_argContext *>(_localctx)->na_name = identifier();
    setState(883);
    match(MavkaParser::ASSIGN);
    setState(884);
    antlrcpp::downCast<Named_argContext *>(_localctx)->na_value = expr();
    setState(885);
    nls();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamsContext ------------------------------------------------------------------

MavkaParser::ParamsContext::ParamsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::ParamContext *> MavkaParser::ParamsContext::param() {
  return getRuleContexts<MavkaParser::ParamContext>();
}

MavkaParser::ParamContext* MavkaParser::ParamsContext::param(size_t i) {
  return getRuleContext<MavkaParser::ParamContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::ParamsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ParamsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::ParamsContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::ParamsContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}

tree::TerminalNode* MavkaParser::ParamsContext::SPREAD() {
  return getToken(MavkaParser::SPREAD, 0);
}

MavkaParser::IdentifierContext* MavkaParser::ParamsContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::ParamsContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::ParamsContext::getRuleIndex() const {
  return MavkaParser::RuleParams;
}

void MavkaParser::ParamsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParams(this);
}

void MavkaParser::ParamsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParams(this);
}


std::any MavkaParser::ParamsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParams(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ParamsContext* MavkaParser::params() {
  ParamsContext *_localctx = _tracker.createInstance<ParamsContext>(_ctx, getState());
  enterRule(_localctx, 128, MavkaParser::RuleParams);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(913);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::OPEN_PAREN:
      case MavkaParser::OPEN_ARRAY:
      case MavkaParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(887);
        param();
        setState(895);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(888);
            nls();
            setState(889);
            match(MavkaParser::COMMA);
            setState(890);
            nls();
            setState(891);
            param(); 
          }
          setState(897);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
        }
        setState(906);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
        case 1: {
          setState(898);
          nls();
          setState(899);
          match(MavkaParser::COMMA);
          setState(900);
          nls();
          setState(901);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic = match(MavkaParser::SPREAD);
          setState(902);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_name = identifier();
          setState(904);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MavkaParser::OPEN_ARRAY

          || _la == MavkaParser::ID) {
            setState(903);
            antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_type = type_value();
          }
          break;
        }

        default:
          break;
        }
        break;
      }

      case MavkaParser::SPREAD: {
        enterOuterAlt(_localctx, 2);
        setState(908);
        antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic = match(MavkaParser::SPREAD);
        setState(909);
        antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_name = identifier();
        setState(911);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MavkaParser::OPEN_ARRAY

        || _la == MavkaParser::ID) {
          setState(910);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_type = type_value();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamContext ------------------------------------------------------------------

MavkaParser::ParamContext::ParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::ParamContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Array_destructionContext* MavkaParser::ParamContext::array_destruction() {
  return getRuleContext<MavkaParser::Array_destructionContext>(0);
}

MavkaParser::Object_destructionContext* MavkaParser::ParamContext::object_destruction() {
  return getRuleContext<MavkaParser::Object_destructionContext>(0);
}

tree::TerminalNode* MavkaParser::ParamContext::ASSIGN() {
  return getToken(MavkaParser::ASSIGN, 0);
}

MavkaParser::Type_valueContext* MavkaParser::ParamContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::Param_valueContext* MavkaParser::ParamContext::param_value() {
  return getRuleContext<MavkaParser::Param_valueContext>(0);
}


size_t MavkaParser::ParamContext::getRuleIndex() const {
  return MavkaParser::RuleParam;
}

void MavkaParser::ParamContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam(this);
}

void MavkaParser::ParamContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam(this);
}


std::any MavkaParser::ParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ParamContext* MavkaParser::param() {
  ParamContext *_localctx = _tracker.createInstance<ParamContext>(_ctx, getState());
  enterRule(_localctx, 130, MavkaParser::RuleParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(918);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::ID: {
        setState(915);
        antlrcpp::downCast<ParamContext *>(_localctx)->p_name = identifier();
        break;
      }

      case MavkaParser::OPEN_ARRAY: {
        setState(916);
        antlrcpp::downCast<ParamContext *>(_localctx)->p_array_destruction = array_destruction();
        break;
      }

      case MavkaParser::OPEN_PAREN: {
        setState(917);
        antlrcpp::downCast<ParamContext *>(_localctx)->p_object_destruction = object_destruction();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(921);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::OPEN_ARRAY

    || _la == MavkaParser::ID) {
      setState(920);
      antlrcpp::downCast<ParamContext *>(_localctx)->p_type = type_value();
    }
    setState(925);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ASSIGN) {
      setState(923);
      match(MavkaParser::ASSIGN);
      setState(924);
      antlrcpp::downCast<ParamContext *>(_localctx)->p_value = param_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_valueContext ------------------------------------------------------------------

MavkaParser::Param_valueContext::Param_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::Param_valueContext::getRuleIndex() const {
  return MavkaParser::RuleParam_value;
}

void MavkaParser::Param_valueContext::copyFrom(Param_valueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Param_value_empty_listContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Param_value_empty_listContext::OPEN_ARRAY() {
  return getToken(MavkaParser::OPEN_ARRAY, 0);
}

tree::TerminalNode* MavkaParser::Param_value_empty_listContext::CLOSE_ARRAY() {
  return getToken(MavkaParser::CLOSE_ARRAY, 0);
}

MavkaParser::Param_value_empty_listContext::Param_value_empty_listContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_empty_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_empty_list(this);
}
void MavkaParser::Param_value_empty_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_empty_list(this);
}

std::any MavkaParser::Param_value_empty_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_empty_list(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_identifierContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::Param_value_identifierContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Param_value_identifierContext::Param_value_identifierContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_identifier(this);
}
void MavkaParser::Param_value_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_identifier(this);
}

std::any MavkaParser::Param_value_identifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_identifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_empty_dictionaryContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Param_value_empty_dictionaryContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::Param_value_empty_dictionaryContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::Param_value_empty_dictionaryContext::Param_value_empty_dictionaryContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_empty_dictionaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_empty_dictionary(this);
}
void MavkaParser::Param_value_empty_dictionaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_empty_dictionary(this);
}

std::any MavkaParser::Param_value_empty_dictionaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_empty_dictionary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_numberContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Param_value_numberContext::NUMBER() {
  return getToken(MavkaParser::NUMBER, 0);
}

MavkaParser::Param_value_numberContext::Param_value_numberContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_numberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_number(this);
}
void MavkaParser::Param_value_numberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_number(this);
}

std::any MavkaParser::Param_value_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_number(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_stringContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Param_value_stringContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

tree::TerminalNode* MavkaParser::Param_value_stringContext::STRING_MULTILINE() {
  return getToken(MavkaParser::STRING_MULTILINE, 0);
}

MavkaParser::Param_value_stringContext::Param_value_stringContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_string(this);
}
void MavkaParser::Param_value_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_string(this);
}

std::any MavkaParser::Param_value_stringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_string(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::Param_valueContext* MavkaParser::param_value() {
  Param_valueContext *_localctx = _tracker.createInstance<Param_valueContext>(_ctx, getState());
  enterRule(_localctx, 132, MavkaParser::RuleParam_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(934);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::NUMBER: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_numberContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(927);
        match(MavkaParser::NUMBER);
        break;
      }

      case MavkaParser::STRING_MULTILINE:
      case MavkaParser::STRING: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_stringContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(928);
        _la = _input->LA(1);
        if (!(_la == MavkaParser::STRING_MULTILINE

        || _la == MavkaParser::STRING)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MavkaParser::ID: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_identifierContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(929);
        identifier();
        break;
      }

      case MavkaParser::OPEN_PAREN: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_empty_dictionaryContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(930);
        match(MavkaParser::OPEN_PAREN);
        setState(931);
        match(MavkaParser::CLOSE_PAREN);
        break;
      }

      case MavkaParser::OPEN_ARRAY: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_empty_listContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(932);
        match(MavkaParser::OPEN_ARRAY);
        setState(933);
        match(MavkaParser::CLOSE_ARRAY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BodyContext ------------------------------------------------------------------

MavkaParser::BodyContext::BodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Body_element_or_returnContext *> MavkaParser::BodyContext::body_element_or_return() {
  return getRuleContexts<MavkaParser::Body_element_or_returnContext>();
}

MavkaParser::Body_element_or_returnContext* MavkaParser::BodyContext::body_element_or_return(size_t i) {
  return getRuleContext<MavkaParser::Body_element_or_returnContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::BodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::BodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::BodyContext::getRuleIndex() const {
  return MavkaParser::RuleBody;
}

void MavkaParser::BodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody(this);
}

void MavkaParser::BodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody(this);
}


std::any MavkaParser::BodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::BodyContext* MavkaParser::body() {
  BodyContext *_localctx = _tracker.createInstance<BodyContext>(_ctx, getState());
  enterRule(_localctx, 134, MavkaParser::RuleBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(936);
    body_element_or_return();
    setState(942);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(937);
        nl();
        setState(938);
        body_element_or_return(); 
      }
      setState(944);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_element_or_returnContext ------------------------------------------------------------------

MavkaParser::Body_element_or_returnContext::Body_element_or_returnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Body_elementContext* MavkaParser::Body_element_or_returnContext::body_element() {
  return getRuleContext<MavkaParser::Body_elementContext>(0);
}

MavkaParser::Return_body_lineContext* MavkaParser::Body_element_or_returnContext::return_body_line() {
  return getRuleContext<MavkaParser::Return_body_lineContext>(0);
}


size_t MavkaParser::Body_element_or_returnContext::getRuleIndex() const {
  return MavkaParser::RuleBody_element_or_return;
}

void MavkaParser::Body_element_or_returnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_element_or_return(this);
}

void MavkaParser::Body_element_or_returnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_element_or_return(this);
}


std::any MavkaParser::Body_element_or_returnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody_element_or_return(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Body_element_or_returnContext* MavkaParser::body_element_or_return() {
  Body_element_or_returnContext *_localctx = _tracker.createInstance<Body_element_or_returnContext>(_ctx, getState());
  enterRule(_localctx, 136, MavkaParser::RuleBody_element_or_return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(947);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::DIIA:
      case MavkaParser::FOR:
      case MavkaParser::IF:
      case MavkaParser::WAIT:
      case MavkaParser::ASYNC:
      case MavkaParser::SUBJECT:
      case MavkaParser::TRY:
      case MavkaParser::THROW:
      case MavkaParser::WHILE:
      case MavkaParser::PARENT:
      case MavkaParser::NL:
      case MavkaParser::DECREMENT:
      case MavkaParser::INCREMENT:
      case MavkaParser::OPEN_PAREN:
      case MavkaParser::OPEN_ARRAY:
      case MavkaParser::PLUS:
      case MavkaParser::MINUS:
      case MavkaParser::NOT:
      case MavkaParser::TILDA:
      case MavkaParser::ID:
      case MavkaParser::NUMBER:
      case MavkaParser::STRING_MULTILINE:
      case MavkaParser::STRING: {
        enterOuterAlt(_localctx, 1);
        setState(945);
        body_element();
        break;
      }

      case MavkaParser::RETURN: {
        enterOuterAlt(_localctx, 2);
        setState(946);
        return_body_line();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_elementContext ------------------------------------------------------------------

MavkaParser::Body_elementContext::Body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IfContext* MavkaParser::Body_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Body_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Body_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Body_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Body_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Body_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Body_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Body_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Body_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleBody_element;
}

void MavkaParser::Body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_element(this);
}

void MavkaParser::Body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_element(this);
}


std::any MavkaParser::Body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Body_elementContext* MavkaParser::body_element() {
  Body_elementContext *_localctx = _tracker.createInstance<Body_elementContext>(_ctx, getState());
  enterRule(_localctx, 138, MavkaParser::RuleBody_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(958);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(949);
      if_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(950);
      each();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(951);
      while_();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(952);
      try_();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(953);
      expr();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(954);
      throw_();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(955);
      wait_assign();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(956);
      assign();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(957);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_body_lineContext ------------------------------------------------------------------

MavkaParser::Return_body_lineContext::Return_body_lineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Return_body_lineContext::RETURN() {
  return getToken(MavkaParser::RETURN, 0);
}

MavkaParser::ExprContext* MavkaParser::Return_body_lineContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Return_body_lineContext::getRuleIndex() const {
  return MavkaParser::RuleReturn_body_line;
}

void MavkaParser::Return_body_lineContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_body_line(this);
}

void MavkaParser::Return_body_lineContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_body_line(this);
}


std::any MavkaParser::Return_body_lineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitReturn_body_line(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Return_body_lineContext* MavkaParser::return_body_line() {
  Return_body_lineContext *_localctx = _tracker.createInstance<Return_body_lineContext>(_ctx, getState());
  enterRule(_localctx, 140, MavkaParser::RuleReturn_body_line);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(960);
    match(MavkaParser::RETURN);
    setState(961);
    antlrcpp::downCast<Return_body_lineContext *>(_localctx)->rbl_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithmetic_op_mulContext ------------------------------------------------------------------

MavkaParser::Arithmetic_op_mulContext::Arithmetic_op_mulContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::MUL() {
  return getToken(MavkaParser::MUL, 0);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::DIV() {
  return getToken(MavkaParser::DIV, 0);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::PERCENT() {
  return getToken(MavkaParser::PERCENT, 0);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::DIVDIV() {
  return getToken(MavkaParser::DIVDIV, 0);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::POW() {
  return getToken(MavkaParser::POW, 0);
}


size_t MavkaParser::Arithmetic_op_mulContext::getRuleIndex() const {
  return MavkaParser::RuleArithmetic_op_mul;
}

void MavkaParser::Arithmetic_op_mulContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_op_mul(this);
}

void MavkaParser::Arithmetic_op_mulContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_op_mul(this);
}


std::any MavkaParser::Arithmetic_op_mulContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_op_mul(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Arithmetic_op_mulContext* MavkaParser::arithmetic_op_mul() {
  Arithmetic_op_mulContext *_localctx = _tracker.createInstance<Arithmetic_op_mulContext>(_ctx, getState());
  enterRule(_localctx, 142, MavkaParser::RuleArithmetic_op_mul);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(963);
    _la = _input->LA(1);
    if (!(((((_la - 82) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 82)) & 451) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithmetic_op_addContext ------------------------------------------------------------------

MavkaParser::Arithmetic_op_addContext::Arithmetic_op_addContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Arithmetic_op_addContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_addContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}


size_t MavkaParser::Arithmetic_op_addContext::getRuleIndex() const {
  return MavkaParser::RuleArithmetic_op_add;
}

void MavkaParser::Arithmetic_op_addContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_op_add(this);
}

void MavkaParser::Arithmetic_op_addContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_op_add(this);
}


std::any MavkaParser::Arithmetic_op_addContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_op_add(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Arithmetic_op_addContext* MavkaParser::arithmetic_op_add() {
  Arithmetic_op_addContext *_localctx = _tracker.createInstance<Arithmetic_op_addContext>(_ctx, getState());
  enterRule(_localctx, 144, MavkaParser::RuleArithmetic_op_add);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(965);
    _la = _input->LA(1);
    if (!(_la == MavkaParser::PLUS

    || _la == MavkaParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bitwise_opContext ------------------------------------------------------------------

MavkaParser::Bitwise_opContext::Bitwise_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::XOR() {
  return getToken(MavkaParser::XOR, 0);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::OR_BW() {
  return getToken(MavkaParser::OR_BW, 0);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::AND_BW() {
  return getToken(MavkaParser::AND_BW, 0);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::BW_SHIFT_LEFT() {
  return getToken(MavkaParser::BW_SHIFT_LEFT, 0);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::BW_SHIFT_RIGHT() {
  return getToken(MavkaParser::BW_SHIFT_RIGHT, 0);
}


size_t MavkaParser::Bitwise_opContext::getRuleIndex() const {
  return MavkaParser::RuleBitwise_op;
}

void MavkaParser::Bitwise_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise_op(this);
}

void MavkaParser::Bitwise_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise_op(this);
}


std::any MavkaParser::Bitwise_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Bitwise_opContext* MavkaParser::bitwise_op() {
  Bitwise_opContext *_localctx = _tracker.createInstance<Bitwise_opContext>(_ctx, getState());
  enterRule(_localctx, 146, MavkaParser::RuleBitwise_op);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(967);
    _la = _input->LA(1);
    if (!(((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 121) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Test_opContext ------------------------------------------------------------------

MavkaParser::Test_opContext::Test_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Test_opContext::AND() {
  return getToken(MavkaParser::AND, 0);
}

tree::TerminalNode* MavkaParser::Test_opContext::OR() {
  return getToken(MavkaParser::OR, 0);
}

tree::TerminalNode* MavkaParser::Test_opContext::OR_SYM() {
  return getToken(MavkaParser::OR_SYM, 0);
}

tree::TerminalNode* MavkaParser::Test_opContext::AND_SYM() {
  return getToken(MavkaParser::AND_SYM, 0);
}


size_t MavkaParser::Test_opContext::getRuleIndex() const {
  return MavkaParser::RuleTest_op;
}

void MavkaParser::Test_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTest_op(this);
}

void MavkaParser::Test_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTest_op(this);
}


std::any MavkaParser::Test_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTest_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Test_opContext* MavkaParser::test_op() {
  Test_opContext *_localctx = _tracker.createInstance<Test_opContext>(_ctx, getState());
  enterRule(_localctx, 148, MavkaParser::RuleTest_op);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(969);
    _la = _input->LA(1);
    if (!(_la == MavkaParser::AND

    || _la == MavkaParser::OR || _la == MavkaParser::OR_SYM

    || _la == MavkaParser::AND_SYM)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comparison_opContext ------------------------------------------------------------------

MavkaParser::Comparison_opContext::Comparison_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Comparison_opContext::EQ() {
  return getToken(MavkaParser::EQ, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::NOT_EQ() {
  return getToken(MavkaParser::NOT_EQ, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::SMALLER() {
  return getToken(MavkaParser::SMALLER, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::GREATER_EQ() {
  return getToken(MavkaParser::GREATER_EQ, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::SMALLER_EQ() {
  return getToken(MavkaParser::SMALLER_EQ, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::IS() {
  return getToken(MavkaParser::IS, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::NOT_IS_WORD() {
  return getToken(MavkaParser::NOT_IS_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::EQ_WORD() {
  return getToken(MavkaParser::EQ_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::NOT_EQ_WORD() {
  return getToken(MavkaParser::NOT_EQ_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::GR_WORD() {
  return getToken(MavkaParser::GR_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::NOT_GR_WORD() {
  return getToken(MavkaParser::NOT_GR_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::SM_WORD() {
  return getToken(MavkaParser::SM_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::NOT_SM_WORD() {
  return getToken(MavkaParser::NOT_SM_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::HAS_IS_WORD() {
  return getToken(MavkaParser::HAS_IS_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::NOT_HAS_IS_WORD() {
  return getToken(MavkaParser::NOT_HAS_IS_WORD, 0);
}


size_t MavkaParser::Comparison_opContext::getRuleIndex() const {
  return MavkaParser::RuleComparison_op;
}

void MavkaParser::Comparison_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison_op(this);
}

void MavkaParser::Comparison_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison_op(this);
}


std::any MavkaParser::Comparison_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComparison_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Comparison_opContext* MavkaParser::comparison_op() {
  Comparison_opContext *_localctx = _tracker.createInstance<Comparison_opContext>(_ctx, getState());
  enterRule(_localctx, 150, MavkaParser::RuleComparison_op);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(971);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2194728814560) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NlContext ------------------------------------------------------------------

MavkaParser::NlContext::NlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::NlContext::NL() {
  return getToken(MavkaParser::NL, 0);
}


size_t MavkaParser::NlContext::getRuleIndex() const {
  return MavkaParser::RuleNl;
}

void MavkaParser::NlContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNl(this);
}

void MavkaParser::NlContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNl(this);
}


std::any MavkaParser::NlContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNl(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::NlContext* MavkaParser::nl() {
  NlContext *_localctx = _tracker.createInstance<NlContext>(_ctx, getState());
  enterRule(_localctx, 152, MavkaParser::RuleNl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(973);
    match(MavkaParser::NL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NlsContext ------------------------------------------------------------------

MavkaParser::NlsContext::NlsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlContext *> MavkaParser::NlsContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::NlsContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::NlsContext::getRuleIndex() const {
  return MavkaParser::RuleNls;
}

void MavkaParser::NlsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNls(this);
}

void MavkaParser::NlsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNls(this);
}


std::any MavkaParser::NlsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNls(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::NlsContext* MavkaParser::nls() {
  NlsContext *_localctx = _tracker.createInstance<NlsContext>(_ctx, getState());
  enterRule(_localctx, 154, MavkaParser::RuleNls);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(978);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(975);
        nl(); 
      }
      setState(980);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool MavkaParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 35: return valueSempred(antlrcpp::downCast<ValueContext *>(context), predicateIndex);
    case 56: return identifiers_chainSempred(antlrcpp::downCast<Identifiers_chainContext *>(context), predicateIndex);
    case 57: return super_identifiers_chainSempred(antlrcpp::downCast<Super_identifiers_chainContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool MavkaParser::valueSempred(ValueContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 10);
    case 1: return precpred(_ctx, 9);
    case 2: return precpred(_ctx, 8);
    case 3: return precpred(_ctx, 7);
    case 4: return precpred(_ctx, 6);
    case 5: return precpred(_ctx, 5);
    case 6: return precpred(_ctx, 23);
    case 7: return precpred(_ctx, 22);
    case 8: return precpred(_ctx, 21);
    case 9: return precpred(_ctx, 16);
    case 10: return precpred(_ctx, 15);
    case 11: return precpred(_ctx, 4);
    case 12: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool MavkaParser::identifiers_chainSempred(Identifiers_chainContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 13: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool MavkaParser::super_identifiers_chainSempred(Super_identifiers_chainContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 14: return precpred(_ctx, 2);
    case 15: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void MavkaParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  mavkaparserParserInitialize();
#else
  ::antlr4::internal::call_once(mavkaparserParserOnceFlag, mavkaparserParserInitialize);
#endif
}
