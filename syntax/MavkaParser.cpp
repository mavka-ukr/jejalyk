
// Generated from MavkaParser.g4 by ANTLR 4.13.0


#include "MavkaParserListener.h"
#include "MavkaParserVisitor.h"

#include "MavkaParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct MavkaParserStaticData final {
  MavkaParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MavkaParserStaticData(const MavkaParserStaticData&) = delete;
  MavkaParserStaticData(MavkaParserStaticData&&) = delete;
  MavkaParserStaticData& operator=(const MavkaParserStaticData&) = delete;
  MavkaParserStaticData& operator=(MavkaParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag mavkaparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
MavkaParserStaticData *mavkaparserParserStaticData = nullptr;

void mavkaparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (mavkaparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(mavkaparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MavkaParserStaticData>(
    std::vector<std::string>{
      "file", "program", "program_element", "module", "module_body", "module_body_element", 
      "method_declaration", "structure", "structure_elements", "structure_element", 
      "structure_param", "generics", "mockup", "mockup_module", "mockup_module_body", 
      "mockup_structure", "mockup_structure_body", "mockup_structure_body_element", 
      "mockup_diia", "mockup_subject", "diia", "if", "each", "fromto", "fromto_simple", 
      "fromto_complex", "fromto_value", "fromto_middle_symbol", "fromto_to_symbol", 
      "while", "try", "eval", "take", "give", "give_element", "string", 
      "atom", "value", "call_generics", "array_elements", "array_element", 
      "dictionary_args", "dictionary_arg", "expr", "throw", "array_destruction", 
      "array_destruction_el", "object_destruction", "object_destruction_el", 
      "assign", "assign_simple", "assign_by_identifier", "assign_by_element", 
      "assign_array_destruction", "assign_object_destruction", "assign_symbol", 
      "wait_assign", "identifier", "identifiers_chain", "super_identifiers_chain", 
      "type_value", "type_value_item", "type_value_item_simple", "type_value_item_generics", 
      "type_value_item_array", "args", "arg", "named_args", "named_arg", 
      "params", "param", "param_value", "body", "body_element_or_return", 
      "body_element", "return_body_line", "arithmetic_op_mul", "arithmetic_op_add", 
      "bitwise_op", "test_op", "comparison_op", "nl", "nls"
    },
    std::vector<std::string>{
      "", "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", "'\\u0434\\u0456\\u044F'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'\\u043F\\u0435\\u0440\\u0435\\u0431\\u0440\\u0430\\u0442\\u0438'", 
      "'=='", "'!='", "'>='", "'<='", "'>'", "'<'", "'\\u044F\\u043A\\u0449\\u043E'", 
      "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", "'\\u0432\\u0437\\u044F\\u0442\\u0438'", 
      "'\\u0432\\u0437\\u044F\\u0442\\u0438 \\u043F\\u0430\\u043A'", "'\\u0432\\u0437\\u044F\\u0442\\u0438 \\u0444\\u0430\\u0439\\u043B'", 
      "'\\u0434\\u0430\\u0442\\u0438'", "'\\u044F\\u043A'", "'\\u0442\\u0430'", 
      "'\\u0454'", "'\\u0441\\u043F\\u0435\\u0446'", "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", 
      "'\\u0442\\u0440\\u0438\\u0432\\u0430\\u043B\\u0430'", "'\\u0441\\u0443\\u0431\\u02BC\\u0454\\u043A\\u0442'", 
      "'\\u0456'", "'\\u0430\\u0431\\u043E'", "'\\u0441\\u043F\\u0440\\u043E\\u0431\\u0443\\u0432\\u0430\\u0442\\u0438'", 
      "'\\u0437\\u043B\\u043E\\u0432\\u0438\\u0442\\u0438'", "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", 
      "'\\u0432\\u043F\\u0430\\u0441\\u0442\\u0438'", "'\\u043F\\u043E\\u043A\\u0438'", 
      "'\\u043C\\u043E\\u0434\\u0443\\u043B\\u044C'", "'\\u003F'", "'\\u0440\\u0456\\u0432\\u043D\\u043E'", 
      "'\\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", "'\\u043C\\u0435\\u043D\\u0448\\u0435'", 
      "'\\u043D\\u0435 \\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", "'\\u043D\\u0435 \\u043C\\u0435\\u043D\\u0448\\u0435'", 
      "'\\u043D\\u0435 \\u0440\\u0456\\u0432\\u043D\\u043E'", "'\\u043D\\u0435 \\u0454'", 
      "'\\u043C\\u0456\\u0441\\u0442\\u0438\\u0442\\u044C'", "'\\u043D\\u0435 \\u043C\\u0456\\u0441\\u0442\\u0438\\u0442\\u044C'", 
      "'.*'", "'\\u043C\\u0430\\u043A\\u0435\\u0442'", "'\\u0432\\u0442\\u0456\\u043B\\u044E\\u0454'", 
      "'\\u0432\\u0442\\u0456\\u043B\\u0438\\u0442\\u0438'", "'js'", "'\\u043A\\u043E\\u043B\\u0438'", 
      "'\\u0442\\u0430\\u043A\\u043E\\u0436'", "'\\u043F\\u0440\\u0435\\u0434\\u043E\\u043A'", 
      "'\\u0446\\u0435'", "'...'", "'..'", "", "", "", "'--'", "'++'", "'('", 
      "')'", "'['", "']'", "','", "'='", "':='", "'+='", "'-='", "'*='", 
      "'/='", "'//='", "'%='", "'|='", "'&='", "'<<='", "'>>='", "'^='", 
      "'**='", "'||='", "'&&='", "'\\u003F\\u003F='", "'+'", "'-'", "'*'", 
      "'/'", "':'", "'.'", "'!'", "'~'", "'%'", "'//'", "'**'", "'^'", "'||'", 
      "'&&'", "'|'", "'&'", "'0x'", "", "", "", "", "", "", "", "", "", 
      "'\"\"\"'"
    },
    std::vector<std::string>{
      "", "END", "DIIA", "STRUCTURE", "FOR", "EQ", "NOT_EQ", "GREATER_EQ", 
      "SMALLER_EQ", "GREATER", "SMALLER", "IF", "WAIT", "TAKE", "TAKE_PAK", 
      "TAKE_FILE", "GIVE", "AS", "TA", "IS", "SPEC", "RETURN", "ASYNC", 
      "SUBJECT", "AND", "OR", "TRY", "CATCH", "ELSE", "THROW", "WHILE", 
      "MODULE", "TERNARY", "EQ_WORD", "GR_WORD", "SM_WORD", "NOT_GR_WORD", 
      "NOT_SM_WORD", "NOT_EQ_WORD", "NOT_IS_WORD", "HAS_IS_WORD", "NOT_HAS_IS_WORD", 
      "STAR_ALL", "MOCKUP", "IMPLEMENTS", "IMPLEMENT", "EVAL", "WHEN", "ALSO", 
      "PARENT", "TSE", "SPREAD", "FROMTO", "KID", "SKIP_SPACES", "NL", "DECREMENT", 
      "INCREMENT", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_ARRAY", "CLOSE_ARRAY", 
      "COMMA", "ASSIGN", "ASSIGN_PARENT", "ASSIGN_ADD", "ASSIGN_SUB", "ASSIGN_MUL", 
      "ASSIGN_DIV", "ASSIGN_DIVDIV", "ASSIGN_MOD", "ASSIGN_BW_OR", "ASSIGN_BW_AND", 
      "ASSIGN_BW_SHIFT_LEFT", "ASSIGN_BW_SHIFT_RIGHT", "ASSIGN_XOR", "ASSIGN_POW", 
      "ASSIGN_OR", "ASSIGN_AND", "ASSIGN_IF", "PLUS", "MINUS", "MUL", "DIV", 
      "COLON", "DOT", "NOT", "TILDA", "PERCENT", "DIVDIV", "POW", "XOR", 
      "OR_SYM", "AND_SYM", "OR_BW", "AND_BW", "HEX_START", "ID", "NUMBER", 
      "INTEGER", "FLOAT", "HEX", "HEXUKR", "BINNUM", "BINNUMUKR", "MML", 
      "TRIPPLE_QUOTE", "STRING_MULTILINE", "STRING", "COMMENT", "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,110,1103,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,1,0,1,0,1,0,1,
  	1,1,1,1,1,1,1,5,1,174,8,1,10,1,12,1,177,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,195,8,2,1,3,1,3,3,3,199,8,3,
  	1,3,1,3,1,3,1,3,3,3,205,8,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,214,8,4,10,
  	4,12,4,217,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
  	5,1,5,3,5,234,8,5,1,6,3,6,237,8,6,1,6,3,6,240,8,6,1,6,1,6,1,6,1,6,1,6,
  	3,6,247,8,6,1,6,1,6,1,6,3,6,252,8,6,1,6,1,6,1,6,1,6,3,6,258,8,6,1,7,1,
  	7,1,7,1,7,1,7,1,7,3,7,266,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,274,8,7,3,7,
  	276,8,7,1,7,1,7,1,7,1,7,3,7,282,8,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,291,
  	8,8,10,8,12,8,294,9,8,1,9,1,9,3,9,298,8,9,1,10,3,10,301,8,10,1,10,1,10,
  	3,10,305,8,10,1,10,1,10,3,10,309,8,10,1,11,1,11,1,11,5,11,314,8,11,10,
  	11,12,11,317,9,11,1,12,1,12,1,12,1,12,3,12,323,8,12,1,13,1,13,1,13,1,
  	13,1,13,1,13,1,13,1,13,3,13,333,8,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
  	14,5,14,342,8,14,10,14,12,14,345,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
  	15,3,15,354,8,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,362,8,15,3,15,364,
  	8,15,1,15,1,15,1,15,1,15,1,15,3,15,371,8,15,1,15,1,15,1,15,1,16,1,16,
  	1,16,1,16,5,16,380,8,16,10,16,12,16,383,9,16,1,17,1,17,1,17,3,17,388,
  	8,17,1,18,1,18,3,18,392,8,18,1,18,3,18,395,8,18,1,18,1,18,1,18,1,18,3,
  	18,401,8,18,1,18,1,18,1,18,1,18,1,18,3,18,408,8,18,1,18,1,18,1,18,3,18,
  	413,8,18,1,18,1,18,1,18,1,18,3,18,419,8,18,1,19,1,19,1,19,1,19,1,19,1,
  	20,3,20,427,8,20,1,20,3,20,430,8,20,1,20,1,20,1,20,1,20,3,20,436,8,20,
  	1,20,1,20,1,20,1,20,1,20,3,20,443,8,20,1,20,1,20,1,20,3,20,448,8,20,1,
  	20,1,20,1,20,1,20,3,20,454,8,20,1,20,1,20,1,20,1,20,3,20,460,8,20,1,20,
  	1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,3,21,471,8,21,1,21,1,21,1,21,
  	1,21,3,21,477,8,21,1,21,1,21,1,21,3,21,482,8,21,1,22,1,22,1,22,3,22,487,
  	8,22,1,22,1,22,1,22,1,22,3,22,493,8,22,1,22,3,22,496,8,22,1,22,1,22,1,
  	22,1,22,3,22,502,8,22,1,22,1,22,1,23,1,23,3,23,508,8,23,1,24,1,24,1,24,
  	3,24,513,8,24,1,24,1,24,1,25,1,25,1,25,3,25,520,8,25,1,25,1,25,1,25,3,
  	25,525,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,536,8,26,
  	1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,548,8,29,1,29,
  	1,29,1,30,1,30,1,30,1,30,1,30,1,30,3,30,558,8,30,1,30,1,30,1,30,3,30,
  	563,8,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,3,32,572,8,32,1,32,1,32,1,
  	32,3,32,577,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,587,8,32,
  	3,32,589,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,5,33,598,8,33,10,33,
  	12,33,601,9,33,1,34,1,34,1,34,3,34,606,8,34,1,35,1,35,1,36,1,36,1,36,
  	1,36,1,36,1,36,3,36,616,8,36,1,36,1,36,1,36,3,36,621,8,36,1,36,1,36,1,
  	36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
  	36,1,36,1,36,3,36,642,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
  	36,1,36,1,36,3,36,655,8,36,1,36,1,36,1,36,3,36,660,8,36,1,36,1,36,1,36,
  	1,36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,672,8,36,10,36,12,36,675,9,36,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,700,8,37,10,37,12,37,
  	703,9,37,1,38,1,38,1,38,5,38,708,8,38,10,38,12,38,711,9,38,1,39,1,39,
  	1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,722,8,39,10,39,12,39,725,9,39,
  	1,40,1,40,1,41,1,41,1,41,5,41,732,8,41,10,41,12,41,735,9,41,1,42,1,42,
  	1,42,3,42,740,8,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,
  	1,43,1,43,3,43,754,8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
  	1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,4,43,776,8,43,
  	11,43,12,43,777,1,43,1,43,1,43,3,43,783,8,43,1,43,1,43,3,43,787,8,43,
  	1,43,1,43,3,43,791,8,43,1,43,1,43,1,43,3,43,796,8,43,1,43,1,43,1,43,1,
  	43,1,43,3,43,803,8,43,1,43,1,43,1,43,3,43,808,8,43,1,43,1,43,1,43,1,43,
  	3,43,814,8,43,1,43,1,43,1,43,1,43,3,43,820,8,43,1,43,1,43,1,43,1,43,3,
  	43,826,8,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
  	45,1,45,5,45,841,8,45,10,45,12,45,844,9,45,1,45,1,45,1,46,1,46,1,47,1,
  	47,1,47,1,47,5,47,854,8,47,10,47,12,47,857,9,47,1,47,1,47,1,48,1,48,1,
  	48,1,48,1,49,1,49,1,49,1,49,1,49,3,49,870,8,49,1,50,3,50,873,8,50,1,50,
  	1,50,3,50,877,8,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,52,
  	1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,
  	1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,5,58,
  	916,8,58,10,58,12,58,919,9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,937,8,59,10,59,12,59,940,
  	9,59,1,60,1,60,1,60,5,60,945,8,60,10,60,12,60,948,9,60,1,61,1,61,3,61,
  	952,8,61,1,62,1,62,1,62,1,62,1,62,3,62,959,8,62,1,63,1,63,1,63,5,63,964,
  	8,63,10,63,12,63,967,9,63,1,64,1,64,1,64,1,64,1,65,1,65,1,65,5,65,976,
  	8,65,10,65,12,65,979,9,65,1,66,1,66,3,66,983,8,66,1,66,1,66,1,66,1,67,
  	1,67,1,67,5,67,991,8,67,10,67,12,67,994,9,67,1,68,1,68,1,68,1,68,1,68,
  	1,68,1,69,1,69,1,69,1,69,1,69,1,69,5,69,1008,8,69,10,69,12,69,1011,9,
  	69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1019,8,69,3,69,1021,8,69,1,69,1,
  	69,1,69,3,69,1026,8,69,3,69,1028,8,69,1,70,1,70,1,70,3,70,1033,8,70,1,
  	70,3,70,1036,8,70,1,70,1,70,3,70,1040,8,70,1,71,1,71,1,71,1,71,1,71,1,
  	71,1,71,3,71,1049,8,71,1,72,1,72,1,72,1,72,5,72,1055,8,72,10,72,12,72,
  	1058,9,72,1,73,1,73,3,73,1062,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
  	1,74,1,74,3,74,1073,8,74,1,75,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,
  	1,78,1,78,1,78,1,78,1,78,3,78,1089,8,78,1,79,1,79,1,80,1,80,1,81,1,81,
  	1,82,5,82,1098,8,82,10,82,12,82,1101,9,82,1,82,0,4,72,74,116,118,83,0,
  	2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
  	52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
  	98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
  	134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,0,10,
  	2,0,80,83,88,90,1,0,5,10,1,0,107,108,2,0,50,50,63,79,2,0,53,53,97,97,
  	2,0,25,25,94,94,2,0,82,83,88,90,1,0,80,81,2,0,24,25,92,93,3,0,5,10,19,
  	19,33,41,1211,0,166,1,0,0,0,2,169,1,0,0,0,4,194,1,0,0,0,6,196,1,0,0,0,
  	8,209,1,0,0,0,10,233,1,0,0,0,12,236,1,0,0,0,14,259,1,0,0,0,16,286,1,0,
  	0,0,18,297,1,0,0,0,20,300,1,0,0,0,22,310,1,0,0,0,24,322,1,0,0,0,26,324,
  	1,0,0,0,28,337,1,0,0,0,30,346,1,0,0,0,32,375,1,0,0,0,34,387,1,0,0,0,36,
  	389,1,0,0,0,38,420,1,0,0,0,40,426,1,0,0,0,42,464,1,0,0,0,44,483,1,0,0,
  	0,46,507,1,0,0,0,48,509,1,0,0,0,50,516,1,0,0,0,52,535,1,0,0,0,54,537,
  	1,0,0,0,56,539,1,0,0,0,58,541,1,0,0,0,60,551,1,0,0,0,62,566,1,0,0,0,64,
  	588,1,0,0,0,66,590,1,0,0,0,68,602,1,0,0,0,70,607,1,0,0,0,72,641,1,0,0,
  	0,74,676,1,0,0,0,76,704,1,0,0,0,78,712,1,0,0,0,80,726,1,0,0,0,82,728,
  	1,0,0,0,84,736,1,0,0,0,86,825,1,0,0,0,88,827,1,0,0,0,90,830,1,0,0,0,92,
  	847,1,0,0,0,94,849,1,0,0,0,96,860,1,0,0,0,98,869,1,0,0,0,100,872,1,0,
  	0,0,102,881,1,0,0,0,104,887,1,0,0,0,106,894,1,0,0,0,108,898,1,0,0,0,110,
  	902,1,0,0,0,112,904,1,0,0,0,114,907,1,0,0,0,116,909,1,0,0,0,118,920,1,
  	0,0,0,120,941,1,0,0,0,122,951,1,0,0,0,124,953,1,0,0,0,126,960,1,0,0,0,
  	128,968,1,0,0,0,130,972,1,0,0,0,132,980,1,0,0,0,134,987,1,0,0,0,136,995,
  	1,0,0,0,138,1027,1,0,0,0,140,1032,1,0,0,0,142,1048,1,0,0,0,144,1050,1,
  	0,0,0,146,1061,1,0,0,0,148,1072,1,0,0,0,150,1074,1,0,0,0,152,1077,1,0,
  	0,0,154,1079,1,0,0,0,156,1088,1,0,0,0,158,1090,1,0,0,0,160,1092,1,0,0,
  	0,162,1094,1,0,0,0,164,1099,1,0,0,0,166,167,3,2,1,0,167,168,5,0,0,1,168,
  	1,1,0,0,0,169,175,3,4,2,0,170,171,3,162,81,0,171,172,3,4,2,0,172,174,
  	1,0,0,0,173,170,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,
  	0,176,3,1,0,0,0,177,175,1,0,0,0,178,195,3,6,3,0,179,195,3,14,7,0,180,
  	195,3,24,12,0,181,195,3,40,20,0,182,195,3,42,21,0,183,195,3,44,22,0,184,
  	195,3,58,29,0,185,195,3,60,30,0,186,195,3,86,43,0,187,195,3,88,44,0,188,
  	195,3,62,31,0,189,195,3,112,56,0,190,195,3,98,49,0,191,195,3,64,32,0,
  	192,195,3,66,33,0,193,195,3,164,82,0,194,178,1,0,0,0,194,179,1,0,0,0,
  	194,180,1,0,0,0,194,181,1,0,0,0,194,182,1,0,0,0,194,183,1,0,0,0,194,184,
  	1,0,0,0,194,185,1,0,0,0,194,186,1,0,0,0,194,187,1,0,0,0,194,188,1,0,0,
  	0,194,189,1,0,0,0,194,190,1,0,0,0,194,191,1,0,0,0,194,192,1,0,0,0,194,
  	193,1,0,0,0,195,5,1,0,0,0,196,198,5,31,0,0,197,199,3,114,57,0,198,197,
  	1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,0,200,204,3,162,81,0,201,202,3,
  	8,4,0,202,203,3,162,81,0,203,205,1,0,0,0,204,201,1,0,0,0,204,205,1,0,
  	0,0,205,206,1,0,0,0,206,207,3,164,82,0,207,208,5,1,0,0,208,7,1,0,0,0,
  	209,215,3,10,5,0,210,211,3,162,81,0,211,212,3,10,5,0,212,214,1,0,0,0,
  	213,210,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,9,
  	1,0,0,0,217,215,1,0,0,0,218,234,3,6,3,0,219,234,3,14,7,0,220,234,3,24,
  	12,0,221,234,3,40,20,0,222,234,3,42,21,0,223,234,3,44,22,0,224,234,3,
  	58,29,0,225,234,3,60,30,0,226,234,3,86,43,0,227,234,3,88,44,0,228,234,
  	3,62,31,0,229,234,3,112,56,0,230,234,3,98,49,0,231,234,3,66,33,0,232,
  	234,3,164,82,0,233,218,1,0,0,0,233,219,1,0,0,0,233,220,1,0,0,0,233,221,
  	1,0,0,0,233,222,1,0,0,0,233,223,1,0,0,0,233,224,1,0,0,0,233,225,1,0,0,
  	0,233,226,1,0,0,0,233,227,1,0,0,0,233,228,1,0,0,0,233,229,1,0,0,0,233,
  	230,1,0,0,0,233,231,1,0,0,0,233,232,1,0,0,0,234,11,1,0,0,0,235,237,5,
  	22,0,0,236,235,1,0,0,0,236,237,1,0,0,0,237,239,1,0,0,0,238,240,5,20,0,
  	0,239,238,1,0,0,0,239,240,1,0,0,0,240,241,1,0,0,0,241,246,3,114,57,0,
  	242,243,5,10,0,0,243,244,3,22,11,0,244,245,5,9,0,0,245,247,1,0,0,0,246,
  	242,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,5,58,0,0,249,251,
  	3,164,82,0,250,252,3,138,69,0,251,250,1,0,0,0,251,252,1,0,0,0,252,253,
  	1,0,0,0,253,254,3,164,82,0,254,255,1,0,0,0,255,257,5,59,0,0,256,258,3,
  	120,60,0,257,256,1,0,0,0,257,258,1,0,0,0,258,13,1,0,0,0,259,260,5,3,0,
  	0,260,265,3,114,57,0,261,262,5,10,0,0,262,263,3,22,11,0,263,264,5,9,0,
  	0,264,266,1,0,0,0,265,261,1,0,0,0,265,266,1,0,0,0,266,275,1,0,0,0,267,
  	268,5,19,0,0,268,273,3,118,59,0,269,270,5,10,0,0,270,271,3,22,11,0,271,
  	272,5,9,0,0,272,274,1,0,0,0,273,269,1,0,0,0,273,274,1,0,0,0,274,276,1,
  	0,0,0,275,267,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,281,3,162,81,
  	0,278,279,3,16,8,0,279,280,3,162,81,0,280,282,1,0,0,0,281,278,1,0,0,0,
  	281,282,1,0,0,0,282,283,1,0,0,0,283,284,3,164,82,0,284,285,5,1,0,0,285,
  	15,1,0,0,0,286,292,3,18,9,0,287,288,3,162,81,0,288,289,3,18,9,0,289,291,
  	1,0,0,0,290,287,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,
  	0,293,17,1,0,0,0,294,292,1,0,0,0,295,298,3,20,10,0,296,298,3,164,82,0,
  	297,295,1,0,0,0,297,296,1,0,0,0,298,19,1,0,0,0,299,301,5,20,0,0,300,299,
  	1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,304,3,114,57,0,303,305,3,
  	120,60,0,304,303,1,0,0,0,304,305,1,0,0,0,305,308,1,0,0,0,306,307,5,63,
  	0,0,307,309,3,142,71,0,308,306,1,0,0,0,308,309,1,0,0,0,309,21,1,0,0,0,
  	310,315,3,114,57,0,311,312,5,62,0,0,312,314,3,114,57,0,313,311,1,0,0,
  	0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,23,1,0,0,0,317,
  	315,1,0,0,0,318,323,3,26,13,0,319,323,3,30,15,0,320,323,3,36,18,0,321,
  	323,3,38,19,0,322,318,1,0,0,0,322,319,1,0,0,0,322,320,1,0,0,0,322,321,
  	1,0,0,0,323,25,1,0,0,0,324,325,5,43,0,0,325,326,5,31,0,0,326,327,3,114,
  	57,0,327,328,3,162,81,0,328,332,3,164,82,0,329,330,3,28,14,0,330,331,
  	3,162,81,0,331,333,1,0,0,0,332,329,1,0,0,0,332,333,1,0,0,0,333,334,1,
  	0,0,0,334,335,3,164,82,0,335,336,5,1,0,0,336,27,1,0,0,0,337,343,3,24,
  	12,0,338,339,3,162,81,0,339,340,3,24,12,0,340,342,1,0,0,0,341,338,1,0,
  	0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,29,1,0,0,0,345,
  	343,1,0,0,0,346,347,5,43,0,0,347,348,5,3,0,0,348,353,3,114,57,0,349,350,
  	5,10,0,0,350,351,3,22,11,0,351,352,5,9,0,0,352,354,1,0,0,0,353,349,1,
  	0,0,0,353,354,1,0,0,0,354,363,1,0,0,0,355,356,5,19,0,0,356,361,3,118,
  	59,0,357,358,5,10,0,0,358,359,3,22,11,0,359,360,5,9,0,0,360,362,1,0,0,
  	0,361,357,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,355,1,0,0,0,363,
  	364,1,0,0,0,364,365,1,0,0,0,365,366,3,162,81,0,366,370,3,164,82,0,367,
  	368,3,32,16,0,368,369,3,162,81,0,369,371,1,0,0,0,370,367,1,0,0,0,370,
  	371,1,0,0,0,371,372,1,0,0,0,372,373,3,164,82,0,373,374,5,1,0,0,374,31,
  	1,0,0,0,375,381,3,34,17,0,376,377,3,162,81,0,377,378,3,34,17,0,378,380,
  	1,0,0,0,379,376,1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,
  	0,382,33,1,0,0,0,383,381,1,0,0,0,384,388,3,20,10,0,385,388,3,12,6,0,386,
  	388,3,164,82,0,387,384,1,0,0,0,387,385,1,0,0,0,387,386,1,0,0,0,388,35,
  	1,0,0,0,389,391,5,43,0,0,390,392,5,22,0,0,391,390,1,0,0,0,391,392,1,0,
  	0,0,392,394,1,0,0,0,393,395,5,20,0,0,394,393,1,0,0,0,394,395,1,0,0,0,
  	395,396,1,0,0,0,396,400,5,2,0,0,397,398,3,114,57,0,398,399,5,85,0,0,399,
  	401,1,0,0,0,400,397,1,0,0,0,400,401,1,0,0,0,401,402,1,0,0,0,402,407,3,
  	114,57,0,403,404,5,10,0,0,404,405,3,22,11,0,405,406,5,9,0,0,406,408,1,
  	0,0,0,407,403,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,410,5,58,0,
  	0,410,412,3,164,82,0,411,413,3,138,69,0,412,411,1,0,0,0,412,413,1,0,0,
  	0,413,414,1,0,0,0,414,415,3,164,82,0,415,416,1,0,0,0,416,418,5,59,0,0,
  	417,419,3,120,60,0,418,417,1,0,0,0,418,419,1,0,0,0,419,37,1,0,0,0,420,
  	421,5,43,0,0,421,422,5,23,0,0,422,423,3,114,57,0,423,424,3,120,60,0,424,
  	39,1,0,0,0,425,427,5,22,0,0,426,425,1,0,0,0,426,427,1,0,0,0,427,429,1,
  	0,0,0,428,430,5,20,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,
  	0,431,435,5,2,0,0,432,433,3,114,57,0,433,434,5,85,0,0,434,436,1,0,0,0,
  	435,432,1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,442,3,114,57,0,438,
  	439,5,10,0,0,439,440,3,22,11,0,440,441,5,9,0,0,441,443,1,0,0,0,442,438,
  	1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,0,444,445,5,58,0,0,445,447,3,164,
  	82,0,446,448,3,138,69,0,447,446,1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,
  	0,449,450,3,164,82,0,450,451,1,0,0,0,451,453,5,59,0,0,452,454,3,120,60,
  	0,453,452,1,0,0,0,453,454,1,0,0,0,454,455,1,0,0,0,455,459,3,162,81,0,
  	456,457,3,144,72,0,457,458,3,162,81,0,458,460,1,0,0,0,459,456,1,0,0,0,
  	459,460,1,0,0,0,460,461,1,0,0,0,461,462,3,164,82,0,462,463,5,1,0,0,463,
  	41,1,0,0,0,464,465,5,11,0,0,465,466,3,86,43,0,466,470,3,162,81,0,467,
  	468,3,144,72,0,468,469,3,162,81,0,469,471,1,0,0,0,470,467,1,0,0,0,470,
  	471,1,0,0,0,471,481,1,0,0,0,472,473,5,28,0,0,473,474,3,144,72,0,474,475,
  	3,162,81,0,475,477,1,0,0,0,476,472,1,0,0,0,476,477,1,0,0,0,477,478,1,
  	0,0,0,478,482,5,1,0,0,479,480,5,28,0,0,480,482,3,42,21,0,481,476,1,0,
  	0,0,481,479,1,0,0,0,482,43,1,0,0,0,483,486,5,4,0,0,484,487,3,86,43,0,
  	485,487,3,46,23,0,486,484,1,0,0,0,486,485,1,0,0,0,487,488,1,0,0,0,488,
  	492,5,17,0,0,489,490,3,114,57,0,490,491,5,62,0,0,491,493,1,0,0,0,492,
  	489,1,0,0,0,492,493,1,0,0,0,493,495,1,0,0,0,494,496,3,114,57,0,495,494,
  	1,0,0,0,495,496,1,0,0,0,496,497,1,0,0,0,497,501,3,162,81,0,498,499,3,
  	144,72,0,499,500,3,162,81,0,500,502,1,0,0,0,501,498,1,0,0,0,501,502,1,
  	0,0,0,502,503,1,0,0,0,503,504,5,1,0,0,504,45,1,0,0,0,505,508,3,48,24,
  	0,506,508,3,50,25,0,507,505,1,0,0,0,507,506,1,0,0,0,508,47,1,0,0,0,509,
  	510,3,52,26,0,510,512,5,52,0,0,511,513,3,56,28,0,512,511,1,0,0,0,512,
  	513,1,0,0,0,513,514,1,0,0,0,514,515,3,52,26,0,515,49,1,0,0,0,516,517,
  	3,52,26,0,517,519,5,52,0,0,518,520,3,54,27,0,519,518,1,0,0,0,519,520,
  	1,0,0,0,520,521,1,0,0,0,521,522,3,52,26,0,522,524,5,52,0,0,523,525,3,
  	56,28,0,524,523,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,527,3,52,
  	26,0,527,51,1,0,0,0,528,536,5,98,0,0,529,536,5,108,0,0,530,536,3,114,
  	57,0,531,532,5,58,0,0,532,533,3,86,43,0,533,534,5,59,0,0,534,536,1,0,
  	0,0,535,528,1,0,0,0,535,529,1,0,0,0,535,530,1,0,0,0,535,531,1,0,0,0,536,
  	53,1,0,0,0,537,538,7,0,0,0,538,55,1,0,0,0,539,540,7,1,0,0,540,57,1,0,
  	0,0,541,542,5,30,0,0,542,543,3,86,43,0,543,547,3,162,81,0,544,545,3,144,
  	72,0,545,546,3,162,81,0,546,548,1,0,0,0,547,544,1,0,0,0,547,548,1,0,0,
  	0,548,549,1,0,0,0,549,550,5,1,0,0,550,59,1,0,0,0,551,552,5,26,0,0,552,
  	553,3,162,81,0,553,554,3,144,72,0,554,555,3,162,81,0,555,557,5,27,0,0,
  	556,558,3,114,57,0,557,556,1,0,0,0,557,558,1,0,0,0,558,562,1,0,0,0,559,
  	560,3,144,72,0,560,561,3,162,81,0,561,563,1,0,0,0,562,559,1,0,0,0,562,
  	563,1,0,0,0,563,564,1,0,0,0,564,565,5,1,0,0,565,61,1,0,0,0,566,567,5,
  	46,0,0,567,568,3,70,35,0,568,63,1,0,0,0,569,571,5,13,0,0,570,572,5,85,
  	0,0,571,570,1,0,0,0,571,572,1,0,0,0,572,573,1,0,0,0,573,576,3,116,58,
  	0,574,575,5,17,0,0,575,577,3,114,57,0,576,574,1,0,0,0,576,577,1,0,0,0,
  	577,589,1,0,0,0,578,579,5,15,0,0,579,580,5,108,0,0,580,581,5,17,0,0,581,
  	589,3,114,57,0,582,583,5,13,0,0,583,586,5,108,0,0,584,585,5,17,0,0,585,
  	587,3,114,57,0,586,584,1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,569,
  	1,0,0,0,588,578,1,0,0,0,588,582,1,0,0,0,589,65,1,0,0,0,590,591,5,16,0,
  	0,591,599,3,68,34,0,592,593,3,164,82,0,593,594,5,62,0,0,594,595,3,164,
  	82,0,595,596,3,68,34,0,596,598,1,0,0,0,597,592,1,0,0,0,598,601,1,0,0,
  	0,599,597,1,0,0,0,599,600,1,0,0,0,600,67,1,0,0,0,601,599,1,0,0,0,602,
  	605,3,114,57,0,603,604,5,17,0,0,604,606,3,114,57,0,605,603,1,0,0,0,605,
  	606,1,0,0,0,606,69,1,0,0,0,607,608,7,2,0,0,608,71,1,0,0,0,609,610,6,36,
  	-1,0,610,642,5,98,0,0,611,642,3,70,35,0,612,642,3,114,57,0,613,615,5,
  	60,0,0,614,616,3,78,39,0,615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,
  	0,0,617,642,5,61,0,0,618,620,5,58,0,0,619,621,3,82,41,0,620,619,1,0,0,
  	0,620,621,1,0,0,0,621,622,1,0,0,0,622,642,5,59,0,0,623,624,5,80,0,0,624,
  	642,3,72,36,9,625,626,5,81,0,0,626,642,3,72,36,8,627,628,5,56,0,0,628,
  	642,3,72,36,7,629,630,5,57,0,0,630,642,3,72,36,6,631,632,5,86,0,0,632,
  	642,3,72,36,3,633,634,5,87,0,0,634,642,3,72,36,2,635,636,5,58,0,0,636,
  	637,3,164,82,0,637,638,3,86,43,0,638,639,3,164,82,0,639,640,5,59,0,0,
  	640,642,1,0,0,0,641,609,1,0,0,0,641,611,1,0,0,0,641,612,1,0,0,0,641,613,
  	1,0,0,0,641,618,1,0,0,0,641,623,1,0,0,0,641,625,1,0,0,0,641,627,1,0,0,
  	0,641,629,1,0,0,0,641,631,1,0,0,0,641,633,1,0,0,0,641,635,1,0,0,0,642,
  	673,1,0,0,0,643,644,10,14,0,0,644,645,3,164,82,0,645,646,5,85,0,0,646,
  	647,3,164,82,0,647,648,3,114,57,0,648,672,1,0,0,0,649,654,10,13,0,0,650,
  	651,5,10,0,0,651,652,3,76,38,0,652,653,5,9,0,0,653,655,1,0,0,0,654,650,
  	1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,659,5,58,0,0,657,660,3,130,
  	65,0,658,660,3,134,67,0,659,657,1,0,0,0,659,658,1,0,0,0,659,660,1,0,0,
  	0,660,661,1,0,0,0,661,672,5,59,0,0,662,663,10,12,0,0,663,664,5,60,0,0,
  	664,665,3,86,43,0,665,666,5,61,0,0,666,672,1,0,0,0,667,668,10,5,0,0,668,
  	672,5,56,0,0,669,670,10,4,0,0,670,672,5,57,0,0,671,643,1,0,0,0,671,649,
  	1,0,0,0,671,662,1,0,0,0,671,667,1,0,0,0,671,669,1,0,0,0,672,675,1,0,0,
  	0,673,671,1,0,0,0,673,674,1,0,0,0,674,73,1,0,0,0,675,673,1,0,0,0,676,
  	677,6,37,-1,0,677,678,3,72,36,0,678,701,1,0,0,0,679,680,10,5,0,0,680,
  	681,3,152,76,0,681,682,3,74,37,6,682,700,1,0,0,0,683,684,10,4,0,0,684,
  	685,3,154,77,0,685,686,3,74,37,5,686,700,1,0,0,0,687,688,10,3,0,0,688,
  	689,3,156,78,0,689,690,3,74,37,4,690,700,1,0,0,0,691,692,10,2,0,0,692,
  	693,3,160,80,0,693,694,3,74,37,3,694,700,1,0,0,0,695,696,10,1,0,0,696,
  	697,3,158,79,0,697,698,3,74,37,2,698,700,1,0,0,0,699,679,1,0,0,0,699,
  	683,1,0,0,0,699,687,1,0,0,0,699,691,1,0,0,0,699,695,1,0,0,0,700,703,1,
  	0,0,0,701,699,1,0,0,0,701,702,1,0,0,0,702,75,1,0,0,0,703,701,1,0,0,0,
  	704,709,3,120,60,0,705,706,5,62,0,0,706,708,3,120,60,0,707,705,1,0,0,
  	0,708,711,1,0,0,0,709,707,1,0,0,0,709,710,1,0,0,0,710,77,1,0,0,0,711,
  	709,1,0,0,0,712,713,3,164,82,0,713,714,3,80,40,0,714,723,3,164,82,0,715,
  	716,3,164,82,0,716,717,5,62,0,0,717,718,3,164,82,0,718,719,3,80,40,0,
  	719,720,3,164,82,0,720,722,1,0,0,0,721,715,1,0,0,0,722,725,1,0,0,0,723,
  	721,1,0,0,0,723,724,1,0,0,0,724,79,1,0,0,0,725,723,1,0,0,0,726,727,3,
  	86,43,0,727,81,1,0,0,0,728,733,3,84,42,0,729,730,5,62,0,0,730,732,3,84,
  	42,0,731,729,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,
  	734,83,1,0,0,0,735,733,1,0,0,0,736,739,3,164,82,0,737,740,3,114,57,0,
  	738,740,5,108,0,0,739,737,1,0,0,0,739,738,1,0,0,0,740,741,1,0,0,0,741,
  	742,5,63,0,0,742,743,3,86,43,0,743,744,3,164,82,0,744,85,1,0,0,0,745,
  	746,5,49,0,0,746,747,3,164,82,0,747,748,5,85,0,0,748,749,3,164,82,0,749,
  	750,3,114,57,0,750,753,5,58,0,0,751,754,3,130,65,0,752,754,3,134,67,0,
  	753,751,1,0,0,0,753,752,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,756,
  	5,59,0,0,756,826,1,0,0,0,757,826,3,74,37,0,758,759,3,72,36,0,759,760,
  	5,17,0,0,760,761,3,72,36,0,761,826,1,0,0,0,762,763,3,74,37,0,763,764,
  	3,164,82,0,764,765,5,32,0,0,765,766,3,164,82,0,766,767,3,86,43,0,767,
  	768,3,164,82,0,768,769,5,84,0,0,769,770,3,164,82,0,770,771,3,86,43,0,
  	771,826,1,0,0,0,772,775,3,72,36,0,773,774,5,18,0,0,774,776,3,72,36,0,
  	775,773,1,0,0,0,776,777,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,826,
  	1,0,0,0,779,780,5,12,0,0,780,826,3,74,37,0,781,783,5,22,0,0,782,781,1,
  	0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,786,5,58,0,0,785,787,3,138,
  	69,0,786,785,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,790,5,59,0,0,
  	789,791,3,120,60,0,790,789,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,
  	793,5,84,0,0,793,826,3,86,43,0,794,796,5,22,0,0,795,794,1,0,0,0,795,796,
  	1,0,0,0,796,797,1,0,0,0,797,802,5,2,0,0,798,799,5,10,0,0,799,800,3,22,
  	11,0,800,801,5,9,0,0,801,803,1,0,0,0,802,798,1,0,0,0,802,803,1,0,0,0,
  	803,804,1,0,0,0,804,805,5,58,0,0,805,807,3,164,82,0,806,808,3,138,69,
  	0,807,806,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,810,3,164,82,0,
  	810,811,1,0,0,0,811,813,5,59,0,0,812,814,3,120,60,0,813,812,1,0,0,0,813,
  	814,1,0,0,0,814,815,1,0,0,0,815,819,3,162,81,0,816,817,3,144,72,0,817,
  	818,3,162,81,0,818,820,1,0,0,0,819,816,1,0,0,0,819,820,1,0,0,0,820,821,
  	1,0,0,0,821,822,3,164,82,0,822,823,5,1,0,0,823,826,1,0,0,0,824,826,5,
  	105,0,0,825,745,1,0,0,0,825,757,1,0,0,0,825,758,1,0,0,0,825,762,1,0,0,
  	0,825,772,1,0,0,0,825,779,1,0,0,0,825,782,1,0,0,0,825,795,1,0,0,0,825,
  	824,1,0,0,0,826,87,1,0,0,0,827,828,5,29,0,0,828,829,3,86,43,0,829,89,
  	1,0,0,0,830,831,5,60,0,0,831,832,3,164,82,0,832,833,3,92,46,0,833,842,
  	3,164,82,0,834,835,3,164,82,0,835,836,5,62,0,0,836,837,3,164,82,0,837,
  	838,3,92,46,0,838,839,3,164,82,0,839,841,1,0,0,0,840,834,1,0,0,0,841,
  	844,1,0,0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,845,1,0,0,0,844,842,1,
  	0,0,0,845,846,5,61,0,0,846,91,1,0,0,0,847,848,3,114,57,0,848,93,1,0,0,
  	0,849,850,5,58,0,0,850,855,3,96,48,0,851,852,5,62,0,0,852,854,3,96,48,
  	0,853,851,1,0,0,0,854,857,1,0,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,
  	858,1,0,0,0,857,855,1,0,0,0,858,859,5,59,0,0,859,95,1,0,0,0,860,861,3,
  	164,82,0,861,862,3,114,57,0,862,863,3,164,82,0,863,97,1,0,0,0,864,870,
  	3,100,50,0,865,870,3,102,51,0,866,870,3,104,52,0,867,870,3,106,53,0,868,
  	870,3,108,54,0,869,864,1,0,0,0,869,865,1,0,0,0,869,866,1,0,0,0,869,867,
  	1,0,0,0,869,868,1,0,0,0,870,99,1,0,0,0,871,873,5,23,0,0,872,871,1,0,0,
  	0,872,873,1,0,0,0,873,874,1,0,0,0,874,876,3,114,57,0,875,877,3,120,60,
  	0,876,875,1,0,0,0,876,877,1,0,0,0,877,878,1,0,0,0,878,879,3,110,55,0,
  	879,880,3,86,43,0,880,101,1,0,0,0,881,882,3,118,59,0,882,883,5,85,0,0,
  	883,884,3,114,57,0,884,885,3,110,55,0,885,886,3,86,43,0,886,103,1,0,0,
  	0,887,888,3,118,59,0,888,889,5,60,0,0,889,890,3,86,43,0,890,891,5,61,
  	0,0,891,892,3,110,55,0,892,893,3,86,43,0,893,105,1,0,0,0,894,895,3,90,
  	45,0,895,896,5,63,0,0,896,897,3,86,43,0,897,107,1,0,0,0,898,899,3,94,
  	47,0,899,900,5,63,0,0,900,901,3,86,43,0,901,109,1,0,0,0,902,903,7,3,0,
  	0,903,111,1,0,0,0,904,905,5,12,0,0,905,906,3,98,49,0,906,113,1,0,0,0,
  	907,908,7,4,0,0,908,115,1,0,0,0,909,910,6,58,-1,0,910,911,3,114,57,0,
  	911,917,1,0,0,0,912,913,10,1,0,0,913,914,5,85,0,0,914,916,3,114,57,0,
  	915,912,1,0,0,0,916,919,1,0,0,0,917,915,1,0,0,0,917,918,1,0,0,0,918,117,
  	1,0,0,0,919,917,1,0,0,0,920,921,6,59,-1,0,921,922,3,114,57,0,922,938,
  	1,0,0,0,923,924,10,2,0,0,924,925,3,164,82,0,925,926,5,85,0,0,926,927,
  	3,164,82,0,927,928,3,114,57,0,928,937,1,0,0,0,929,930,10,1,0,0,930,931,
  	5,60,0,0,931,932,3,164,82,0,932,933,3,86,43,0,933,934,3,164,82,0,934,
  	935,5,61,0,0,935,937,1,0,0,0,936,923,1,0,0,0,936,929,1,0,0,0,937,940,
  	1,0,0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,119,1,0,0,0,940,938,1,0,0,
  	0,941,946,3,122,61,0,942,943,7,5,0,0,943,945,3,122,61,0,944,942,1,0,0,
  	0,945,948,1,0,0,0,946,944,1,0,0,0,946,947,1,0,0,0,947,121,1,0,0,0,948,
  	946,1,0,0,0,949,952,3,124,62,0,950,952,3,128,64,0,951,949,1,0,0,0,951,
  	950,1,0,0,0,952,123,1,0,0,0,953,958,3,116,58,0,954,955,5,10,0,0,955,956,
  	3,126,63,0,956,957,5,9,0,0,957,959,1,0,0,0,958,954,1,0,0,0,958,959,1,
  	0,0,0,959,125,1,0,0,0,960,965,3,120,60,0,961,962,5,62,0,0,962,964,3,120,
  	60,0,963,961,1,0,0,0,964,967,1,0,0,0,965,963,1,0,0,0,965,966,1,0,0,0,
  	966,127,1,0,0,0,967,965,1,0,0,0,968,969,5,60,0,0,969,970,5,61,0,0,970,
  	971,3,122,61,0,971,129,1,0,0,0,972,977,3,132,66,0,973,974,5,62,0,0,974,
  	976,3,132,66,0,975,973,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,977,978,
  	1,0,0,0,978,131,1,0,0,0,979,977,1,0,0,0,980,982,3,164,82,0,981,983,5,
  	51,0,0,982,981,1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,985,3,86,43,
  	0,985,986,3,164,82,0,986,133,1,0,0,0,987,992,3,136,68,0,988,989,5,62,
  	0,0,989,991,3,136,68,0,990,988,1,0,0,0,991,994,1,0,0,0,992,990,1,0,0,
  	0,992,993,1,0,0,0,993,135,1,0,0,0,994,992,1,0,0,0,995,996,3,164,82,0,
  	996,997,3,114,57,0,997,998,5,63,0,0,998,999,3,86,43,0,999,1000,3,164,
  	82,0,1000,137,1,0,0,0,1001,1009,3,140,70,0,1002,1003,3,164,82,0,1003,
  	1004,5,62,0,0,1004,1005,3,164,82,0,1005,1006,3,140,70,0,1006,1008,1,0,
  	0,0,1007,1002,1,0,0,0,1008,1011,1,0,0,0,1009,1007,1,0,0,0,1009,1010,1,
  	0,0,0,1010,1020,1,0,0,0,1011,1009,1,0,0,0,1012,1013,3,164,82,0,1013,1014,
  	5,62,0,0,1014,1015,3,164,82,0,1015,1016,5,51,0,0,1016,1018,3,114,57,0,
  	1017,1019,3,120,60,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,1021,1,
  	0,0,0,1020,1012,1,0,0,0,1020,1021,1,0,0,0,1021,1028,1,0,0,0,1022,1023,
  	5,51,0,0,1023,1025,3,114,57,0,1024,1026,3,120,60,0,1025,1024,1,0,0,0,
  	1025,1026,1,0,0,0,1026,1028,1,0,0,0,1027,1001,1,0,0,0,1027,1022,1,0,0,
  	0,1028,139,1,0,0,0,1029,1033,3,114,57,0,1030,1033,3,90,45,0,1031,1033,
  	3,94,47,0,1032,1029,1,0,0,0,1032,1030,1,0,0,0,1032,1031,1,0,0,0,1033,
  	1035,1,0,0,0,1034,1036,3,120,60,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,
  	1036,1039,1,0,0,0,1037,1038,5,63,0,0,1038,1040,3,142,71,0,1039,1037,1,
  	0,0,0,1039,1040,1,0,0,0,1040,141,1,0,0,0,1041,1049,5,98,0,0,1042,1049,
  	7,2,0,0,1043,1049,3,114,57,0,1044,1045,5,58,0,0,1045,1049,5,59,0,0,1046,
  	1047,5,60,0,0,1047,1049,5,61,0,0,1048,1041,1,0,0,0,1048,1042,1,0,0,0,
  	1048,1043,1,0,0,0,1048,1044,1,0,0,0,1048,1046,1,0,0,0,1049,143,1,0,0,
  	0,1050,1056,3,146,73,0,1051,1052,3,162,81,0,1052,1053,3,146,73,0,1053,
  	1055,1,0,0,0,1054,1051,1,0,0,0,1055,1058,1,0,0,0,1056,1054,1,0,0,0,1056,
  	1057,1,0,0,0,1057,145,1,0,0,0,1058,1056,1,0,0,0,1059,1062,3,148,74,0,
  	1060,1062,3,150,75,0,1061,1059,1,0,0,0,1061,1060,1,0,0,0,1062,147,1,0,
  	0,0,1063,1073,3,42,21,0,1064,1073,3,44,22,0,1065,1073,3,58,29,0,1066,
  	1073,3,60,30,0,1067,1073,3,86,43,0,1068,1073,3,88,44,0,1069,1073,3,112,
  	56,0,1070,1073,3,98,49,0,1071,1073,3,164,82,0,1072,1063,1,0,0,0,1072,
  	1064,1,0,0,0,1072,1065,1,0,0,0,1072,1066,1,0,0,0,1072,1067,1,0,0,0,1072,
  	1068,1,0,0,0,1072,1069,1,0,0,0,1072,1070,1,0,0,0,1072,1071,1,0,0,0,1073,
  	149,1,0,0,0,1074,1075,5,21,0,0,1075,1076,3,86,43,0,1076,151,1,0,0,0,1077,
  	1078,7,6,0,0,1078,153,1,0,0,0,1079,1080,7,7,0,0,1080,155,1,0,0,0,1081,
  	1089,5,91,0,0,1082,1089,5,94,0,0,1083,1089,5,95,0,0,1084,1085,5,10,0,
  	0,1085,1089,5,10,0,0,1086,1087,5,9,0,0,1087,1089,5,9,0,0,1088,1081,1,
  	0,0,0,1088,1082,1,0,0,0,1088,1083,1,0,0,0,1088,1084,1,0,0,0,1088,1086,
  	1,0,0,0,1089,157,1,0,0,0,1090,1091,7,8,0,0,1091,159,1,0,0,0,1092,1093,
  	7,9,0,0,1093,161,1,0,0,0,1094,1095,5,55,0,0,1095,163,1,0,0,0,1096,1098,
  	3,162,81,0,1097,1096,1,0,0,0,1098,1101,1,0,0,0,1099,1097,1,0,0,0,1099,
  	1100,1,0,0,0,1100,165,1,0,0,0,1101,1099,1,0,0,0,117,175,194,198,204,215,
  	233,236,239,246,251,257,265,273,275,281,292,297,300,304,308,315,322,332,
  	343,353,361,363,370,381,387,391,394,400,407,412,418,426,429,435,442,447,
  	453,459,470,476,481,486,492,495,501,507,512,519,524,535,547,557,562,571,
  	576,586,588,599,605,615,620,641,654,659,671,673,699,701,709,723,733,739,
  	753,777,782,786,790,795,802,807,813,819,825,842,855,869,872,876,917,936,
  	938,946,951,958,965,977,982,992,1009,1018,1020,1025,1027,1032,1035,1039,
  	1048,1056,1061,1072,1088,1099
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  mavkaparserParserStaticData = staticData.release();
}

}

MavkaParser::MavkaParser(TokenStream *input) : MavkaParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

MavkaParser::MavkaParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  MavkaParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *mavkaparserParserStaticData->atn, mavkaparserParserStaticData->decisionToDFA, mavkaparserParserStaticData->sharedContextCache, options);
}

MavkaParser::~MavkaParser() {
  delete _interpreter;
}

const atn::ATN& MavkaParser::getATN() const {
  return *mavkaparserParserStaticData->atn;
}

std::string MavkaParser::getGrammarFileName() const {
  return "MavkaParser.g4";
}

const std::vector<std::string>& MavkaParser::getRuleNames() const {
  return mavkaparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& MavkaParser::getVocabulary() const {
  return mavkaparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MavkaParser::getSerializedATN() const {
  return mavkaparserParserStaticData->serializedATN;
}


//----------------- FileContext ------------------------------------------------------------------

MavkaParser::FileContext::FileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::FileContext::EOF() {
  return getToken(MavkaParser::EOF, 0);
}

MavkaParser::ProgramContext* MavkaParser::FileContext::program() {
  return getRuleContext<MavkaParser::ProgramContext>(0);
}


size_t MavkaParser::FileContext::getRuleIndex() const {
  return MavkaParser::RuleFile;
}

void MavkaParser::FileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile(this);
}

void MavkaParser::FileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile(this);
}


std::any MavkaParser::FileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFile(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::FileContext* MavkaParser::file() {
  FileContext *_localctx = _tracker.createInstance<FileContext>(_ctx, getState());
  enterRule(_localctx, 0, MavkaParser::RuleFile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(166);
    antlrcpp::downCast<FileContext *>(_localctx)->f_program = program();
    setState(167);
    match(MavkaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

MavkaParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Program_elementContext *> MavkaParser::ProgramContext::program_element() {
  return getRuleContexts<MavkaParser::Program_elementContext>();
}

MavkaParser::Program_elementContext* MavkaParser::ProgramContext::program_element(size_t i) {
  return getRuleContext<MavkaParser::Program_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::ProgramContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::ProgramContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::ProgramContext::getRuleIndex() const {
  return MavkaParser::RuleProgram;
}

void MavkaParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void MavkaParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}


std::any MavkaParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ProgramContext* MavkaParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 2, MavkaParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(169);
    program_element();
    setState(175);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::NL) {
      setState(170);
      nl();
      setState(171);
      program_element();
      setState(177);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Program_elementContext ------------------------------------------------------------------

MavkaParser::Program_elementContext::Program_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ModuleContext* MavkaParser::Program_elementContext::module() {
  return getRuleContext<MavkaParser::ModuleContext>(0);
}

MavkaParser::StructureContext* MavkaParser::Program_elementContext::structure() {
  return getRuleContext<MavkaParser::StructureContext>(0);
}

MavkaParser::MockupContext* MavkaParser::Program_elementContext::mockup() {
  return getRuleContext<MavkaParser::MockupContext>(0);
}

MavkaParser::DiiaContext* MavkaParser::Program_elementContext::diia() {
  return getRuleContext<MavkaParser::DiiaContext>(0);
}

MavkaParser::IfContext* MavkaParser::Program_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Program_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Program_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Program_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Program_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Program_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::EvalContext* MavkaParser::Program_elementContext::eval() {
  return getRuleContext<MavkaParser::EvalContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Program_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Program_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::TakeContext* MavkaParser::Program_elementContext::take() {
  return getRuleContext<MavkaParser::TakeContext>(0);
}

MavkaParser::GiveContext* MavkaParser::Program_elementContext::give() {
  return getRuleContext<MavkaParser::GiveContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Program_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Program_elementContext::getRuleIndex() const {
  return MavkaParser::RuleProgram_element;
}

void MavkaParser::Program_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram_element(this);
}

void MavkaParser::Program_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram_element(this);
}


std::any MavkaParser::Program_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitProgram_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Program_elementContext* MavkaParser::program_element() {
  Program_elementContext *_localctx = _tracker.createInstance<Program_elementContext>(_ctx, getState());
  enterRule(_localctx, 4, MavkaParser::RuleProgram_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(194);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(178);
      module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(179);
      structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(180);
      mockup();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(181);
      diia();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(182);
      if_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(183);
      each();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(184);
      while_();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(185);
      try_();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(186);
      expr();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(187);
      throw_();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(188);
      eval();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(189);
      wait_assign();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(190);
      assign();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(191);
      take();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(192);
      give();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(193);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleContext ------------------------------------------------------------------

MavkaParser::ModuleContext::ModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::ModuleContext::MODULE() {
  return getToken(MavkaParser::MODULE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::ModuleContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::ModuleContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

MavkaParser::NlsContext* MavkaParser::ModuleContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}

tree::TerminalNode* MavkaParser::ModuleContext::END() {
  return getToken(MavkaParser::END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::ModuleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Module_bodyContext* MavkaParser::ModuleContext::module_body() {
  return getRuleContext<MavkaParser::Module_bodyContext>(0);
}


size_t MavkaParser::ModuleContext::getRuleIndex() const {
  return MavkaParser::RuleModule;
}

void MavkaParser::ModuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule(this);
}

void MavkaParser::ModuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule(this);
}


std::any MavkaParser::ModuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ModuleContext* MavkaParser::module() {
  ModuleContext *_localctx = _tracker.createInstance<ModuleContext>(_ctx, getState());
  enterRule(_localctx, 6, MavkaParser::RuleModule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(196);
    match(MavkaParser::MODULE);
    setState(198);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KID

    || _la == MavkaParser::ID) {
      setState(197);
      antlrcpp::downCast<ModuleContext *>(_localctx)->m_name = identifier();
    }
    setState(200);
    nl();
    setState(204);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      setState(201);
      antlrcpp::downCast<ModuleContext *>(_localctx)->m_body = module_body();
      setState(202);
      nl();
      break;
    }

    default:
      break;
    }
    setState(206);
    nls();
    setState(207);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_bodyContext ------------------------------------------------------------------

MavkaParser::Module_bodyContext::Module_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Module_body_elementContext *> MavkaParser::Module_bodyContext::module_body_element() {
  return getRuleContexts<MavkaParser::Module_body_elementContext>();
}

MavkaParser::Module_body_elementContext* MavkaParser::Module_bodyContext::module_body_element(size_t i) {
  return getRuleContext<MavkaParser::Module_body_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Module_bodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Module_bodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Module_bodyContext::getRuleIndex() const {
  return MavkaParser::RuleModule_body;
}

void MavkaParser::Module_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_body(this);
}

void MavkaParser::Module_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_body(this);
}


std::any MavkaParser::Module_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule_body(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Module_bodyContext* MavkaParser::module_body() {
  Module_bodyContext *_localctx = _tracker.createInstance<Module_bodyContext>(_ctx, getState());
  enterRule(_localctx, 8, MavkaParser::RuleModule_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(209);
    module_body_element();
    setState(215);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(210);
        nl();
        setState(211);
        module_body_element(); 
      }
      setState(217);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_body_elementContext ------------------------------------------------------------------

MavkaParser::Module_body_elementContext::Module_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ModuleContext* MavkaParser::Module_body_elementContext::module() {
  return getRuleContext<MavkaParser::ModuleContext>(0);
}

MavkaParser::StructureContext* MavkaParser::Module_body_elementContext::structure() {
  return getRuleContext<MavkaParser::StructureContext>(0);
}

MavkaParser::MockupContext* MavkaParser::Module_body_elementContext::mockup() {
  return getRuleContext<MavkaParser::MockupContext>(0);
}

MavkaParser::DiiaContext* MavkaParser::Module_body_elementContext::diia() {
  return getRuleContext<MavkaParser::DiiaContext>(0);
}

MavkaParser::IfContext* MavkaParser::Module_body_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Module_body_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Module_body_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Module_body_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Module_body_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Module_body_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::EvalContext* MavkaParser::Module_body_elementContext::eval() {
  return getRuleContext<MavkaParser::EvalContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Module_body_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Module_body_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::GiveContext* MavkaParser::Module_body_elementContext::give() {
  return getRuleContext<MavkaParser::GiveContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Module_body_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Module_body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleModule_body_element;
}

void MavkaParser::Module_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_body_element(this);
}

void MavkaParser::Module_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_body_element(this);
}


std::any MavkaParser::Module_body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule_body_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Module_body_elementContext* MavkaParser::module_body_element() {
  Module_body_elementContext *_localctx = _tracker.createInstance<Module_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 10, MavkaParser::RuleModule_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(233);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(218);
      module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(219);
      structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(220);
      mockup();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(221);
      diia();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(222);
      if_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(223);
      each();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(224);
      while_();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(225);
      try_();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(226);
      expr();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(227);
      throw_();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(228);
      eval();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(229);
      wait_assign();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(230);
      assign();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(231);
      give();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(232);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Method_declarationContext ------------------------------------------------------------------

MavkaParser::Method_declarationContext::Method_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Method_declarationContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::Method_declarationContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Method_declarationContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Method_declarationContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Method_declarationContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Method_declarationContext::SMALLER() {
  return getToken(MavkaParser::SMALLER, 0);
}

tree::TerminalNode* MavkaParser::Method_declarationContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Method_declarationContext::ASYNC() {
  return getToken(MavkaParser::ASYNC, 0);
}

tree::TerminalNode* MavkaParser::Method_declarationContext::SPEC() {
  return getToken(MavkaParser::SPEC, 0);
}

MavkaParser::GenericsContext* MavkaParser::Method_declarationContext::generics() {
  return getRuleContext<MavkaParser::GenericsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::Method_declarationContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::Method_declarationContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}


size_t MavkaParser::Method_declarationContext::getRuleIndex() const {
  return MavkaParser::RuleMethod_declaration;
}

void MavkaParser::Method_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethod_declaration(this);
}

void MavkaParser::Method_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethod_declaration(this);
}


std::any MavkaParser::Method_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMethod_declaration(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Method_declarationContext* MavkaParser::method_declaration() {
  Method_declarationContext *_localctx = _tracker.createInstance<Method_declarationContext>(_ctx, getState());
  enterRule(_localctx, 12, MavkaParser::RuleMethod_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(236);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ASYNC) {
      setState(235);
      antlrcpp::downCast<Method_declarationContext *>(_localctx)->md_async = match(MavkaParser::ASYNC);
    }
    setState(239);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::SPEC) {
      setState(238);
      antlrcpp::downCast<Method_declarationContext *>(_localctx)->md_static = match(MavkaParser::SPEC);
    }
    setState(241);
    antlrcpp::downCast<Method_declarationContext *>(_localctx)->md_name = identifier();
    setState(246);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::SMALLER) {
      setState(242);
      match(MavkaParser::SMALLER);
      setState(243);
      antlrcpp::downCast<Method_declarationContext *>(_localctx)->md_generics = generics();
      setState(244);
      match(MavkaParser::GREATER);
    }
    setState(248);
    match(MavkaParser::OPEN_PAREN);

    setState(249);
    nls();
    setState(251);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 70368744178309) != 0)) {
      setState(250);
      antlrcpp::downCast<Method_declarationContext *>(_localctx)->md_params = params();
    }
    setState(253);
    nls();
    setState(255);
    match(MavkaParser::CLOSE_PAREN);
    setState(257);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 53) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 53)) & 17592186044545) != 0)) {
      setState(256);
      antlrcpp::downCast<Method_declarationContext *>(_localctx)->md_type = type_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureContext ------------------------------------------------------------------

MavkaParser::StructureContext::StructureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::StructureContext::STRUCTURE() {
  return getToken(MavkaParser::STRUCTURE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::StructureContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::StructureContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

MavkaParser::NlsContext* MavkaParser::StructureContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}

tree::TerminalNode* MavkaParser::StructureContext::END() {
  return getToken(MavkaParser::END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::StructureContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> MavkaParser::StructureContext::SMALLER() {
  return getTokens(MavkaParser::SMALLER);
}

tree::TerminalNode* MavkaParser::StructureContext::SMALLER(size_t i) {
  return getToken(MavkaParser::SMALLER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::StructureContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::StructureContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}

tree::TerminalNode* MavkaParser::StructureContext::IS() {
  return getToken(MavkaParser::IS, 0);
}

std::vector<MavkaParser::GenericsContext *> MavkaParser::StructureContext::generics() {
  return getRuleContexts<MavkaParser::GenericsContext>();
}

MavkaParser::GenericsContext* MavkaParser::StructureContext::generics(size_t i) {
  return getRuleContext<MavkaParser::GenericsContext>(i);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::StructureContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::Structure_elementsContext* MavkaParser::StructureContext::structure_elements() {
  return getRuleContext<MavkaParser::Structure_elementsContext>(0);
}


size_t MavkaParser::StructureContext::getRuleIndex() const {
  return MavkaParser::RuleStructure;
}

void MavkaParser::StructureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure(this);
}

void MavkaParser::StructureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure(this);
}


std::any MavkaParser::StructureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::StructureContext* MavkaParser::structure() {
  StructureContext *_localctx = _tracker.createInstance<StructureContext>(_ctx, getState());
  enterRule(_localctx, 14, MavkaParser::RuleStructure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(259);
    match(MavkaParser::STRUCTURE);
    setState(260);
    antlrcpp::downCast<StructureContext *>(_localctx)->s_name = identifier();
    setState(265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::SMALLER) {
      setState(261);
      match(MavkaParser::SMALLER);
      setState(262);
      antlrcpp::downCast<StructureContext *>(_localctx)->s_generics = generics();
      setState(263);
      match(MavkaParser::GREATER);
    }
    setState(275);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::IS) {
      setState(267);
      match(MavkaParser::IS);
      setState(268);
      antlrcpp::downCast<StructureContext *>(_localctx)->s_parent = super_identifiers_chain(0);
      setState(273);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::SMALLER) {
        setState(269);
        match(MavkaParser::SMALLER);
        setState(270);
        antlrcpp::downCast<StructureContext *>(_localctx)->s_parent_generics = generics();
        setState(271);
        match(MavkaParser::GREATER);
      }
    }
    setState(277);
    nl();
    setState(281);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
    case 1: {
      setState(278);
      antlrcpp::downCast<StructureContext *>(_localctx)->s_elements = structure_elements();
      setState(279);
      nl();
      break;
    }

    default:
      break;
    }
    setState(283);
    nls();
    setState(284);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_elementsContext ------------------------------------------------------------------

MavkaParser::Structure_elementsContext::Structure_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Structure_elementContext *> MavkaParser::Structure_elementsContext::structure_element() {
  return getRuleContexts<MavkaParser::Structure_elementContext>();
}

MavkaParser::Structure_elementContext* MavkaParser::Structure_elementsContext::structure_element(size_t i) {
  return getRuleContext<MavkaParser::Structure_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Structure_elementsContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Structure_elementsContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Structure_elementsContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_elements;
}

void MavkaParser::Structure_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_elements(this);
}

void MavkaParser::Structure_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_elements(this);
}


std::any MavkaParser::Structure_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_elements(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_elementsContext* MavkaParser::structure_elements() {
  Structure_elementsContext *_localctx = _tracker.createInstance<Structure_elementsContext>(_ctx, getState());
  enterRule(_localctx, 16, MavkaParser::RuleStructure_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(286);
    structure_element();
    setState(292);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(287);
        nl();
        setState(288);
        structure_element(); 
      }
      setState(294);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_elementContext ------------------------------------------------------------------

MavkaParser::Structure_elementContext::Structure_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Structure_paramContext* MavkaParser::Structure_elementContext::structure_param() {
  return getRuleContext<MavkaParser::Structure_paramContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Structure_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Structure_elementContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_element;
}

void MavkaParser::Structure_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_element(this);
}

void MavkaParser::Structure_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_element(this);
}


std::any MavkaParser::Structure_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_elementContext* MavkaParser::structure_element() {
  Structure_elementContext *_localctx = _tracker.createInstance<Structure_elementContext>(_ctx, getState());
  enterRule(_localctx, 18, MavkaParser::RuleStructure_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(297);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::SPEC:
      case MavkaParser::KID:
      case MavkaParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(295);
        structure_param();
        break;
      }

      case MavkaParser::NL: {
        enterOuterAlt(_localctx, 2);
        setState(296);
        nls();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_paramContext ------------------------------------------------------------------

MavkaParser::Structure_paramContext::Structure_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Structure_paramContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Structure_paramContext::ASSIGN() {
  return getToken(MavkaParser::ASSIGN, 0);
}

tree::TerminalNode* MavkaParser::Structure_paramContext::SPEC() {
  return getToken(MavkaParser::SPEC, 0);
}

MavkaParser::Type_valueContext* MavkaParser::Structure_paramContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::Param_valueContext* MavkaParser::Structure_paramContext::param_value() {
  return getRuleContext<MavkaParser::Param_valueContext>(0);
}


size_t MavkaParser::Structure_paramContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_param;
}

void MavkaParser::Structure_paramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_param(this);
}

void MavkaParser::Structure_paramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_param(this);
}


std::any MavkaParser::Structure_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_param(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_paramContext* MavkaParser::structure_param() {
  Structure_paramContext *_localctx = _tracker.createInstance<Structure_paramContext>(_ctx, getState());
  enterRule(_localctx, 20, MavkaParser::RuleStructure_param);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(300);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::SPEC) {
      setState(299);
      antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_static = match(MavkaParser::SPEC);
    }
    setState(302);
    antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_name = identifier();
    setState(304);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 53) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 53)) & 17592186044545) != 0)) {
      setState(303);
      antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_type = type_value();
    }
    setState(308);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ASSIGN) {
      setState(306);
      match(MavkaParser::ASSIGN);
      setState(307);
      antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_value = param_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericsContext ------------------------------------------------------------------

MavkaParser::GenericsContext::GenericsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::GenericsContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::GenericsContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::GenericsContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::GenericsContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::GenericsContext::getRuleIndex() const {
  return MavkaParser::RuleGenerics;
}

void MavkaParser::GenericsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenerics(this);
}

void MavkaParser::GenericsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenerics(this);
}


std::any MavkaParser::GenericsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGenerics(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::GenericsContext* MavkaParser::generics() {
  GenericsContext *_localctx = _tracker.createInstance<GenericsContext>(_ctx, getState());
  enterRule(_localctx, 22, MavkaParser::RuleGenerics);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(310);
    identifier();
    setState(315);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMMA) {
      setState(311);
      match(MavkaParser::COMMA);
      setState(312);
      identifier();
      setState(317);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MockupContext ------------------------------------------------------------------

MavkaParser::MockupContext::MockupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Mockup_moduleContext* MavkaParser::MockupContext::mockup_module() {
  return getRuleContext<MavkaParser::Mockup_moduleContext>(0);
}

MavkaParser::Mockup_structureContext* MavkaParser::MockupContext::mockup_structure() {
  return getRuleContext<MavkaParser::Mockup_structureContext>(0);
}

MavkaParser::Mockup_diiaContext* MavkaParser::MockupContext::mockup_diia() {
  return getRuleContext<MavkaParser::Mockup_diiaContext>(0);
}

MavkaParser::Mockup_subjectContext* MavkaParser::MockupContext::mockup_subject() {
  return getRuleContext<MavkaParser::Mockup_subjectContext>(0);
}


size_t MavkaParser::MockupContext::getRuleIndex() const {
  return MavkaParser::RuleMockup;
}

void MavkaParser::MockupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup(this);
}

void MavkaParser::MockupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup(this);
}


std::any MavkaParser::MockupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::MockupContext* MavkaParser::mockup() {
  MockupContext *_localctx = _tracker.createInstance<MockupContext>(_ctx, getState());
  enterRule(_localctx, 24, MavkaParser::RuleMockup);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(322);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(318);
      mockup_module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(319);
      mockup_structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(320);
      mockup_diia();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(321);
      mockup_subject();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_moduleContext ------------------------------------------------------------------

MavkaParser::Mockup_moduleContext::Mockup_moduleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::MOCKUP() {
  return getToken(MavkaParser::MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::MODULE() {
  return getToken(MavkaParser::MODULE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_moduleContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_moduleContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mockup_moduleContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mockup_moduleContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::END() {
  return getToken(MavkaParser::END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_moduleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Mockup_module_bodyContext* MavkaParser::Mockup_moduleContext::mockup_module_body() {
  return getRuleContext<MavkaParser::Mockup_module_bodyContext>(0);
}


size_t MavkaParser::Mockup_moduleContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_module;
}

void MavkaParser::Mockup_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_module(this);
}

void MavkaParser::Mockup_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_module(this);
}


std::any MavkaParser::Mockup_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_module(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_moduleContext* MavkaParser::mockup_module() {
  Mockup_moduleContext *_localctx = _tracker.createInstance<Mockup_moduleContext>(_ctx, getState());
  enterRule(_localctx, 26, MavkaParser::RuleMockup_module);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(324);
    match(MavkaParser::MOCKUP);
    setState(325);
    match(MavkaParser::MODULE);
    setState(326);
    antlrcpp::downCast<Mockup_moduleContext *>(_localctx)->mm_name = identifier();
    setState(327);
    nl();
    setState(328);
    nls();
    setState(332);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::MOCKUP) {
      setState(329);
      antlrcpp::downCast<Mockup_moduleContext *>(_localctx)->mm_elements = mockup_module_body();
      setState(330);
      nl();
    }
    setState(334);
    nls();
    setState(335);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_module_bodyContext ------------------------------------------------------------------

MavkaParser::Mockup_module_bodyContext::Mockup_module_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::MockupContext *> MavkaParser::Mockup_module_bodyContext::mockup() {
  return getRuleContexts<MavkaParser::MockupContext>();
}

MavkaParser::MockupContext* MavkaParser::Mockup_module_bodyContext::mockup(size_t i) {
  return getRuleContext<MavkaParser::MockupContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_module_bodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_module_bodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Mockup_module_bodyContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_module_body;
}

void MavkaParser::Mockup_module_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_module_body(this);
}

void MavkaParser::Mockup_module_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_module_body(this);
}


std::any MavkaParser::Mockup_module_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_module_body(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_module_bodyContext* MavkaParser::mockup_module_body() {
  Mockup_module_bodyContext *_localctx = _tracker.createInstance<Mockup_module_bodyContext>(_ctx, getState());
  enterRule(_localctx, 28, MavkaParser::RuleMockup_module_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(337);
    mockup();
    setState(343);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(338);
        nl();
        setState(339);
        mockup(); 
      }
      setState(345);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_structureContext ------------------------------------------------------------------

MavkaParser::Mockup_structureContext::Mockup_structureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::MOCKUP() {
  return getToken(MavkaParser::MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::STRUCTURE() {
  return getToken(MavkaParser::STRUCTURE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_structureContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_structureContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mockup_structureContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mockup_structureContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::END() {
  return getToken(MavkaParser::END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_structureContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> MavkaParser::Mockup_structureContext::SMALLER() {
  return getTokens(MavkaParser::SMALLER);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::SMALLER(size_t i) {
  return getToken(MavkaParser::SMALLER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Mockup_structureContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::IS() {
  return getToken(MavkaParser::IS, 0);
}

std::vector<MavkaParser::GenericsContext *> MavkaParser::Mockup_structureContext::generics() {
  return getRuleContexts<MavkaParser::GenericsContext>();
}

MavkaParser::GenericsContext* MavkaParser::Mockup_structureContext::generics(size_t i) {
  return getRuleContext<MavkaParser::GenericsContext>(i);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Mockup_structureContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::Mockup_structure_bodyContext* MavkaParser::Mockup_structureContext::mockup_structure_body() {
  return getRuleContext<MavkaParser::Mockup_structure_bodyContext>(0);
}


size_t MavkaParser::Mockup_structureContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_structure;
}

void MavkaParser::Mockup_structureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_structure(this);
}

void MavkaParser::Mockup_structureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_structure(this);
}


std::any MavkaParser::Mockup_structureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_structure(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_structureContext* MavkaParser::mockup_structure() {
  Mockup_structureContext *_localctx = _tracker.createInstance<Mockup_structureContext>(_ctx, getState());
  enterRule(_localctx, 30, MavkaParser::RuleMockup_structure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(346);
    match(MavkaParser::MOCKUP);
    setState(347);
    match(MavkaParser::STRUCTURE);
    setState(348);
    antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_name = identifier();
    setState(353);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::SMALLER) {
      setState(349);
      match(MavkaParser::SMALLER);
      setState(350);
      antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_generics = generics();
      setState(351);
      match(MavkaParser::GREATER);
    }
    setState(363);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::IS) {
      setState(355);
      match(MavkaParser::IS);
      setState(356);
      antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_parent = super_identifiers_chain(0);
      setState(361);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::SMALLER) {
        setState(357);
        match(MavkaParser::SMALLER);
        setState(358);
        antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_parent_generics = generics();
        setState(359);
        match(MavkaParser::GREATER);
      }
    }
    setState(365);
    nl();
    setState(366);
    nls();
    setState(370);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      setState(367);
      antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_elements = mockup_structure_body();
      setState(368);
      nl();
      break;
    }

    default:
      break;
    }
    setState(372);
    nls();
    setState(373);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_structure_bodyContext ------------------------------------------------------------------

MavkaParser::Mockup_structure_bodyContext::Mockup_structure_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Mockup_structure_body_elementContext *> MavkaParser::Mockup_structure_bodyContext::mockup_structure_body_element() {
  return getRuleContexts<MavkaParser::Mockup_structure_body_elementContext>();
}

MavkaParser::Mockup_structure_body_elementContext* MavkaParser::Mockup_structure_bodyContext::mockup_structure_body_element(size_t i) {
  return getRuleContext<MavkaParser::Mockup_structure_body_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_structure_bodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_structure_bodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Mockup_structure_bodyContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_structure_body;
}

void MavkaParser::Mockup_structure_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_structure_body(this);
}

void MavkaParser::Mockup_structure_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_structure_body(this);
}


std::any MavkaParser::Mockup_structure_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_structure_body(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_structure_bodyContext* MavkaParser::mockup_structure_body() {
  Mockup_structure_bodyContext *_localctx = _tracker.createInstance<Mockup_structure_bodyContext>(_ctx, getState());
  enterRule(_localctx, 32, MavkaParser::RuleMockup_structure_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(375);
    mockup_structure_body_element();
    setState(381);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(376);
        nl();
        setState(377);
        mockup_structure_body_element(); 
      }
      setState(383);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_structure_body_elementContext ------------------------------------------------------------------

MavkaParser::Mockup_structure_body_elementContext::Mockup_structure_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Structure_paramContext* MavkaParser::Mockup_structure_body_elementContext::structure_param() {
  return getRuleContext<MavkaParser::Structure_paramContext>(0);
}

MavkaParser::Method_declarationContext* MavkaParser::Mockup_structure_body_elementContext::method_declaration() {
  return getRuleContext<MavkaParser::Method_declarationContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Mockup_structure_body_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Mockup_structure_body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_structure_body_element;
}

void MavkaParser::Mockup_structure_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_structure_body_element(this);
}

void MavkaParser::Mockup_structure_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_structure_body_element(this);
}


std::any MavkaParser::Mockup_structure_body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_structure_body_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_structure_body_elementContext* MavkaParser::mockup_structure_body_element() {
  Mockup_structure_body_elementContext *_localctx = _tracker.createInstance<Mockup_structure_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 34, MavkaParser::RuleMockup_structure_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(387);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(384);
      structure_param();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(385);
      method_declaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(386);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_diiaContext ------------------------------------------------------------------

MavkaParser::Mockup_diiaContext::Mockup_diiaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::MOCKUP() {
  return getToken(MavkaParser::MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::DIIA() {
  return getToken(MavkaParser::DIIA, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::Mockup_diiaContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_diiaContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mockup_diiaContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mockup_diiaContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::SMALLER() {
  return getToken(MavkaParser::SMALLER, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::ASYNC() {
  return getToken(MavkaParser::ASYNC, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::SPEC() {
  return getToken(MavkaParser::SPEC, 0);
}

MavkaParser::GenericsContext* MavkaParser::Mockup_diiaContext::generics() {
  return getRuleContext<MavkaParser::GenericsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::Mockup_diiaContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::Mockup_diiaContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}


size_t MavkaParser::Mockup_diiaContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_diia;
}

void MavkaParser::Mockup_diiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_diia(this);
}

void MavkaParser::Mockup_diiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_diia(this);
}


std::any MavkaParser::Mockup_diiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_diia(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_diiaContext* MavkaParser::mockup_diia() {
  Mockup_diiaContext *_localctx = _tracker.createInstance<Mockup_diiaContext>(_ctx, getState());
  enterRule(_localctx, 36, MavkaParser::RuleMockup_diia);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(389);
    match(MavkaParser::MOCKUP);
    setState(391);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ASYNC) {
      setState(390);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_async = match(MavkaParser::ASYNC);
    }
    setState(394);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::SPEC) {
      setState(393);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_static = match(MavkaParser::SPEC);
    }
    setState(396);
    match(MavkaParser::DIIA);
    setState(400);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(397);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_structure = identifier();
      setState(398);
      match(MavkaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(402);
    antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_name = identifier();
    setState(407);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::SMALLER) {
      setState(403);
      match(MavkaParser::SMALLER);
      setState(404);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_generics = generics();
      setState(405);
      match(MavkaParser::GREATER);
    }
    setState(409);
    match(MavkaParser::OPEN_PAREN);

    setState(410);
    nls();
    setState(412);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 70368744178309) != 0)) {
      setState(411);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_params = params();
    }
    setState(414);
    nls();
    setState(416);
    match(MavkaParser::CLOSE_PAREN);
    setState(418);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 53) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 53)) & 17592186044545) != 0)) {
      setState(417);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_type = type_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_subjectContext ------------------------------------------------------------------

MavkaParser::Mockup_subjectContext::Mockup_subjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_subjectContext::MOCKUP() {
  return getToken(MavkaParser::MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_subjectContext::SUBJECT() {
  return getToken(MavkaParser::SUBJECT, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_subjectContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::Mockup_subjectContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::Mockup_subjectContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_subject;
}

void MavkaParser::Mockup_subjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_subject(this);
}

void MavkaParser::Mockup_subjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_subject(this);
}


std::any MavkaParser::Mockup_subjectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_subject(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_subjectContext* MavkaParser::mockup_subject() {
  Mockup_subjectContext *_localctx = _tracker.createInstance<Mockup_subjectContext>(_ctx, getState());
  enterRule(_localctx, 38, MavkaParser::RuleMockup_subject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(420);
    match(MavkaParser::MOCKUP);
    setState(421);
    match(MavkaParser::SUBJECT);
    setState(422);
    antlrcpp::downCast<Mockup_subjectContext *>(_localctx)->ms_name = identifier();
    setState(423);
    antlrcpp::downCast<Mockup_subjectContext *>(_localctx)->ms_type = type_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiiaContext ------------------------------------------------------------------

MavkaParser::DiiaContext::DiiaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::DiiaContext::DIIA() {
  return getToken(MavkaParser::DIIA, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::DiiaContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::DiiaContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::DiiaContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::DiiaContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::DiiaContext::END() {
  return getToken(MavkaParser::END, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::DiiaContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::DiiaContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

tree::TerminalNode* MavkaParser::DiiaContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::SMALLER() {
  return getToken(MavkaParser::SMALLER, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::ASYNC() {
  return getToken(MavkaParser::ASYNC, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::SPEC() {
  return getToken(MavkaParser::SPEC, 0);
}

MavkaParser::GenericsContext* MavkaParser::DiiaContext::generics() {
  return getRuleContext<MavkaParser::GenericsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::DiiaContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::BodyContext* MavkaParser::DiiaContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::DiiaContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}


size_t MavkaParser::DiiaContext::getRuleIndex() const {
  return MavkaParser::RuleDiia;
}

void MavkaParser::DiiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiia(this);
}

void MavkaParser::DiiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiia(this);
}


std::any MavkaParser::DiiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDiia(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::DiiaContext* MavkaParser::diia() {
  DiiaContext *_localctx = _tracker.createInstance<DiiaContext>(_ctx, getState());
  enterRule(_localctx, 40, MavkaParser::RuleDiia);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(426);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ASYNC) {
      setState(425);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_async = match(MavkaParser::ASYNC);
    }
    setState(429);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::SPEC) {
      setState(428);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_static = match(MavkaParser::SPEC);
    }
    setState(431);
    match(MavkaParser::DIIA);
    setState(435);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(432);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_structure = identifier();
      setState(433);
      match(MavkaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(437);
    antlrcpp::downCast<DiiaContext *>(_localctx)->d_name = identifier();
    setState(442);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::SMALLER) {
      setState(438);
      match(MavkaParser::SMALLER);
      setState(439);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_generics = generics();
      setState(440);
      match(MavkaParser::GREATER);
    }
    setState(444);
    match(MavkaParser::OPEN_PAREN);

    setState(445);
    nls();
    setState(447);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 70368744178309) != 0)) {
      setState(446);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_params = params();
    }
    setState(449);
    nls();
    setState(451);
    match(MavkaParser::CLOSE_PAREN);
    setState(453);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 53) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 53)) & 17592186044545) != 0)) {
      setState(452);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_type = type_value();
    }
    setState(455);
    nl();
    setState(459);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      setState(456);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_body = body();
      setState(457);
      nl();
      break;
    }

    default:
      break;
    }
    setState(461);
    nls();
    setState(462);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfContext ------------------------------------------------------------------

MavkaParser::IfContext::IfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::IfContext::IF() {
  return getToken(MavkaParser::IF, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::IfContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::IfContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

MavkaParser::ExprContext* MavkaParser::IfContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

std::vector<MavkaParser::BodyContext *> MavkaParser::IfContext::body() {
  return getRuleContexts<MavkaParser::BodyContext>();
}

MavkaParser::BodyContext* MavkaParser::IfContext::body(size_t i) {
  return getRuleContext<MavkaParser::BodyContext>(i);
}

tree::TerminalNode* MavkaParser::IfContext::END() {
  return getToken(MavkaParser::END, 0);
}

tree::TerminalNode* MavkaParser::IfContext::ELSE() {
  return getToken(MavkaParser::ELSE, 0);
}

MavkaParser::IfContext* MavkaParser::IfContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}


size_t MavkaParser::IfContext::getRuleIndex() const {
  return MavkaParser::RuleIf;
}

void MavkaParser::IfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf(this);
}

void MavkaParser::IfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf(this);
}


std::any MavkaParser::IfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIf(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::IfContext* MavkaParser::if_() {
  IfContext *_localctx = _tracker.createInstance<IfContext>(_ctx, getState());
  enterRule(_localctx, 42, MavkaParser::RuleIf);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(464);
    match(MavkaParser::IF);
    setState(465);
    antlrcpp::downCast<IfContext *>(_localctx)->i_value = expr();
    setState(466);
    nl();
    setState(470);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1702923610791876628) != 0) || ((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 436601027) != 0)) {
      setState(467);
      antlrcpp::downCast<IfContext *>(_localctx)->i_body = body();
      setState(468);
      nl();
    }
    setState(481);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      setState(476);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::ELSE) {
        setState(472);
        match(MavkaParser::ELSE);
        setState(473);
        antlrcpp::downCast<IfContext *>(_localctx)->i_else_body = body();
        setState(474);
        nl();
      }
      setState(478);
      match(MavkaParser::END);
      break;
    }

    case 2: {
      setState(479);
      match(MavkaParser::ELSE);
      setState(480);
      antlrcpp::downCast<IfContext *>(_localctx)->i_else_if = if_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EachContext ------------------------------------------------------------------

MavkaParser::EachContext::EachContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::EachContext::FOR() {
  return getToken(MavkaParser::FOR, 0);
}

tree::TerminalNode* MavkaParser::EachContext::AS() {
  return getToken(MavkaParser::AS, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::EachContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::EachContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::EachContext::END() {
  return getToken(MavkaParser::END, 0);
}

MavkaParser::ExprContext* MavkaParser::EachContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::FromtoContext* MavkaParser::EachContext::fromto() {
  return getRuleContext<MavkaParser::FromtoContext>(0);
}

tree::TerminalNode* MavkaParser::EachContext::COMMA() {
  return getToken(MavkaParser::COMMA, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::EachContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::EachContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

MavkaParser::BodyContext* MavkaParser::EachContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}


size_t MavkaParser::EachContext::getRuleIndex() const {
  return MavkaParser::RuleEach;
}

void MavkaParser::EachContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEach(this);
}

void MavkaParser::EachContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEach(this);
}


std::any MavkaParser::EachContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitEach(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::EachContext* MavkaParser::each() {
  EachContext *_localctx = _tracker.createInstance<EachContext>(_ctx, getState());
  enterRule(_localctx, 44, MavkaParser::RuleEach);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(483);
    match(MavkaParser::FOR);
    setState(486);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      setState(484);
      antlrcpp::downCast<EachContext *>(_localctx)->e_iterator = expr();
      break;
    }

    case 2: {
      setState(485);
      antlrcpp::downCast<EachContext *>(_localctx)->e_fromto = fromto();
      break;
    }

    default:
      break;
    }
    setState(488);
    match(MavkaParser::AS);
    setState(492);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      setState(489);
      antlrcpp::downCast<EachContext *>(_localctx)->e_key_name = identifier();
      setState(490);
      match(MavkaParser::COMMA);
      break;
    }

    default:
      break;
    }
    setState(495);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KID

    || _la == MavkaParser::ID) {
      setState(494);
      antlrcpp::downCast<EachContext *>(_localctx)->e_name = identifier();
    }
    setState(497);
    nl();
    setState(501);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1702923610791876628) != 0) || ((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 436601027) != 0)) {
      setState(498);
      antlrcpp::downCast<EachContext *>(_localctx)->e_body = body();
      setState(499);
      nl();
    }
    setState(503);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromtoContext ------------------------------------------------------------------

MavkaParser::FromtoContext::FromtoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Fromto_simpleContext* MavkaParser::FromtoContext::fromto_simple() {
  return getRuleContext<MavkaParser::Fromto_simpleContext>(0);
}

MavkaParser::Fromto_complexContext* MavkaParser::FromtoContext::fromto_complex() {
  return getRuleContext<MavkaParser::Fromto_complexContext>(0);
}


size_t MavkaParser::FromtoContext::getRuleIndex() const {
  return MavkaParser::RuleFromto;
}

void MavkaParser::FromtoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto(this);
}

void MavkaParser::FromtoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto(this);
}


std::any MavkaParser::FromtoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::FromtoContext* MavkaParser::fromto() {
  FromtoContext *_localctx = _tracker.createInstance<FromtoContext>(_ctx, getState());
  enterRule(_localctx, 46, MavkaParser::RuleFromto);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(507);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(505);
      fromto_simple();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(506);
      fromto_complex();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_simpleContext ------------------------------------------------------------------

MavkaParser::Fromto_simpleContext::Fromto_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Fromto_simpleContext::FROMTO() {
  return getToken(MavkaParser::FROMTO, 0);
}

std::vector<MavkaParser::Fromto_valueContext *> MavkaParser::Fromto_simpleContext::fromto_value() {
  return getRuleContexts<MavkaParser::Fromto_valueContext>();
}

MavkaParser::Fromto_valueContext* MavkaParser::Fromto_simpleContext::fromto_value(size_t i) {
  return getRuleContext<MavkaParser::Fromto_valueContext>(i);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::Fromto_simpleContext::fromto_to_symbol() {
  return getRuleContext<MavkaParser::Fromto_to_symbolContext>(0);
}


size_t MavkaParser::Fromto_simpleContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_simple;
}

void MavkaParser::Fromto_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_simple(this);
}

void MavkaParser::Fromto_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_simple(this);
}


std::any MavkaParser::Fromto_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_simple(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_simpleContext* MavkaParser::fromto_simple() {
  Fromto_simpleContext *_localctx = _tracker.createInstance<Fromto_simpleContext>(_ctx, getState());
  enterRule(_localctx, 48, MavkaParser::RuleFromto_simple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(509);
    antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_from = fromto_value();
    setState(510);
    match(MavkaParser::FROMTO);
    setState(512);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2016) != 0)) {
      setState(511);
      antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_to_symbol = fromto_to_symbol();
    }
    setState(514);
    antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_to = fromto_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_complexContext ------------------------------------------------------------------

MavkaParser::Fromto_complexContext::Fromto_complexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_complexContext::FROMTO() {
  return getTokens(MavkaParser::FROMTO);
}

tree::TerminalNode* MavkaParser::Fromto_complexContext::FROMTO(size_t i) {
  return getToken(MavkaParser::FROMTO, i);
}

std::vector<MavkaParser::Fromto_valueContext *> MavkaParser::Fromto_complexContext::fromto_value() {
  return getRuleContexts<MavkaParser::Fromto_valueContext>();
}

MavkaParser::Fromto_valueContext* MavkaParser::Fromto_complexContext::fromto_value(size_t i) {
  return getRuleContext<MavkaParser::Fromto_valueContext>(i);
}

MavkaParser::Fromto_middle_symbolContext* MavkaParser::Fromto_complexContext::fromto_middle_symbol() {
  return getRuleContext<MavkaParser::Fromto_middle_symbolContext>(0);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::Fromto_complexContext::fromto_to_symbol() {
  return getRuleContext<MavkaParser::Fromto_to_symbolContext>(0);
}


size_t MavkaParser::Fromto_complexContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_complex;
}

void MavkaParser::Fromto_complexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_complex(this);
}

void MavkaParser::Fromto_complexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_complex(this);
}


std::any MavkaParser::Fromto_complexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_complex(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_complexContext* MavkaParser::fromto_complex() {
  Fromto_complexContext *_localctx = _tracker.createInstance<Fromto_complexContext>(_ctx, getState());
  enterRule(_localctx, 50, MavkaParser::RuleFromto_complex);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(516);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_from = fromto_value();
    setState(517);
    match(MavkaParser::FROMTO);
    setState(519);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 1807) != 0)) {
      setState(518);
      antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_middle_symbol = fromto_middle_symbol();
    }
    setState(521);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_middle = fromto_value();
    setState(522);
    match(MavkaParser::FROMTO);
    setState(524);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2016) != 0)) {
      setState(523);
      antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_to_symbol = fromto_to_symbol();
    }
    setState(526);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_to = fromto_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_valueContext ------------------------------------------------------------------

MavkaParser::Fromto_valueContext::Fromto_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::Fromto_valueContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_value;
}

void MavkaParser::Fromto_valueContext::copyFrom(Fromto_valueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Fromto_idContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::Fromto_idContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Fromto_idContext::Fromto_idContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_idContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_id(this);
}
void MavkaParser::Fromto_idContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_id(this);
}

std::any MavkaParser::Fromto_idContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_id(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Fromto_stringContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Fromto_stringContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

MavkaParser::Fromto_stringContext::Fromto_stringContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_string(this);
}
void MavkaParser::Fromto_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_string(this);
}

std::any MavkaParser::Fromto_stringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_string(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Fromto_numberContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Fromto_numberContext::NUMBER() {
  return getToken(MavkaParser::NUMBER, 0);
}

MavkaParser::Fromto_numberContext::Fromto_numberContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_numberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_number(this);
}
void MavkaParser::Fromto_numberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_number(this);
}

std::any MavkaParser::Fromto_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_number(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Fromto_nestedContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Fromto_nestedContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::Fromto_nestedContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::ExprContext* MavkaParser::Fromto_nestedContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::Fromto_nestedContext::Fromto_nestedContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_nestedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_nested(this);
}
void MavkaParser::Fromto_nestedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_nested(this);
}

std::any MavkaParser::Fromto_nestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_nested(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::Fromto_valueContext* MavkaParser::fromto_value() {
  Fromto_valueContext *_localctx = _tracker.createInstance<Fromto_valueContext>(_ctx, getState());
  enterRule(_localctx, 52, MavkaParser::RuleFromto_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(535);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::NUMBER: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_numberContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(528);
        match(MavkaParser::NUMBER);
        break;
      }

      case MavkaParser::STRING: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_stringContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(529);
        match(MavkaParser::STRING);
        break;
      }

      case MavkaParser::KID:
      case MavkaParser::ID: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_idContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(530);
        identifier();
        break;
      }

      case MavkaParser::OPEN_PAREN: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_nestedContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(531);
        match(MavkaParser::OPEN_PAREN);
        setState(532);
        antlrcpp::downCast<Fromto_nestedContext *>(_localctx)->fn_value = expr();
        setState(533);
        match(MavkaParser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_middle_symbolContext ------------------------------------------------------------------

MavkaParser::Fromto_middle_symbolContext::Fromto_middle_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::MUL() {
  return getToken(MavkaParser::MUL, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::DIV() {
  return getToken(MavkaParser::DIV, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::PERCENT() {
  return getToken(MavkaParser::PERCENT, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::DIVDIV() {
  return getToken(MavkaParser::DIVDIV, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::POW() {
  return getToken(MavkaParser::POW, 0);
}


size_t MavkaParser::Fromto_middle_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_middle_symbol;
}

void MavkaParser::Fromto_middle_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_middle_symbol(this);
}

void MavkaParser::Fromto_middle_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_middle_symbol(this);
}


std::any MavkaParser::Fromto_middle_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_middle_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_middle_symbolContext* MavkaParser::fromto_middle_symbol() {
  Fromto_middle_symbolContext *_localctx = _tracker.createInstance<Fromto_middle_symbolContext>(_ctx, getState());
  enterRule(_localctx, 54, MavkaParser::RuleFromto_middle_symbol);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(537);
    _la = _input->LA(1);
    if (!(((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 1807) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_to_symbolContext ------------------------------------------------------------------

MavkaParser::Fromto_to_symbolContext::Fromto_to_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::NOT_EQ() {
  return getToken(MavkaParser::NOT_EQ, 0);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::EQ() {
  return getToken(MavkaParser::EQ, 0);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::SMALLER() {
  return getToken(MavkaParser::SMALLER, 0);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::GREATER_EQ() {
  return getToken(MavkaParser::GREATER_EQ, 0);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::SMALLER_EQ() {
  return getToken(MavkaParser::SMALLER_EQ, 0);
}


size_t MavkaParser::Fromto_to_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_to_symbol;
}

void MavkaParser::Fromto_to_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_to_symbol(this);
}

void MavkaParser::Fromto_to_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_to_symbol(this);
}


std::any MavkaParser::Fromto_to_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_to_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::fromto_to_symbol() {
  Fromto_to_symbolContext *_localctx = _tracker.createInstance<Fromto_to_symbolContext>(_ctx, getState());
  enterRule(_localctx, 56, MavkaParser::RuleFromto_to_symbol);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(539);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2016) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileContext ------------------------------------------------------------------

MavkaParser::WhileContext::WhileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::WhileContext::WHILE() {
  return getToken(MavkaParser::WHILE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::WhileContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::WhileContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::WhileContext::END() {
  return getToken(MavkaParser::END, 0);
}

MavkaParser::ExprContext* MavkaParser::WhileContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::BodyContext* MavkaParser::WhileContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}


size_t MavkaParser::WhileContext::getRuleIndex() const {
  return MavkaParser::RuleWhile;
}

void MavkaParser::WhileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhile(this);
}

void MavkaParser::WhileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhile(this);
}


std::any MavkaParser::WhileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWhile(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::WhileContext* MavkaParser::while_() {
  WhileContext *_localctx = _tracker.createInstance<WhileContext>(_ctx, getState());
  enterRule(_localctx, 58, MavkaParser::RuleWhile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(541);
    match(MavkaParser::WHILE);
    setState(542);
    antlrcpp::downCast<WhileContext *>(_localctx)->w_value = expr();
    setState(543);
    nl();
    setState(547);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1702923610791876628) != 0) || ((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 436601027) != 0)) {
      setState(544);
      antlrcpp::downCast<WhileContext *>(_localctx)->w_body = body();
      setState(545);
      nl();
    }
    setState(549);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryContext ------------------------------------------------------------------

MavkaParser::TryContext::TryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::TryContext::TRY() {
  return getToken(MavkaParser::TRY, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::TryContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::TryContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::TryContext::CATCH() {
  return getToken(MavkaParser::CATCH, 0);
}

tree::TerminalNode* MavkaParser::TryContext::END() {
  return getToken(MavkaParser::END, 0);
}

std::vector<MavkaParser::BodyContext *> MavkaParser::TryContext::body() {
  return getRuleContexts<MavkaParser::BodyContext>();
}

MavkaParser::BodyContext* MavkaParser::TryContext::body(size_t i) {
  return getRuleContext<MavkaParser::BodyContext>(i);
}

MavkaParser::IdentifierContext* MavkaParser::TryContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}


size_t MavkaParser::TryContext::getRuleIndex() const {
  return MavkaParser::RuleTry;
}

void MavkaParser::TryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry(this);
}

void MavkaParser::TryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry(this);
}


std::any MavkaParser::TryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTry(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::TryContext* MavkaParser::try_() {
  TryContext *_localctx = _tracker.createInstance<TryContext>(_ctx, getState());
  enterRule(_localctx, 60, MavkaParser::RuleTry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(551);
    match(MavkaParser::TRY);
    setState(552);
    nl();
    setState(553);
    antlrcpp::downCast<TryContext *>(_localctx)->t_body = body();
    setState(554);
    nl();
    setState(555);
    match(MavkaParser::CATCH);
    setState(557);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
    case 1: {
      setState(556);
      antlrcpp::downCast<TryContext *>(_localctx)->tc_name = identifier();
      break;
    }

    default:
      break;
    }
    setState(562);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1702923610791876628) != 0) || ((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 436601027) != 0)) {
      setState(559);
      antlrcpp::downCast<TryContext *>(_localctx)->tc_body = body();
      setState(560);
      nl();
    }
    setState(564);
    match(MavkaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvalContext ------------------------------------------------------------------

MavkaParser::EvalContext::EvalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::EvalContext::EVAL() {
  return getToken(MavkaParser::EVAL, 0);
}

MavkaParser::StringContext* MavkaParser::EvalContext::string() {
  return getRuleContext<MavkaParser::StringContext>(0);
}


size_t MavkaParser::EvalContext::getRuleIndex() const {
  return MavkaParser::RuleEval;
}

void MavkaParser::EvalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEval(this);
}

void MavkaParser::EvalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEval(this);
}


std::any MavkaParser::EvalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitEval(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::EvalContext* MavkaParser::eval() {
  EvalContext *_localctx = _tracker.createInstance<EvalContext>(_ctx, getState());
  enterRule(_localctx, 62, MavkaParser::RuleEval);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(566);
    match(MavkaParser::EVAL);
    setState(567);
    antlrcpp::downCast<EvalContext *>(_localctx)->e_value = string();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TakeContext ------------------------------------------------------------------

MavkaParser::TakeContext::TakeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::TakeContext::getRuleIndex() const {
  return MavkaParser::RuleTake;
}

void MavkaParser::TakeContext::copyFrom(TakeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Take_moduleContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Take_moduleContext::TAKE() {
  return getToken(MavkaParser::TAKE, 0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::Take_moduleContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}

tree::TerminalNode* MavkaParser::Take_moduleContext::AS() {
  return getToken(MavkaParser::AS, 0);
}

tree::TerminalNode* MavkaParser::Take_moduleContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Take_moduleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Take_moduleContext::Take_moduleContext(TakeContext *ctx) { copyFrom(ctx); }

void MavkaParser::Take_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_module(this);
}
void MavkaParser::Take_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_module(this);
}

std::any MavkaParser::Take_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_module(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Take_fileContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Take_fileContext::TAKE_FILE() {
  return getToken(MavkaParser::TAKE_FILE, 0);
}

tree::TerminalNode* MavkaParser::Take_fileContext::AS() {
  return getToken(MavkaParser::AS, 0);
}

tree::TerminalNode* MavkaParser::Take_fileContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Take_fileContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Take_fileContext::Take_fileContext(TakeContext *ctx) { copyFrom(ctx); }

void MavkaParser::Take_fileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_file(this);
}
void MavkaParser::Take_fileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_file(this);
}

std::any MavkaParser::Take_fileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_file(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Take_remoteContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Take_remoteContext::TAKE() {
  return getToken(MavkaParser::TAKE, 0);
}

tree::TerminalNode* MavkaParser::Take_remoteContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

tree::TerminalNode* MavkaParser::Take_remoteContext::AS() {
  return getToken(MavkaParser::AS, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Take_remoteContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Take_remoteContext::Take_remoteContext(TakeContext *ctx) { copyFrom(ctx); }

void MavkaParser::Take_remoteContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_remote(this);
}
void MavkaParser::Take_remoteContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_remote(this);
}

std::any MavkaParser::Take_remoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_remote(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::TakeContext* MavkaParser::take() {
  TakeContext *_localctx = _tracker.createInstance<TakeContext>(_ctx, getState());
  enterRule(_localctx, 64, MavkaParser::RuleTake);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(588);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<MavkaParser::Take_moduleContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(569);
      match(MavkaParser::TAKE);
      setState(571);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::DOT) {
        setState(570);
        antlrcpp::downCast<Take_moduleContext *>(_localctx)->tm_relative = match(MavkaParser::DOT);
      }
      setState(573);
      antlrcpp::downCast<Take_moduleContext *>(_localctx)->tm_elements_chain = identifiers_chain(0);
      setState(576);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::AS) {
        setState(574);
        match(MavkaParser::AS);
        setState(575);
        antlrcpp::downCast<Take_moduleContext *>(_localctx)->tm_as = identifier();
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<MavkaParser::Take_fileContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(578);
      match(MavkaParser::TAKE_FILE);
      setState(579);
      antlrcpp::downCast<Take_fileContext *>(_localctx)->tf_name = match(MavkaParser::STRING);
      setState(580);
      match(MavkaParser::AS);
      setState(581);
      antlrcpp::downCast<Take_fileContext *>(_localctx)->tf_as = identifier();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<MavkaParser::Take_remoteContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(582);
      match(MavkaParser::TAKE);
      setState(583);
      antlrcpp::downCast<Take_remoteContext *>(_localctx)->tr_url = match(MavkaParser::STRING);
      setState(586);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::AS) {
        setState(584);
        match(MavkaParser::AS);
        setState(585);
        antlrcpp::downCast<Take_remoteContext *>(_localctx)->tr_as = identifier();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GiveContext ------------------------------------------------------------------

MavkaParser::GiveContext::GiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::GiveContext::GIVE() {
  return getToken(MavkaParser::GIVE, 0);
}

std::vector<MavkaParser::Give_elementContext *> MavkaParser::GiveContext::give_element() {
  return getRuleContexts<MavkaParser::Give_elementContext>();
}

MavkaParser::Give_elementContext* MavkaParser::GiveContext::give_element(size_t i) {
  return getRuleContext<MavkaParser::Give_elementContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::GiveContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::GiveContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::GiveContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::GiveContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::GiveContext::getRuleIndex() const {
  return MavkaParser::RuleGive;
}

void MavkaParser::GiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGive(this);
}

void MavkaParser::GiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGive(this);
}


std::any MavkaParser::GiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGive(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::GiveContext* MavkaParser::give() {
  GiveContext *_localctx = _tracker.createInstance<GiveContext>(_ctx, getState());
  enterRule(_localctx, 66, MavkaParser::RuleGive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(590);
    match(MavkaParser::GIVE);
    setState(591);
    give_element();
    setState(599);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(592);
        nls();
        setState(593);
        match(MavkaParser::COMMA);
        setState(594);
        nls();
        setState(595);
        give_element(); 
      }
      setState(601);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Give_elementContext ------------------------------------------------------------------

MavkaParser::Give_elementContext::Give_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::Give_elementContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::Give_elementContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

tree::TerminalNode* MavkaParser::Give_elementContext::AS() {
  return getToken(MavkaParser::AS, 0);
}


size_t MavkaParser::Give_elementContext::getRuleIndex() const {
  return MavkaParser::RuleGive_element;
}

void MavkaParser::Give_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGive_element(this);
}

void MavkaParser::Give_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGive_element(this);
}


std::any MavkaParser::Give_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGive_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Give_elementContext* MavkaParser::give_element() {
  Give_elementContext *_localctx = _tracker.createInstance<Give_elementContext>(_ctx, getState());
  enterRule(_localctx, 68, MavkaParser::RuleGive_element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(602);
    antlrcpp::downCast<Give_elementContext *>(_localctx)->ge_name = identifier();
    setState(605);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::AS) {
      setState(603);
      match(MavkaParser::AS);
      setState(604);
      antlrcpp::downCast<Give_elementContext *>(_localctx)->ge_as = identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

MavkaParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::StringContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

tree::TerminalNode* MavkaParser::StringContext::STRING_MULTILINE() {
  return getToken(MavkaParser::STRING_MULTILINE, 0);
}


size_t MavkaParser::StringContext::getRuleIndex() const {
  return MavkaParser::RuleString;
}

void MavkaParser::StringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString(this);
}

void MavkaParser::StringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString(this);
}


std::any MavkaParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::StringContext* MavkaParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 70, MavkaParser::RuleString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(607);
    _la = _input->LA(1);
    if (!(_la == MavkaParser::STRING_MULTILINE

    || _la == MavkaParser::STRING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

MavkaParser::AtomContext::AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::AtomContext::getRuleIndex() const {
  return MavkaParser::RuleAtom;
}

void MavkaParser::AtomContext::copyFrom(AtomContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Get_elementContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Get_elementContext::OPEN_ARRAY() {
  return getToken(MavkaParser::OPEN_ARRAY, 0);
}

tree::TerminalNode* MavkaParser::Get_elementContext::CLOSE_ARRAY() {
  return getToken(MavkaParser::CLOSE_ARRAY, 0);
}

MavkaParser::AtomContext* MavkaParser::Get_elementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Get_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::Get_elementContext::Get_elementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Get_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGet_element(this);
}
void MavkaParser::Get_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGet_element(this);
}

std::any MavkaParser::Get_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGet_element(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ChainContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::ChainContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ChainContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::ChainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::AtomContext* MavkaParser::ChainContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::ChainContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::ChainContext::ChainContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::ChainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChain(this);
}
void MavkaParser::ChainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChain(this);
}

std::any MavkaParser::ChainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitChain(this);
  else
    return visitor->visitChildren(this);
}
//----------------- String_valueContext ------------------------------------------------------------------

MavkaParser::StringContext* MavkaParser::String_valueContext::string() {
  return getRuleContext<MavkaParser::StringContext>(0);
}

MavkaParser::String_valueContext::String_valueContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::String_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString_value(this);
}
void MavkaParser::String_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString_value(this);
}

std::any MavkaParser::String_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitString_value(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Pre_incrementContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Pre_incrementContext::INCREMENT() {
  return getToken(MavkaParser::INCREMENT, 0);
}

MavkaParser::AtomContext* MavkaParser::Pre_incrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Pre_incrementContext::Pre_incrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Pre_incrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPre_increment(this);
}
void MavkaParser::Pre_incrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPre_increment(this);
}

std::any MavkaParser::Pre_incrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPre_increment(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Bitwise_notContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Bitwise_notContext::TILDA() {
  return getToken(MavkaParser::TILDA, 0);
}

MavkaParser::AtomContext* MavkaParser::Bitwise_notContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Bitwise_notContext::Bitwise_notContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Bitwise_notContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise_not(this);
}
void MavkaParser::Bitwise_notContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise_not(this);
}

std::any MavkaParser::Bitwise_notContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_not(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Typeless_dictionaryContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Typeless_dictionaryContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::Typeless_dictionaryContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::Dictionary_argsContext* MavkaParser::Typeless_dictionaryContext::dictionary_args() {
  return getRuleContext<MavkaParser::Dictionary_argsContext>(0);
}

MavkaParser::Typeless_dictionaryContext::Typeless_dictionaryContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Typeless_dictionaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeless_dictionary(this);
}
void MavkaParser::Typeless_dictionaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeless_dictionary(this);
}

std::any MavkaParser::Typeless_dictionaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTypeless_dictionary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PositiveContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::PositiveContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

MavkaParser::AtomContext* MavkaParser::PositiveContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::PositiveContext::PositiveContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::PositiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositive(this);
}
void MavkaParser::PositiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositive(this);
}

std::any MavkaParser::PositiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPositive(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NestedContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NestedContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::NestedContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::NestedContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::NestedContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::ExprContext* MavkaParser::NestedContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::NestedContext::NestedContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NestedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNested(this);
}
void MavkaParser::NestedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNested(this);
}

std::any MavkaParser::NestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNested(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CallContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::CallContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::CallContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::AtomContext* MavkaParser::CallContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

tree::TerminalNode* MavkaParser::CallContext::SMALLER() {
  return getToken(MavkaParser::SMALLER, 0);
}

MavkaParser::Call_genericsContext* MavkaParser::CallContext::call_generics() {
  return getRuleContext<MavkaParser::Call_genericsContext>(0);
}

tree::TerminalNode* MavkaParser::CallContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

MavkaParser::ArgsContext* MavkaParser::CallContext::args() {
  return getRuleContext<MavkaParser::ArgsContext>(0);
}

MavkaParser::Named_argsContext* MavkaParser::CallContext::named_args() {
  return getRuleContext<MavkaParser::Named_argsContext>(0);
}

MavkaParser::CallContext::CallContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::CallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall(this);
}
void MavkaParser::CallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall(this);
}

std::any MavkaParser::CallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NumberContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NumberContext::NUMBER() {
  return getToken(MavkaParser::NUMBER, 0);
}

MavkaParser::NumberContext::NumberContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NumberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumber(this);
}
void MavkaParser::NumberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumber(this);
}

std::any MavkaParser::NumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNumber(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NegativeContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NegativeContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}

MavkaParser::AtomContext* MavkaParser::NegativeContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::NegativeContext::NegativeContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NegativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNegative(this);
}
void MavkaParser::NegativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNegative(this);
}

std::any MavkaParser::NegativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNegative(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NotContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NotContext::NOT() {
  return getToken(MavkaParser::NOT, 0);
}

MavkaParser::AtomContext* MavkaParser::NotContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::NotContext::NotContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NotContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNot(this);
}
void MavkaParser::NotContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNot(this);
}

std::any MavkaParser::NotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNot(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Typeless_arrayContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Typeless_arrayContext::OPEN_ARRAY() {
  return getToken(MavkaParser::OPEN_ARRAY, 0);
}

tree::TerminalNode* MavkaParser::Typeless_arrayContext::CLOSE_ARRAY() {
  return getToken(MavkaParser::CLOSE_ARRAY, 0);
}

MavkaParser::Array_elementsContext* MavkaParser::Typeless_arrayContext::array_elements() {
  return getRuleContext<MavkaParser::Array_elementsContext>(0);
}

MavkaParser::Typeless_arrayContext::Typeless_arrayContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Typeless_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeless_array(this);
}
void MavkaParser::Typeless_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeless_array(this);
}

std::any MavkaParser::Typeless_arrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTypeless_array(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Pre_decrementContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Pre_decrementContext::DECREMENT() {
  return getToken(MavkaParser::DECREMENT, 0);
}

MavkaParser::AtomContext* MavkaParser::Pre_decrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Pre_decrementContext::Pre_decrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Pre_decrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPre_decrement(this);
}
void MavkaParser::Pre_decrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPre_decrement(this);
}

std::any MavkaParser::Pre_decrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPre_decrement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Post_decrementContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Post_decrementContext::DECREMENT() {
  return getToken(MavkaParser::DECREMENT, 0);
}

MavkaParser::AtomContext* MavkaParser::Post_decrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Post_decrementContext::Post_decrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Post_decrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPost_decrement(this);
}
void MavkaParser::Post_decrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPost_decrement(this);
}

std::any MavkaParser::Post_decrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPost_decrement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IdContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::IdContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::IdContext::IdContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::IdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterId(this);
}
void MavkaParser::IdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitId(this);
}

std::any MavkaParser::IdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitId(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Post_incrementContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Post_incrementContext::INCREMENT() {
  return getToken(MavkaParser::INCREMENT, 0);
}

MavkaParser::AtomContext* MavkaParser::Post_incrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Post_incrementContext::Post_incrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Post_incrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPost_increment(this);
}
void MavkaParser::Post_incrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPost_increment(this);
}

std::any MavkaParser::Post_incrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPost_increment(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::AtomContext* MavkaParser::atom() {
   return atom(0);
}

MavkaParser::AtomContext* MavkaParser::atom(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::AtomContext *_localctx = _tracker.createInstance<AtomContext>(_ctx, parentState);
  MavkaParser::AtomContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 72;
  enterRecursionRule(_localctx, 72, MavkaParser::RuleAtom, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(641);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<NumberContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(610);
      match(MavkaParser::NUMBER);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<String_valueContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(611);
      string();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<IdContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(612);
      identifier();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<Typeless_arrayContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(613);
      match(MavkaParser::OPEN_ARRAY);
      setState(615);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1702923609103667204) != 0) || ((((_la - 80) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 80)) & 436601027) != 0)) {
        setState(614);
        antlrcpp::downCast<Typeless_arrayContext *>(_localctx)->a_elements = array_elements();
      }
      setState(617);
      match(MavkaParser::CLOSE_ARRAY);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<Typeless_dictionaryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(618);
      match(MavkaParser::OPEN_PAREN);
      setState(620);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 53) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 53)) & 36046389205008389) != 0)) {
        setState(619);
        antlrcpp::downCast<Typeless_dictionaryContext *>(_localctx)->d_args = dictionary_args();
      }
      setState(622);
      match(MavkaParser::CLOSE_PAREN);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<PositiveContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(623);
      match(MavkaParser::PLUS);
      setState(624);
      antlrcpp::downCast<PositiveContext *>(_localctx)->p_value = atom(9);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<NegativeContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(625);
      match(MavkaParser::MINUS);
      setState(626);
      antlrcpp::downCast<NegativeContext *>(_localctx)->n_value = atom(8);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<Pre_decrementContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(627);
      match(MavkaParser::DECREMENT);
      setState(628);
      antlrcpp::downCast<Pre_decrementContext *>(_localctx)->pd_value = atom(7);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<Pre_incrementContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(629);
      match(MavkaParser::INCREMENT);
      setState(630);
      antlrcpp::downCast<Pre_incrementContext *>(_localctx)->pi_value = atom(6);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<NotContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(631);
      match(MavkaParser::NOT);
      setState(632);
      antlrcpp::downCast<NotContext *>(_localctx)->n_value = atom(3);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<Bitwise_notContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(633);
      match(MavkaParser::TILDA);
      setState(634);
      antlrcpp::downCast<Bitwise_notContext *>(_localctx)->bn_value = atom(2);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<NestedContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(635);
      match(MavkaParser::OPEN_PAREN);
      setState(636);
      nls();
      setState(637);
      antlrcpp::downCast<NestedContext *>(_localctx)->n_value = expr();
      setState(638);
      nls();
      setState(639);
      match(MavkaParser::CLOSE_PAREN);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(673);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(671);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ChainContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(643);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(644);
          nls();
          setState(645);
          match(MavkaParser::DOT);
          setState(646);
          nls();
          setState(647);
          antlrcpp::downCast<ChainContext *>(_localctx)->c_right = identifier();
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<CallContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(649);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(654);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MavkaParser::SMALLER) {
            setState(650);
            match(MavkaParser::SMALLER);
            setState(651);
            call_generics();
            setState(652);
            match(MavkaParser::GREATER);
          }
          setState(656);
          match(MavkaParser::OPEN_PAREN);
          setState(659);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
          case 1: {
            setState(657);
            antlrcpp::downCast<CallContext *>(_localctx)->c_args = args();
            break;
          }

          case 2: {
            setState(658);
            antlrcpp::downCast<CallContext *>(_localctx)->c_named_args = named_args();
            break;
          }

          default:
            break;
          }
          setState(661);
          match(MavkaParser::CLOSE_PAREN);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<Get_elementContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->ge_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(662);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(663);
          match(MavkaParser::OPEN_ARRAY);
          setState(664);
          antlrcpp::downCast<Get_elementContext *>(_localctx)->ge_element = expr();
          setState(665);
          match(MavkaParser::CLOSE_ARRAY);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<Post_decrementContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->pd_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(667);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(668);
          match(MavkaParser::DECREMENT);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<Post_incrementContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->pi_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(669);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(670);
          match(MavkaParser::INCREMENT);
          break;
        }

        default:
          break;
        } 
      }
      setState(675);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ValueContext ------------------------------------------------------------------

MavkaParser::ValueContext::ValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::ValueContext::getRuleIndex() const {
  return MavkaParser::RuleValue;
}

void MavkaParser::ValueContext::copyFrom(ValueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Arithmetic_mulContext ------------------------------------------------------------------

std::vector<MavkaParser::ValueContext *> MavkaParser::Arithmetic_mulContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::Arithmetic_mulContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Arithmetic_op_mulContext* MavkaParser::Arithmetic_mulContext::arithmetic_op_mul() {
  return getRuleContext<MavkaParser::Arithmetic_op_mulContext>(0);
}

MavkaParser::Arithmetic_mulContext::Arithmetic_mulContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Arithmetic_mulContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_mul(this);
}
void MavkaParser::Arithmetic_mulContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_mul(this);
}

std::any MavkaParser::Arithmetic_mulContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_mul(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Arithmetic_addContext ------------------------------------------------------------------

std::vector<MavkaParser::ValueContext *> MavkaParser::Arithmetic_addContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::Arithmetic_addContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Arithmetic_op_addContext* MavkaParser::Arithmetic_addContext::arithmetic_op_add() {
  return getRuleContext<MavkaParser::Arithmetic_op_addContext>(0);
}

MavkaParser::Arithmetic_addContext::Arithmetic_addContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Arithmetic_addContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_add(this);
}
void MavkaParser::Arithmetic_addContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_add(this);
}

std::any MavkaParser::Arithmetic_addContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_add(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ComparisonContext ------------------------------------------------------------------

std::vector<MavkaParser::ValueContext *> MavkaParser::ComparisonContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::ComparisonContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Comparison_opContext* MavkaParser::ComparisonContext::comparison_op() {
  return getRuleContext<MavkaParser::Comparison_opContext>(0);
}

MavkaParser::ComparisonContext::ComparisonContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::ComparisonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison(this);
}
void MavkaParser::ComparisonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison(this);
}

std::any MavkaParser::ComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComparison(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TestContext ------------------------------------------------------------------

std::vector<MavkaParser::ValueContext *> MavkaParser::TestContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::TestContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Test_opContext* MavkaParser::TestContext::test_op() {
  return getRuleContext<MavkaParser::Test_opContext>(0);
}

MavkaParser::TestContext::TestContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::TestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTest(this);
}
void MavkaParser::TestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTest(this);
}

std::any MavkaParser::TestContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTest(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BitwiseContext ------------------------------------------------------------------

std::vector<MavkaParser::ValueContext *> MavkaParser::BitwiseContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::BitwiseContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Bitwise_opContext* MavkaParser::BitwiseContext::bitwise_op() {
  return getRuleContext<MavkaParser::Bitwise_opContext>(0);
}

MavkaParser::BitwiseContext::BitwiseContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::BitwiseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise(this);
}
void MavkaParser::BitwiseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise(this);
}

std::any MavkaParser::BitwiseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Value_atomContext ------------------------------------------------------------------

MavkaParser::AtomContext* MavkaParser::Value_atomContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Value_atomContext::Value_atomContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Value_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue_atom(this);
}
void MavkaParser::Value_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue_atom(this);
}

std::any MavkaParser::Value_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitValue_atom(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ValueContext* MavkaParser::value() {
   return value(0);
}

MavkaParser::ValueContext* MavkaParser::value(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::ValueContext *_localctx = _tracker.createInstance<ValueContext>(_ctx, parentState);
  MavkaParser::ValueContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 74;
  enterRecursionRule(_localctx, 74, MavkaParser::RuleValue, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<Value_atomContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(677);
    atom(0);
    _ctx->stop = _input->LT(-1);
    setState(701);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(699);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<Arithmetic_mulContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->a_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(679);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(680);
          antlrcpp::downCast<Arithmetic_mulContext *>(_localctx)->a_operation = arithmetic_op_mul();
          setState(681);
          antlrcpp::downCast<Arithmetic_mulContext *>(_localctx)->a_right = value(6);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<Arithmetic_addContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->a_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(683);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(684);
          antlrcpp::downCast<Arithmetic_addContext *>(_localctx)->a_operation = arithmetic_op_add();
          setState(685);
          antlrcpp::downCast<Arithmetic_addContext *>(_localctx)->a_right = value(5);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<BitwiseContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->b_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(687);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(688);
          antlrcpp::downCast<BitwiseContext *>(_localctx)->b_operation = bitwise_op();
          setState(689);
          antlrcpp::downCast<BitwiseContext *>(_localctx)->b_right = value(4);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<ComparisonContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(691);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(692);
          antlrcpp::downCast<ComparisonContext *>(_localctx)->c_operation = comparison_op();
          setState(693);
          antlrcpp::downCast<ComparisonContext *>(_localctx)->c_right = value(3);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<TestContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->t_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(695);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(696);
          antlrcpp::downCast<TestContext *>(_localctx)->t_operation = test_op();
          setState(697);
          antlrcpp::downCast<TestContext *>(_localctx)->t_right = value(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(703);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Call_genericsContext ------------------------------------------------------------------

MavkaParser::Call_genericsContext::Call_genericsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Type_valueContext *> MavkaParser::Call_genericsContext::type_value() {
  return getRuleContexts<MavkaParser::Type_valueContext>();
}

MavkaParser::Type_valueContext* MavkaParser::Call_genericsContext::type_value(size_t i) {
  return getRuleContext<MavkaParser::Type_valueContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Call_genericsContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::Call_genericsContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::Call_genericsContext::getRuleIndex() const {
  return MavkaParser::RuleCall_generics;
}

void MavkaParser::Call_genericsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_generics(this);
}

void MavkaParser::Call_genericsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_generics(this);
}


std::any MavkaParser::Call_genericsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall_generics(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Call_genericsContext* MavkaParser::call_generics() {
  Call_genericsContext *_localctx = _tracker.createInstance<Call_genericsContext>(_ctx, getState());
  enterRule(_localctx, 76, MavkaParser::RuleCall_generics);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(704);
    type_value();
    setState(709);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMMA) {
      setState(705);
      match(MavkaParser::COMMA);
      setState(706);
      type_value();
      setState(711);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_elementsContext ------------------------------------------------------------------

MavkaParser::Array_elementsContext::Array_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Array_elementsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Array_elementsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::Array_elementContext *> MavkaParser::Array_elementsContext::array_element() {
  return getRuleContexts<MavkaParser::Array_elementContext>();
}

MavkaParser::Array_elementContext* MavkaParser::Array_elementsContext::array_element(size_t i) {
  return getRuleContext<MavkaParser::Array_elementContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Array_elementsContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::Array_elementsContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::Array_elementsContext::getRuleIndex() const {
  return MavkaParser::RuleArray_elements;
}

void MavkaParser::Array_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_elements(this);
}

void MavkaParser::Array_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_elements(this);
}


std::any MavkaParser::Array_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray_elements(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Array_elementsContext* MavkaParser::array_elements() {
  Array_elementsContext *_localctx = _tracker.createInstance<Array_elementsContext>(_ctx, getState());
  enterRule(_localctx, 78, MavkaParser::RuleArray_elements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(712);
    nls();
    setState(713);
    array_element();
    setState(714);
    nls();
    setState(723);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::NL

    || _la == MavkaParser::COMMA) {
      setState(715);
      nls();
      setState(716);
      match(MavkaParser::COMMA);
      setState(717);
      nls();
      setState(718);
      array_element();
      setState(719);
      nls();
      setState(725);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_elementContext ------------------------------------------------------------------

MavkaParser::Array_elementContext::Array_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ExprContext* MavkaParser::Array_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Array_elementContext::getRuleIndex() const {
  return MavkaParser::RuleArray_element;
}

void MavkaParser::Array_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_element(this);
}

void MavkaParser::Array_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_element(this);
}


std::any MavkaParser::Array_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Array_elementContext* MavkaParser::array_element() {
  Array_elementContext *_localctx = _tracker.createInstance<Array_elementContext>(_ctx, getState());
  enterRule(_localctx, 80, MavkaParser::RuleArray_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(726);
    antlrcpp::downCast<Array_elementContext *>(_localctx)->ae_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dictionary_argsContext ------------------------------------------------------------------

MavkaParser::Dictionary_argsContext::Dictionary_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Dictionary_argContext *> MavkaParser::Dictionary_argsContext::dictionary_arg() {
  return getRuleContexts<MavkaParser::Dictionary_argContext>();
}

MavkaParser::Dictionary_argContext* MavkaParser::Dictionary_argsContext::dictionary_arg(size_t i) {
  return getRuleContext<MavkaParser::Dictionary_argContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Dictionary_argsContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::Dictionary_argsContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::Dictionary_argsContext::getRuleIndex() const {
  return MavkaParser::RuleDictionary_args;
}

void MavkaParser::Dictionary_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionary_args(this);
}

void MavkaParser::Dictionary_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionary_args(this);
}


std::any MavkaParser::Dictionary_argsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDictionary_args(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Dictionary_argsContext* MavkaParser::dictionary_args() {
  Dictionary_argsContext *_localctx = _tracker.createInstance<Dictionary_argsContext>(_ctx, getState());
  enterRule(_localctx, 82, MavkaParser::RuleDictionary_args);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(728);
    dictionary_arg();
    setState(733);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMMA) {
      setState(729);
      match(MavkaParser::COMMA);
      setState(730);
      dictionary_arg();
      setState(735);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dictionary_argContext ------------------------------------------------------------------

MavkaParser::Dictionary_argContext::Dictionary_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Dictionary_argContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Dictionary_argContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Dictionary_argContext::ASSIGN() {
  return getToken(MavkaParser::ASSIGN, 0);
}

MavkaParser::ExprContext* MavkaParser::Dictionary_argContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::Dictionary_argContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Dictionary_argContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}


size_t MavkaParser::Dictionary_argContext::getRuleIndex() const {
  return MavkaParser::RuleDictionary_arg;
}

void MavkaParser::Dictionary_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionary_arg(this);
}

void MavkaParser::Dictionary_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionary_arg(this);
}


std::any MavkaParser::Dictionary_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDictionary_arg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Dictionary_argContext* MavkaParser::dictionary_arg() {
  Dictionary_argContext *_localctx = _tracker.createInstance<Dictionary_argContext>(_ctx, getState());
  enterRule(_localctx, 84, MavkaParser::RuleDictionary_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(736);
    nls();
    setState(739);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::KID:
      case MavkaParser::ID: {
        setState(737);
        antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_name_id = identifier();
        break;
      }

      case MavkaParser::STRING: {
        setState(738);
        antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_name_string = match(MavkaParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(741);
    match(MavkaParser::ASSIGN);
    setState(742);
    antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_value = expr();
    setState(743);
    nls();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

MavkaParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::ExprContext::getRuleIndex() const {
  return MavkaParser::RuleExpr;
}

void MavkaParser::ExprContext::copyFrom(ExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Anonymous_diiaContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::DIIA() {
  return getToken(MavkaParser::DIIA, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Anonymous_diiaContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Anonymous_diiaContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Anonymous_diiaContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Anonymous_diiaContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::END() {
  return getToken(MavkaParser::END, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::SMALLER() {
  return getToken(MavkaParser::SMALLER, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::ASYNC() {
  return getToken(MavkaParser::ASYNC, 0);
}

MavkaParser::GenericsContext* MavkaParser::Anonymous_diiaContext::generics() {
  return getRuleContext<MavkaParser::GenericsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::Anonymous_diiaContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::BodyContext* MavkaParser::Anonymous_diiaContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::Anonymous_diiaContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Anonymous_diiaContext::Anonymous_diiaContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::Anonymous_diiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymous_diia(this);
}
void MavkaParser::Anonymous_diiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymous_diia(this);
}

std::any MavkaParser::Anonymous_diiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAnonymous_diia(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AsContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::AsContext::AS() {
  return getToken(MavkaParser::AS, 0);
}

std::vector<MavkaParser::AtomContext *> MavkaParser::AsContext::atom() {
  return getRuleContexts<MavkaParser::AtomContext>();
}

MavkaParser::AtomContext* MavkaParser::AsContext::atom(size_t i) {
  return getRuleContext<MavkaParser::AtomContext>(i);
}

MavkaParser::AsContext::AsContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::AsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAs(this);
}
void MavkaParser::AsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAs(this);
}

std::any MavkaParser::AsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAs(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WaitContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::WaitContext::WAIT() {
  return getToken(MavkaParser::WAIT, 0);
}

MavkaParser::ValueContext* MavkaParser::WaitContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::WaitContext::WaitContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::WaitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWait(this);
}
void MavkaParser::WaitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWait(this);
}

std::any MavkaParser::WaitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWait(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Call_parentContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Call_parentContext::PARENT() {
  return getToken(MavkaParser::PARENT, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Call_parentContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Call_parentContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Call_parentContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

tree::TerminalNode* MavkaParser::Call_parentContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::Call_parentContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Call_parentContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::ArgsContext* MavkaParser::Call_parentContext::args() {
  return getRuleContext<MavkaParser::ArgsContext>(0);
}

MavkaParser::Named_argsContext* MavkaParser::Call_parentContext::named_args() {
  return getRuleContext<MavkaParser::Named_argsContext>(0);
}

MavkaParser::Call_parentContext::Call_parentContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::Call_parentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_parent(this);
}
void MavkaParser::Call_parentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_parent(this);
}

std::any MavkaParser::Call_parentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall_parent(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Expr_mmlContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Expr_mmlContext::MML() {
  return getToken(MavkaParser::MML, 0);
}

MavkaParser::Expr_mmlContext::Expr_mmlContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::Expr_mmlContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_mml(this);
}
void MavkaParser::Expr_mmlContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_mml(this);
}

std::any MavkaParser::Expr_mmlContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitExpr_mml(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FunctionContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::FunctionContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::FunctionContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* MavkaParser::FunctionContext::COLON() {
  return getToken(MavkaParser::COLON, 0);
}

MavkaParser::ExprContext* MavkaParser::FunctionContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

tree::TerminalNode* MavkaParser::FunctionContext::ASYNC() {
  return getToken(MavkaParser::ASYNC, 0);
}

MavkaParser::ParamsContext* MavkaParser::FunctionContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::FunctionContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::FunctionContext::FunctionContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::FunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction(this);
}
void MavkaParser::FunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction(this);
}

std::any MavkaParser::FunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleContext ------------------------------------------------------------------

MavkaParser::ValueContext* MavkaParser::SimpleContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::SimpleContext::SimpleContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::SimpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple(this);
}
void MavkaParser::SimpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple(this);
}

std::any MavkaParser::SimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitSimple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TernaryContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::TernaryContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::TernaryContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::TernaryContext::TERNARY() {
  return getToken(MavkaParser::TERNARY, 0);
}

tree::TerminalNode* MavkaParser::TernaryContext::COLON() {
  return getToken(MavkaParser::COLON, 0);
}

MavkaParser::ValueContext* MavkaParser::TernaryContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

std::vector<MavkaParser::ExprContext *> MavkaParser::TernaryContext::expr() {
  return getRuleContexts<MavkaParser::ExprContext>();
}

MavkaParser::ExprContext* MavkaParser::TernaryContext::expr(size_t i) {
  return getRuleContext<MavkaParser::ExprContext>(i);
}

MavkaParser::TernaryContext::TernaryContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::TernaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTernary(this);
}
void MavkaParser::TernaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTernary(this);
}

std::any MavkaParser::TernaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTernary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GodContext ------------------------------------------------------------------

std::vector<MavkaParser::AtomContext *> MavkaParser::GodContext::atom() {
  return getRuleContexts<MavkaParser::AtomContext>();
}

MavkaParser::AtomContext* MavkaParser::GodContext::atom(size_t i) {
  return getRuleContext<MavkaParser::AtomContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::GodContext::TA() {
  return getTokens(MavkaParser::TA);
}

tree::TerminalNode* MavkaParser::GodContext::TA(size_t i) {
  return getToken(MavkaParser::TA, i);
}

MavkaParser::GodContext::GodContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::GodContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGod(this);
}
void MavkaParser::GodContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGod(this);
}

std::any MavkaParser::GodContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGod(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::ExprContext* MavkaParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 86, MavkaParser::RuleExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(825);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<MavkaParser::Call_parentContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(745);
      match(MavkaParser::PARENT);
      setState(746);
      nls();
      setState(747);
      match(MavkaParser::DOT);
      setState(748);
      nls();
      setState(749);
      antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_id = identifier();
      setState(750);
      match(MavkaParser::OPEN_PAREN);
      setState(753);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
      case 1: {
        setState(751);
        antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_args = args();
        break;
      }

      case 2: {
        setState(752);
        antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_named_args = named_args();
        break;
      }

      default:
        break;
      }
      setState(755);
      match(MavkaParser::CLOSE_PAREN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<MavkaParser::SimpleContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(757);
      value(0);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<MavkaParser::AsContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(758);
      antlrcpp::downCast<AsContext *>(_localctx)->a_left = atom(0);
      setState(759);
      match(MavkaParser::AS);
      setState(760);
      antlrcpp::downCast<AsContext *>(_localctx)->a_right = atom(0);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<MavkaParser::TernaryContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(762);
      antlrcpp::downCast<TernaryContext *>(_localctx)->t_value = value(0);
      setState(763);
      nls();
      setState(764);
      match(MavkaParser::TERNARY);
      setState(765);
      nls();
      setState(766);
      antlrcpp::downCast<TernaryContext *>(_localctx)->t_positive = expr();
      setState(767);
      nls();
      setState(768);
      match(MavkaParser::COLON);
      setState(769);
      nls();
      setState(770);
      antlrcpp::downCast<TernaryContext *>(_localctx)->t_negative = expr();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<MavkaParser::GodContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(772);
      atom(0);
      setState(775); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(773);
        match(MavkaParser::TA);
        setState(774);
        atom(0);
        setState(777); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MavkaParser::TA);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<MavkaParser::WaitContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(779);
      match(MavkaParser::WAIT);
      setState(780);
      antlrcpp::downCast<WaitContext *>(_localctx)->w_value = value(0);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<MavkaParser::FunctionContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(782);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::ASYNC) {
        setState(781);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_async = match(MavkaParser::ASYNC);
      }
      setState(784);
      match(MavkaParser::OPEN_PAREN);
      setState(786);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 70368744178309) != 0)) {
        setState(785);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_params = params();
      }
      setState(788);
      match(MavkaParser::CLOSE_PAREN);
      setState(790);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 53) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 53)) & 17592186044545) != 0)) {
        setState(789);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_type = type_value();
      }
      setState(792);
      match(MavkaParser::COLON);
      setState(793);
      antlrcpp::downCast<FunctionContext *>(_localctx)->f_body = expr();
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<MavkaParser::Anonymous_diiaContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(795);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::ASYNC) {
        setState(794);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_async = match(MavkaParser::ASYNC);
      }
      setState(797);
      match(MavkaParser::DIIA);
      setState(802);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::SMALLER) {
        setState(798);
        match(MavkaParser::SMALLER);
        setState(799);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_generics = generics();
        setState(800);
        match(MavkaParser::GREATER);
      }
      setState(804);
      match(MavkaParser::OPEN_PAREN);

      setState(805);
      nls();
      setState(807);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 70368744178309) != 0)) {
        setState(806);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_params = params();
      }
      setState(809);
      nls();
      setState(811);
      match(MavkaParser::CLOSE_PAREN);
      setState(813);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 53) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 53)) & 17592186044545) != 0)) {
        setState(812);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_type = type_value();
      }
      setState(815);
      nl();
      setState(819);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
      case 1: {
        setState(816);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_body = body();
        setState(817);
        nl();
        break;
      }

      default:
        break;
      }
      setState(821);
      nls();
      setState(822);
      match(MavkaParser::END);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<MavkaParser::Expr_mmlContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(824);
      match(MavkaParser::MML);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowContext ------------------------------------------------------------------

MavkaParser::ThrowContext::ThrowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::ThrowContext::THROW() {
  return getToken(MavkaParser::THROW, 0);
}

MavkaParser::ExprContext* MavkaParser::ThrowContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::ThrowContext::getRuleIndex() const {
  return MavkaParser::RuleThrow;
}

void MavkaParser::ThrowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrow(this);
}

void MavkaParser::ThrowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrow(this);
}


std::any MavkaParser::ThrowContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitThrow(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ThrowContext* MavkaParser::throw_() {
  ThrowContext *_localctx = _tracker.createInstance<ThrowContext>(_ctx, getState());
  enterRule(_localctx, 88, MavkaParser::RuleThrow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(827);
    match(MavkaParser::THROW);
    setState(828);
    antlrcpp::downCast<ThrowContext *>(_localctx)->t_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_destructionContext ------------------------------------------------------------------

MavkaParser::Array_destructionContext::Array_destructionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Array_destructionContext::OPEN_ARRAY() {
  return getToken(MavkaParser::OPEN_ARRAY, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Array_destructionContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Array_destructionContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::Array_destruction_elContext *> MavkaParser::Array_destructionContext::array_destruction_el() {
  return getRuleContexts<MavkaParser::Array_destruction_elContext>();
}

MavkaParser::Array_destruction_elContext* MavkaParser::Array_destructionContext::array_destruction_el(size_t i) {
  return getRuleContext<MavkaParser::Array_destruction_elContext>(i);
}

tree::TerminalNode* MavkaParser::Array_destructionContext::CLOSE_ARRAY() {
  return getToken(MavkaParser::CLOSE_ARRAY, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Array_destructionContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::Array_destructionContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::Array_destructionContext::getRuleIndex() const {
  return MavkaParser::RuleArray_destruction;
}

void MavkaParser::Array_destructionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_destruction(this);
}

void MavkaParser::Array_destructionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_destruction(this);
}


std::any MavkaParser::Array_destructionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray_destruction(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Array_destructionContext* MavkaParser::array_destruction() {
  Array_destructionContext *_localctx = _tracker.createInstance<Array_destructionContext>(_ctx, getState());
  enterRule(_localctx, 90, MavkaParser::RuleArray_destruction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(830);
    match(MavkaParser::OPEN_ARRAY);
    setState(831);
    nls();
    setState(832);
    array_destruction_el();
    setState(833);
    nls();
    setState(842);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::NL

    || _la == MavkaParser::COMMA) {
      setState(834);
      nls();
      setState(835);
      match(MavkaParser::COMMA);
      setState(836);
      nls();
      setState(837);
      array_destruction_el();
      setState(838);
      nls();
      setState(844);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(845);
    match(MavkaParser::CLOSE_ARRAY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_destruction_elContext ------------------------------------------------------------------

MavkaParser::Array_destruction_elContext::Array_destruction_elContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Array_destruction_elContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}


size_t MavkaParser::Array_destruction_elContext::getRuleIndex() const {
  return MavkaParser::RuleArray_destruction_el;
}

void MavkaParser::Array_destruction_elContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_destruction_el(this);
}

void MavkaParser::Array_destruction_elContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_destruction_el(this);
}


std::any MavkaParser::Array_destruction_elContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray_destruction_el(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Array_destruction_elContext* MavkaParser::array_destruction_el() {
  Array_destruction_elContext *_localctx = _tracker.createInstance<Array_destruction_elContext>(_ctx, getState());
  enterRule(_localctx, 92, MavkaParser::RuleArray_destruction_el);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(847);
    antlrcpp::downCast<Array_destruction_elContext *>(_localctx)->ade_id = identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_destructionContext ------------------------------------------------------------------

MavkaParser::Object_destructionContext::Object_destructionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Object_destructionContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

std::vector<MavkaParser::Object_destruction_elContext *> MavkaParser::Object_destructionContext::object_destruction_el() {
  return getRuleContexts<MavkaParser::Object_destruction_elContext>();
}

MavkaParser::Object_destruction_elContext* MavkaParser::Object_destructionContext::object_destruction_el(size_t i) {
  return getRuleContext<MavkaParser::Object_destruction_elContext>(i);
}

tree::TerminalNode* MavkaParser::Object_destructionContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Object_destructionContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::Object_destructionContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::Object_destructionContext::getRuleIndex() const {
  return MavkaParser::RuleObject_destruction;
}

void MavkaParser::Object_destructionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_destruction(this);
}

void MavkaParser::Object_destructionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_destruction(this);
}


std::any MavkaParser::Object_destructionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitObject_destruction(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Object_destructionContext* MavkaParser::object_destruction() {
  Object_destructionContext *_localctx = _tracker.createInstance<Object_destructionContext>(_ctx, getState());
  enterRule(_localctx, 94, MavkaParser::RuleObject_destruction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(849);
    match(MavkaParser::OPEN_PAREN);
    setState(850);
    object_destruction_el();
    setState(855);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMMA) {
      setState(851);
      match(MavkaParser::COMMA);
      setState(852);
      object_destruction_el();
      setState(857);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(858);
    match(MavkaParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_destruction_elContext ------------------------------------------------------------------

MavkaParser::Object_destruction_elContext::Object_destruction_elContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Object_destruction_elContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Object_destruction_elContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

MavkaParser::IdentifierContext* MavkaParser::Object_destruction_elContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}


size_t MavkaParser::Object_destruction_elContext::getRuleIndex() const {
  return MavkaParser::RuleObject_destruction_el;
}

void MavkaParser::Object_destruction_elContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_destruction_el(this);
}

void MavkaParser::Object_destruction_elContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_destruction_el(this);
}


std::any MavkaParser::Object_destruction_elContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitObject_destruction_el(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Object_destruction_elContext* MavkaParser::object_destruction_el() {
  Object_destruction_elContext *_localctx = _tracker.createInstance<Object_destruction_elContext>(_ctx, getState());
  enterRule(_localctx, 96, MavkaParser::RuleObject_destruction_el);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(860);
    nls();
    setState(861);
    antlrcpp::downCast<Object_destruction_elContext *>(_localctx)->ode_id = identifier();
    setState(862);
    nls();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignContext ------------------------------------------------------------------

MavkaParser::AssignContext::AssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Assign_simpleContext* MavkaParser::AssignContext::assign_simple() {
  return getRuleContext<MavkaParser::Assign_simpleContext>(0);
}

MavkaParser::Assign_by_identifierContext* MavkaParser::AssignContext::assign_by_identifier() {
  return getRuleContext<MavkaParser::Assign_by_identifierContext>(0);
}

MavkaParser::Assign_by_elementContext* MavkaParser::AssignContext::assign_by_element() {
  return getRuleContext<MavkaParser::Assign_by_elementContext>(0);
}

MavkaParser::Assign_array_destructionContext* MavkaParser::AssignContext::assign_array_destruction() {
  return getRuleContext<MavkaParser::Assign_array_destructionContext>(0);
}

MavkaParser::Assign_object_destructionContext* MavkaParser::AssignContext::assign_object_destruction() {
  return getRuleContext<MavkaParser::Assign_object_destructionContext>(0);
}


size_t MavkaParser::AssignContext::getRuleIndex() const {
  return MavkaParser::RuleAssign;
}

void MavkaParser::AssignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign(this);
}

void MavkaParser::AssignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign(this);
}


std::any MavkaParser::AssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::AssignContext* MavkaParser::assign() {
  AssignContext *_localctx = _tracker.createInstance<AssignContext>(_ctx, getState());
  enterRule(_localctx, 98, MavkaParser::RuleAssign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(869);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(864);
      assign_simple();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(865);
      assign_by_identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(866);
      assign_by_element();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(867);
      assign_array_destruction();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(868);
      assign_object_destruction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_simpleContext ------------------------------------------------------------------

MavkaParser::Assign_simpleContext::Assign_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Assign_simpleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_simpleContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Assign_simpleContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

tree::TerminalNode* MavkaParser::Assign_simpleContext::SUBJECT() {
  return getToken(MavkaParser::SUBJECT, 0);
}

MavkaParser::Type_valueContext* MavkaParser::Assign_simpleContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::Assign_simpleContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_simple;
}

void MavkaParser::Assign_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_simple(this);
}

void MavkaParser::Assign_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_simple(this);
}


std::any MavkaParser::Assign_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_simple(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_simpleContext* MavkaParser::assign_simple() {
  Assign_simpleContext *_localctx = _tracker.createInstance<Assign_simpleContext>(_ctx, getState());
  enterRule(_localctx, 100, MavkaParser::RuleAssign_simple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(872);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::SUBJECT) {
      setState(871);
      antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_subject = match(MavkaParser::SUBJECT);
    }
    setState(874);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_identifier = identifier();
    setState(876);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 53) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 53)) & 17592186044545) != 0)) {
      setState(875);
      antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_type = type_value();
    }
    setState(878);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_symbol = assign_symbol();
    setState(879);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_by_identifierContext ------------------------------------------------------------------

MavkaParser::Assign_by_identifierContext::Assign_by_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_by_identifierContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Assign_by_identifierContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::Assign_by_identifierContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_by_identifierContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Assign_by_identifierContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Assign_by_identifierContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_by_identifier;
}

void MavkaParser::Assign_by_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_by_identifier(this);
}

void MavkaParser::Assign_by_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_by_identifier(this);
}


std::any MavkaParser::Assign_by_identifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_by_identifier(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_by_identifierContext* MavkaParser::assign_by_identifier() {
  Assign_by_identifierContext *_localctx = _tracker.createInstance<Assign_by_identifierContext>(_ctx, getState());
  enterRule(_localctx, 102, MavkaParser::RuleAssign_by_identifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(881);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_left = super_identifiers_chain(0);
    setState(882);
    match(MavkaParser::DOT);
    setState(883);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_identifier = identifier();
    setState(884);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_symbol = assign_symbol();
    setState(885);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_by_elementContext ------------------------------------------------------------------

MavkaParser::Assign_by_elementContext::Assign_by_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_by_elementContext::OPEN_ARRAY() {
  return getToken(MavkaParser::OPEN_ARRAY, 0);
}

tree::TerminalNode* MavkaParser::Assign_by_elementContext::CLOSE_ARRAY() {
  return getToken(MavkaParser::CLOSE_ARRAY, 0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Assign_by_elementContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

std::vector<MavkaParser::ExprContext *> MavkaParser::Assign_by_elementContext::expr() {
  return getRuleContexts<MavkaParser::ExprContext>();
}

MavkaParser::ExprContext* MavkaParser::Assign_by_elementContext::expr(size_t i) {
  return getRuleContext<MavkaParser::ExprContext>(i);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_by_elementContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}


size_t MavkaParser::Assign_by_elementContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_by_element;
}

void MavkaParser::Assign_by_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_by_element(this);
}

void MavkaParser::Assign_by_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_by_element(this);
}


std::any MavkaParser::Assign_by_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_by_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_by_elementContext* MavkaParser::assign_by_element() {
  Assign_by_elementContext *_localctx = _tracker.createInstance<Assign_by_elementContext>(_ctx, getState());
  enterRule(_localctx, 104, MavkaParser::RuleAssign_by_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(887);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_left = super_identifiers_chain(0);
    setState(888);
    match(MavkaParser::OPEN_ARRAY);
    setState(889);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_index = expr();
    setState(890);
    match(MavkaParser::CLOSE_ARRAY);
    setState(891);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_symbol = assign_symbol();
    setState(892);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_array_destructionContext ------------------------------------------------------------------

MavkaParser::Assign_array_destructionContext::Assign_array_destructionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_array_destructionContext::ASSIGN() {
  return getToken(MavkaParser::ASSIGN, 0);
}

MavkaParser::Array_destructionContext* MavkaParser::Assign_array_destructionContext::array_destruction() {
  return getRuleContext<MavkaParser::Array_destructionContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Assign_array_destructionContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Assign_array_destructionContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_array_destruction;
}

void MavkaParser::Assign_array_destructionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_array_destruction(this);
}

void MavkaParser::Assign_array_destructionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_array_destruction(this);
}


std::any MavkaParser::Assign_array_destructionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_array_destruction(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_array_destructionContext* MavkaParser::assign_array_destruction() {
  Assign_array_destructionContext *_localctx = _tracker.createInstance<Assign_array_destructionContext>(_ctx, getState());
  enterRule(_localctx, 106, MavkaParser::RuleAssign_array_destruction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(894);
    antlrcpp::downCast<Assign_array_destructionContext *>(_localctx)->aad_array_destruction = array_destruction();
    setState(895);
    match(MavkaParser::ASSIGN);
    setState(896);
    antlrcpp::downCast<Assign_array_destructionContext *>(_localctx)->aad_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_object_destructionContext ------------------------------------------------------------------

MavkaParser::Assign_object_destructionContext::Assign_object_destructionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_object_destructionContext::ASSIGN() {
  return getToken(MavkaParser::ASSIGN, 0);
}

MavkaParser::Object_destructionContext* MavkaParser::Assign_object_destructionContext::object_destruction() {
  return getRuleContext<MavkaParser::Object_destructionContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Assign_object_destructionContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Assign_object_destructionContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_object_destruction;
}

void MavkaParser::Assign_object_destructionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_object_destruction(this);
}

void MavkaParser::Assign_object_destructionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_object_destruction(this);
}


std::any MavkaParser::Assign_object_destructionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_object_destruction(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_object_destructionContext* MavkaParser::assign_object_destruction() {
  Assign_object_destructionContext *_localctx = _tracker.createInstance<Assign_object_destructionContext>(_ctx, getState());
  enterRule(_localctx, 108, MavkaParser::RuleAssign_object_destruction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(898);
    antlrcpp::downCast<Assign_object_destructionContext *>(_localctx)->aod_object_destruction = object_destruction();
    setState(899);
    match(MavkaParser::ASSIGN);
    setState(900);
    antlrcpp::downCast<Assign_object_destructionContext *>(_localctx)->aod_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_symbolContext ------------------------------------------------------------------

MavkaParser::Assign_symbolContext::Assign_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::TSE() {
  return getToken(MavkaParser::TSE, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN() {
  return getToken(MavkaParser::ASSIGN, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_PARENT() {
  return getToken(MavkaParser::ASSIGN_PARENT, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_ADD() {
  return getToken(MavkaParser::ASSIGN_ADD, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_SUB() {
  return getToken(MavkaParser::ASSIGN_SUB, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_MUL() {
  return getToken(MavkaParser::ASSIGN_MUL, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_DIV() {
  return getToken(MavkaParser::ASSIGN_DIV, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_DIVDIV() {
  return getToken(MavkaParser::ASSIGN_DIVDIV, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_MOD() {
  return getToken(MavkaParser::ASSIGN_MOD, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_POW() {
  return getToken(MavkaParser::ASSIGN_POW, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_BW_AND() {
  return getToken(MavkaParser::ASSIGN_BW_AND, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_BW_OR() {
  return getToken(MavkaParser::ASSIGN_BW_OR, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_BW_SHIFT_LEFT() {
  return getToken(MavkaParser::ASSIGN_BW_SHIFT_LEFT, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_BW_SHIFT_RIGHT() {
  return getToken(MavkaParser::ASSIGN_BW_SHIFT_RIGHT, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_XOR() {
  return getToken(MavkaParser::ASSIGN_XOR, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_AND() {
  return getToken(MavkaParser::ASSIGN_AND, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_OR() {
  return getToken(MavkaParser::ASSIGN_OR, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::ASSIGN_IF() {
  return getToken(MavkaParser::ASSIGN_IF, 0);
}


size_t MavkaParser::Assign_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_symbol;
}

void MavkaParser::Assign_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_symbol(this);
}

void MavkaParser::Assign_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_symbol(this);
}


std::any MavkaParser::Assign_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_symbolContext* MavkaParser::assign_symbol() {
  Assign_symbolContext *_localctx = _tracker.createInstance<Assign_symbolContext>(_ctx, getState());
  enterRule(_localctx, 110, MavkaParser::RuleAssign_symbol);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(902);
    _la = _input->LA(1);
    if (!(((((_la - 50) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 50)) & 1073733633) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Wait_assignContext ------------------------------------------------------------------

MavkaParser::Wait_assignContext::Wait_assignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Wait_assignContext::WAIT() {
  return getToken(MavkaParser::WAIT, 0);
}

MavkaParser::AssignContext* MavkaParser::Wait_assignContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}


size_t MavkaParser::Wait_assignContext::getRuleIndex() const {
  return MavkaParser::RuleWait_assign;
}

void MavkaParser::Wait_assignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWait_assign(this);
}

void MavkaParser::Wait_assignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWait_assign(this);
}


std::any MavkaParser::Wait_assignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWait_assign(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Wait_assignContext* MavkaParser::wait_assign() {
  Wait_assignContext *_localctx = _tracker.createInstance<Wait_assignContext>(_ctx, getState());
  enterRule(_localctx, 112, MavkaParser::RuleWait_assign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(904);
    match(MavkaParser::WAIT);
    setState(905);
    antlrcpp::downCast<Wait_assignContext *>(_localctx)->wa_assign = assign();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

MavkaParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::IdentifierContext::ID() {
  return getToken(MavkaParser::ID, 0);
}

tree::TerminalNode* MavkaParser::IdentifierContext::KID() {
  return getToken(MavkaParser::KID, 0);
}


size_t MavkaParser::IdentifierContext::getRuleIndex() const {
  return MavkaParser::RuleIdentifier;
}

void MavkaParser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void MavkaParser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}


std::any MavkaParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::IdentifierContext* MavkaParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 114, MavkaParser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(907);
    _la = _input->LA(1);
    if (!(_la == MavkaParser::KID

    || _la == MavkaParser::ID)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Identifiers_chainContext ------------------------------------------------------------------

MavkaParser::Identifiers_chainContext::Identifiers_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Identifiers_chainContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Identifiers_chainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::Identifiers_chainContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}


size_t MavkaParser::Identifiers_chainContext::getRuleIndex() const {
  return MavkaParser::RuleIdentifiers_chain;
}

void MavkaParser::Identifiers_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifiers_chain(this);
}

void MavkaParser::Identifiers_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifiers_chain(this);
}


std::any MavkaParser::Identifiers_chainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIdentifiers_chain(this);
  else
    return visitor->visitChildren(this);
}


MavkaParser::Identifiers_chainContext* MavkaParser::identifiers_chain() {
   return identifiers_chain(0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::identifiers_chain(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::Identifiers_chainContext *_localctx = _tracker.createInstance<Identifiers_chainContext>(_ctx, parentState);
  MavkaParser::Identifiers_chainContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 116;
  enterRecursionRule(_localctx, 116, MavkaParser::RuleIdentifiers_chain, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(910);
    antlrcpp::downCast<Identifiers_chainContext *>(_localctx)->ic_identifier = identifier();
    _ctx->stop = _input->LT(-1);
    setState(917);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Identifiers_chainContext>(parentContext, parentState);
        _localctx->ic_left = previousContext;
        pushNewRecursionContext(_localctx, startState, RuleIdentifiers_chain);
        setState(912);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(913);
        match(MavkaParser::DOT);
        setState(914);
        antlrcpp::downCast<Identifiers_chainContext *>(_localctx)->ic_right = identifier(); 
      }
      setState(919);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Super_identifiers_chainContext ------------------------------------------------------------------

MavkaParser::Super_identifiers_chainContext::Super_identifiers_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Super_identifiers_chainContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Super_identifiers_chainContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Super_identifiers_chainContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Super_identifiers_chainContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::OPEN_ARRAY() {
  return getToken(MavkaParser::OPEN_ARRAY, 0);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::CLOSE_ARRAY() {
  return getToken(MavkaParser::CLOSE_ARRAY, 0);
}

MavkaParser::ExprContext* MavkaParser::Super_identifiers_chainContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Super_identifiers_chainContext::getRuleIndex() const {
  return MavkaParser::RuleSuper_identifiers_chain;
}

void MavkaParser::Super_identifiers_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuper_identifiers_chain(this);
}

void MavkaParser::Super_identifiers_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuper_identifiers_chain(this);
}


std::any MavkaParser::Super_identifiers_chainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitSuper_identifiers_chain(this);
  else
    return visitor->visitChildren(this);
}


MavkaParser::Super_identifiers_chainContext* MavkaParser::super_identifiers_chain() {
   return super_identifiers_chain(0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::super_identifiers_chain(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::Super_identifiers_chainContext *_localctx = _tracker.createInstance<Super_identifiers_chainContext>(_ctx, parentState);
  MavkaParser::Super_identifiers_chainContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 118;
  enterRecursionRule(_localctx, 118, MavkaParser::RuleSuper_identifiers_chain, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(921);
    antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_identifier = identifier();
    _ctx->stop = _input->LT(-1);
    setState(938);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(936);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Super_identifiers_chainContext>(parentContext, parentState);
          _localctx->sic_left = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleSuper_identifiers_chain);
          setState(923);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(924);
          nls();
          setState(925);
          match(MavkaParser::DOT);
          setState(926);
          nls();
          setState(927);
          antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_right = identifier();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Super_identifiers_chainContext>(parentContext, parentState);
          _localctx->sic_left = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleSuper_identifiers_chain);
          setState(929);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(930);
          match(MavkaParser::OPEN_ARRAY);
          setState(931);
          nls();
          setState(932);
          antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_index = expr();
          setState(933);
          nls();
          setState(934);
          match(MavkaParser::CLOSE_ARRAY);
          break;
        }

        default:
          break;
        } 
      }
      setState(940);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Type_valueContext ------------------------------------------------------------------

MavkaParser::Type_valueContext::Type_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Type_value_itemContext *> MavkaParser::Type_valueContext::type_value_item() {
  return getRuleContexts<MavkaParser::Type_value_itemContext>();
}

MavkaParser::Type_value_itemContext* MavkaParser::Type_valueContext::type_value_item(size_t i) {
  return getRuleContext<MavkaParser::Type_value_itemContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Type_valueContext::OR_BW() {
  return getTokens(MavkaParser::OR_BW);
}

tree::TerminalNode* MavkaParser::Type_valueContext::OR_BW(size_t i) {
  return getToken(MavkaParser::OR_BW, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Type_valueContext::OR() {
  return getTokens(MavkaParser::OR);
}

tree::TerminalNode* MavkaParser::Type_valueContext::OR(size_t i) {
  return getToken(MavkaParser::OR, i);
}


size_t MavkaParser::Type_valueContext::getRuleIndex() const {
  return MavkaParser::RuleType_value;
}

void MavkaParser::Type_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value(this);
}

void MavkaParser::Type_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value(this);
}


std::any MavkaParser::Type_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_valueContext* MavkaParser::type_value() {
  Type_valueContext *_localctx = _tracker.createInstance<Type_valueContext>(_ctx, getState());
  enterRule(_localctx, 120, MavkaParser::RuleType_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(941);
    type_value_item();
    setState(946);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::OR || _la == MavkaParser::OR_BW) {
      setState(942);
      _la = _input->LA(1);
      if (!(_la == MavkaParser::OR || _la == MavkaParser::OR_BW)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(943);
      type_value_item();
      setState(948);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_itemContext ------------------------------------------------------------------

MavkaParser::Type_value_itemContext::Type_value_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Type_value_item_simpleContext* MavkaParser::Type_value_itemContext::type_value_item_simple() {
  return getRuleContext<MavkaParser::Type_value_item_simpleContext>(0);
}

MavkaParser::Type_value_item_arrayContext* MavkaParser::Type_value_itemContext::type_value_item_array() {
  return getRuleContext<MavkaParser::Type_value_item_arrayContext>(0);
}


size_t MavkaParser::Type_value_itemContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item;
}

void MavkaParser::Type_value_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item(this);
}

void MavkaParser::Type_value_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item(this);
}


std::any MavkaParser::Type_value_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_itemContext* MavkaParser::type_value_item() {
  Type_value_itemContext *_localctx = _tracker.createInstance<Type_value_itemContext>(_ctx, getState());
  enterRule(_localctx, 122, MavkaParser::RuleType_value_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(951);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::KID:
      case MavkaParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(949);
        type_value_item_simple();
        break;
      }

      case MavkaParser::OPEN_ARRAY: {
        enterOuterAlt(_localctx, 2);
        setState(950);
        type_value_item_array();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_item_simpleContext ------------------------------------------------------------------

MavkaParser::Type_value_item_simpleContext::Type_value_item_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Identifiers_chainContext* MavkaParser::Type_value_item_simpleContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}

tree::TerminalNode* MavkaParser::Type_value_item_simpleContext::SMALLER() {
  return getToken(MavkaParser::SMALLER, 0);
}

tree::TerminalNode* MavkaParser::Type_value_item_simpleContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

MavkaParser::Type_value_item_genericsContext* MavkaParser::Type_value_item_simpleContext::type_value_item_generics() {
  return getRuleContext<MavkaParser::Type_value_item_genericsContext>(0);
}


size_t MavkaParser::Type_value_item_simpleContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item_simple;
}

void MavkaParser::Type_value_item_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item_simple(this);
}

void MavkaParser::Type_value_item_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item_simple(this);
}


std::any MavkaParser::Type_value_item_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item_simple(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_item_simpleContext* MavkaParser::type_value_item_simple() {
  Type_value_item_simpleContext *_localctx = _tracker.createInstance<Type_value_item_simpleContext>(_ctx, getState());
  enterRule(_localctx, 124, MavkaParser::RuleType_value_item_simple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(953);
    antlrcpp::downCast<Type_value_item_simpleContext *>(_localctx)->tvi_value = identifiers_chain(0);
    setState(958);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::SMALLER) {
      setState(954);
      match(MavkaParser::SMALLER);
      setState(955);
      antlrcpp::downCast<Type_value_item_simpleContext *>(_localctx)->tvi_generics = type_value_item_generics();
      setState(956);
      match(MavkaParser::GREATER);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_item_genericsContext ------------------------------------------------------------------

MavkaParser::Type_value_item_genericsContext::Type_value_item_genericsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Type_valueContext *> MavkaParser::Type_value_item_genericsContext::type_value() {
  return getRuleContexts<MavkaParser::Type_valueContext>();
}

MavkaParser::Type_valueContext* MavkaParser::Type_value_item_genericsContext::type_value(size_t i) {
  return getRuleContext<MavkaParser::Type_valueContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Type_value_item_genericsContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::Type_value_item_genericsContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::Type_value_item_genericsContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item_generics;
}

void MavkaParser::Type_value_item_genericsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item_generics(this);
}

void MavkaParser::Type_value_item_genericsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item_generics(this);
}


std::any MavkaParser::Type_value_item_genericsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item_generics(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_item_genericsContext* MavkaParser::type_value_item_generics() {
  Type_value_item_genericsContext *_localctx = _tracker.createInstance<Type_value_item_genericsContext>(_ctx, getState());
  enterRule(_localctx, 126, MavkaParser::RuleType_value_item_generics);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(960);
    type_value();
    setState(965);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMMA) {
      setState(961);
      match(MavkaParser::COMMA);
      setState(962);
      type_value();
      setState(967);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_item_arrayContext ------------------------------------------------------------------

MavkaParser::Type_value_item_arrayContext::Type_value_item_arrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Type_value_item_arrayContext::OPEN_ARRAY() {
  return getToken(MavkaParser::OPEN_ARRAY, 0);
}

tree::TerminalNode* MavkaParser::Type_value_item_arrayContext::CLOSE_ARRAY() {
  return getToken(MavkaParser::CLOSE_ARRAY, 0);
}

MavkaParser::Type_value_itemContext* MavkaParser::Type_value_item_arrayContext::type_value_item() {
  return getRuleContext<MavkaParser::Type_value_itemContext>(0);
}


size_t MavkaParser::Type_value_item_arrayContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item_array;
}

void MavkaParser::Type_value_item_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item_array(this);
}

void MavkaParser::Type_value_item_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item_array(this);
}


std::any MavkaParser::Type_value_item_arrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item_array(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_item_arrayContext* MavkaParser::type_value_item_array() {
  Type_value_item_arrayContext *_localctx = _tracker.createInstance<Type_value_item_arrayContext>(_ctx, getState());
  enterRule(_localctx, 128, MavkaParser::RuleType_value_item_array);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(968);
    match(MavkaParser::OPEN_ARRAY);
    setState(969);
    match(MavkaParser::CLOSE_ARRAY);
    setState(970);
    type_value_item();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgsContext ------------------------------------------------------------------

MavkaParser::ArgsContext::ArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::ArgContext *> MavkaParser::ArgsContext::arg() {
  return getRuleContexts<MavkaParser::ArgContext>();
}

MavkaParser::ArgContext* MavkaParser::ArgsContext::arg(size_t i) {
  return getRuleContext<MavkaParser::ArgContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::ArgsContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::ArgsContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::ArgsContext::getRuleIndex() const {
  return MavkaParser::RuleArgs;
}

void MavkaParser::ArgsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgs(this);
}

void MavkaParser::ArgsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgs(this);
}


std::any MavkaParser::ArgsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArgs(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ArgsContext* MavkaParser::args() {
  ArgsContext *_localctx = _tracker.createInstance<ArgsContext>(_ctx, getState());
  enterRule(_localctx, 130, MavkaParser::RuleArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(972);
    arg();
    setState(977);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMMA) {
      setState(973);
      match(MavkaParser::COMMA);
      setState(974);
      arg();
      setState(979);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgContext ------------------------------------------------------------------

MavkaParser::ArgContext::ArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlsContext *> MavkaParser::ArgContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ArgContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

MavkaParser::ExprContext* MavkaParser::ArgContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

tree::TerminalNode* MavkaParser::ArgContext::SPREAD() {
  return getToken(MavkaParser::SPREAD, 0);
}


size_t MavkaParser::ArgContext::getRuleIndex() const {
  return MavkaParser::RuleArg;
}

void MavkaParser::ArgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArg(this);
}

void MavkaParser::ArgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArg(this);
}


std::any MavkaParser::ArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ArgContext* MavkaParser::arg() {
  ArgContext *_localctx = _tracker.createInstance<ArgContext>(_ctx, getState());
  enterRule(_localctx, 132, MavkaParser::RuleArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(980);
    nls();
    setState(982);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::SPREAD) {
      setState(981);
      antlrcpp::downCast<ArgContext *>(_localctx)->a_spread = match(MavkaParser::SPREAD);
    }
    setState(984);
    antlrcpp::downCast<ArgContext *>(_localctx)->a_value = expr();
    setState(985);
    nls();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argsContext ------------------------------------------------------------------

MavkaParser::Named_argsContext::Named_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Named_argContext *> MavkaParser::Named_argsContext::named_arg() {
  return getRuleContexts<MavkaParser::Named_argContext>();
}

MavkaParser::Named_argContext* MavkaParser::Named_argsContext::named_arg(size_t i) {
  return getRuleContext<MavkaParser::Named_argContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Named_argsContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::Named_argsContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}


size_t MavkaParser::Named_argsContext::getRuleIndex() const {
  return MavkaParser::RuleNamed_args;
}

void MavkaParser::Named_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_args(this);
}

void MavkaParser::Named_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_args(this);
}


std::any MavkaParser::Named_argsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNamed_args(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Named_argsContext* MavkaParser::named_args() {
  Named_argsContext *_localctx = _tracker.createInstance<Named_argsContext>(_ctx, getState());
  enterRule(_localctx, 134, MavkaParser::RuleNamed_args);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(987);
    named_arg();
    setState(992);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMMA) {
      setState(988);
      match(MavkaParser::COMMA);
      setState(989);
      named_arg();
      setState(994);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argContext ------------------------------------------------------------------

MavkaParser::Named_argContext::Named_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Named_argContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Named_argContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Named_argContext::ASSIGN() {
  return getToken(MavkaParser::ASSIGN, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Named_argContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Named_argContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Named_argContext::getRuleIndex() const {
  return MavkaParser::RuleNamed_arg;
}

void MavkaParser::Named_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_arg(this);
}

void MavkaParser::Named_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_arg(this);
}


std::any MavkaParser::Named_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNamed_arg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Named_argContext* MavkaParser::named_arg() {
  Named_argContext *_localctx = _tracker.createInstance<Named_argContext>(_ctx, getState());
  enterRule(_localctx, 136, MavkaParser::RuleNamed_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(995);
    nls();
    setState(996);
    antlrcpp::downCast<Named_argContext *>(_localctx)->na_name = identifier();
    setState(997);
    match(MavkaParser::ASSIGN);
    setState(998);
    antlrcpp::downCast<Named_argContext *>(_localctx)->na_value = expr();
    setState(999);
    nls();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamsContext ------------------------------------------------------------------

MavkaParser::ParamsContext::ParamsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::ParamContext *> MavkaParser::ParamsContext::param() {
  return getRuleContexts<MavkaParser::ParamContext>();
}

MavkaParser::ParamContext* MavkaParser::ParamsContext::param(size_t i) {
  return getRuleContext<MavkaParser::ParamContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::ParamsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ParamsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::ParamsContext::COMMA() {
  return getTokens(MavkaParser::COMMA);
}

tree::TerminalNode* MavkaParser::ParamsContext::COMMA(size_t i) {
  return getToken(MavkaParser::COMMA, i);
}

tree::TerminalNode* MavkaParser::ParamsContext::SPREAD() {
  return getToken(MavkaParser::SPREAD, 0);
}

MavkaParser::IdentifierContext* MavkaParser::ParamsContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::ParamsContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::ParamsContext::getRuleIndex() const {
  return MavkaParser::RuleParams;
}

void MavkaParser::ParamsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParams(this);
}

void MavkaParser::ParamsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParams(this);
}


std::any MavkaParser::ParamsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParams(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ParamsContext* MavkaParser::params() {
  ParamsContext *_localctx = _tracker.createInstance<ParamsContext>(_ctx, getState());
  enterRule(_localctx, 138, MavkaParser::RuleParams);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1027);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::KID:
      case MavkaParser::OPEN_PAREN:
      case MavkaParser::OPEN_ARRAY:
      case MavkaParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(1001);
        param();
        setState(1009);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1002);
            nls();
            setState(1003);
            match(MavkaParser::COMMA);
            setState(1004);
            nls();
            setState(1005);
            param(); 
          }
          setState(1011);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
        }
        setState(1020);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx)) {
        case 1: {
          setState(1012);
          nls();
          setState(1013);
          match(MavkaParser::COMMA);
          setState(1014);
          nls();
          setState(1015);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic = match(MavkaParser::SPREAD);
          setState(1016);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_name = identifier();
          setState(1018);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (((((_la - 53) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 53)) & 17592186044545) != 0)) {
            setState(1017);
            antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_type = type_value();
          }
          break;
        }

        default:
          break;
        }
        break;
      }

      case MavkaParser::SPREAD: {
        enterOuterAlt(_localctx, 2);
        setState(1022);
        antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic = match(MavkaParser::SPREAD);
        setState(1023);
        antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_name = identifier();
        setState(1025);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 53) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 53)) & 17592186044545) != 0)) {
          setState(1024);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_type = type_value();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamContext ------------------------------------------------------------------

MavkaParser::ParamContext::ParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::ParamContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Array_destructionContext* MavkaParser::ParamContext::array_destruction() {
  return getRuleContext<MavkaParser::Array_destructionContext>(0);
}

MavkaParser::Object_destructionContext* MavkaParser::ParamContext::object_destruction() {
  return getRuleContext<MavkaParser::Object_destructionContext>(0);
}

tree::TerminalNode* MavkaParser::ParamContext::ASSIGN() {
  return getToken(MavkaParser::ASSIGN, 0);
}

MavkaParser::Type_valueContext* MavkaParser::ParamContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::Param_valueContext* MavkaParser::ParamContext::param_value() {
  return getRuleContext<MavkaParser::Param_valueContext>(0);
}


size_t MavkaParser::ParamContext::getRuleIndex() const {
  return MavkaParser::RuleParam;
}

void MavkaParser::ParamContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam(this);
}

void MavkaParser::ParamContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam(this);
}


std::any MavkaParser::ParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ParamContext* MavkaParser::param() {
  ParamContext *_localctx = _tracker.createInstance<ParamContext>(_ctx, getState());
  enterRule(_localctx, 140, MavkaParser::RuleParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1032);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::KID:
      case MavkaParser::ID: {
        setState(1029);
        antlrcpp::downCast<ParamContext *>(_localctx)->p_name = identifier();
        break;
      }

      case MavkaParser::OPEN_ARRAY: {
        setState(1030);
        antlrcpp::downCast<ParamContext *>(_localctx)->p_array_destruction = array_destruction();
        break;
      }

      case MavkaParser::OPEN_PAREN: {
        setState(1031);
        antlrcpp::downCast<ParamContext *>(_localctx)->p_object_destruction = object_destruction();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1035);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 53) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 53)) & 17592186044545) != 0)) {
      setState(1034);
      antlrcpp::downCast<ParamContext *>(_localctx)->p_type = type_value();
    }
    setState(1039);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ASSIGN) {
      setState(1037);
      match(MavkaParser::ASSIGN);
      setState(1038);
      antlrcpp::downCast<ParamContext *>(_localctx)->p_value = param_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_valueContext ------------------------------------------------------------------

MavkaParser::Param_valueContext::Param_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::Param_valueContext::getRuleIndex() const {
  return MavkaParser::RuleParam_value;
}

void MavkaParser::Param_valueContext::copyFrom(Param_valueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Param_value_empty_listContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Param_value_empty_listContext::OPEN_ARRAY() {
  return getToken(MavkaParser::OPEN_ARRAY, 0);
}

tree::TerminalNode* MavkaParser::Param_value_empty_listContext::CLOSE_ARRAY() {
  return getToken(MavkaParser::CLOSE_ARRAY, 0);
}

MavkaParser::Param_value_empty_listContext::Param_value_empty_listContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_empty_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_empty_list(this);
}
void MavkaParser::Param_value_empty_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_empty_list(this);
}

std::any MavkaParser::Param_value_empty_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_empty_list(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_identifierContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::Param_value_identifierContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Param_value_identifierContext::Param_value_identifierContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_identifier(this);
}
void MavkaParser::Param_value_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_identifier(this);
}

std::any MavkaParser::Param_value_identifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_identifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_empty_dictionaryContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Param_value_empty_dictionaryContext::OPEN_PAREN() {
  return getToken(MavkaParser::OPEN_PAREN, 0);
}

tree::TerminalNode* MavkaParser::Param_value_empty_dictionaryContext::CLOSE_PAREN() {
  return getToken(MavkaParser::CLOSE_PAREN, 0);
}

MavkaParser::Param_value_empty_dictionaryContext::Param_value_empty_dictionaryContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_empty_dictionaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_empty_dictionary(this);
}
void MavkaParser::Param_value_empty_dictionaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_empty_dictionary(this);
}

std::any MavkaParser::Param_value_empty_dictionaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_empty_dictionary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_numberContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Param_value_numberContext::NUMBER() {
  return getToken(MavkaParser::NUMBER, 0);
}

MavkaParser::Param_value_numberContext::Param_value_numberContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_numberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_number(this);
}
void MavkaParser::Param_value_numberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_number(this);
}

std::any MavkaParser::Param_value_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_number(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_stringContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Param_value_stringContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

tree::TerminalNode* MavkaParser::Param_value_stringContext::STRING_MULTILINE() {
  return getToken(MavkaParser::STRING_MULTILINE, 0);
}

MavkaParser::Param_value_stringContext::Param_value_stringContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_string(this);
}
void MavkaParser::Param_value_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_string(this);
}

std::any MavkaParser::Param_value_stringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_string(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::Param_valueContext* MavkaParser::param_value() {
  Param_valueContext *_localctx = _tracker.createInstance<Param_valueContext>(_ctx, getState());
  enterRule(_localctx, 142, MavkaParser::RuleParam_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1048);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::NUMBER: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_numberContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1041);
        match(MavkaParser::NUMBER);
        break;
      }

      case MavkaParser::STRING_MULTILINE:
      case MavkaParser::STRING: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_stringContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1042);
        _la = _input->LA(1);
        if (!(_la == MavkaParser::STRING_MULTILINE

        || _la == MavkaParser::STRING)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MavkaParser::KID:
      case MavkaParser::ID: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_identifierContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(1043);
        identifier();
        break;
      }

      case MavkaParser::OPEN_PAREN: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_empty_dictionaryContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(1044);
        match(MavkaParser::OPEN_PAREN);
        setState(1045);
        match(MavkaParser::CLOSE_PAREN);
        break;
      }

      case MavkaParser::OPEN_ARRAY: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_empty_listContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(1046);
        match(MavkaParser::OPEN_ARRAY);
        setState(1047);
        match(MavkaParser::CLOSE_ARRAY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BodyContext ------------------------------------------------------------------

MavkaParser::BodyContext::BodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Body_element_or_returnContext *> MavkaParser::BodyContext::body_element_or_return() {
  return getRuleContexts<MavkaParser::Body_element_or_returnContext>();
}

MavkaParser::Body_element_or_returnContext* MavkaParser::BodyContext::body_element_or_return(size_t i) {
  return getRuleContext<MavkaParser::Body_element_or_returnContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::BodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::BodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::BodyContext::getRuleIndex() const {
  return MavkaParser::RuleBody;
}

void MavkaParser::BodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody(this);
}

void MavkaParser::BodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody(this);
}


std::any MavkaParser::BodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::BodyContext* MavkaParser::body() {
  BodyContext *_localctx = _tracker.createInstance<BodyContext>(_ctx, getState());
  enterRule(_localctx, 144, MavkaParser::RuleBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1050);
    body_element_or_return();
    setState(1056);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1051);
        nl();
        setState(1052);
        body_element_or_return(); 
      }
      setState(1058);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_element_or_returnContext ------------------------------------------------------------------

MavkaParser::Body_element_or_returnContext::Body_element_or_returnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Body_elementContext* MavkaParser::Body_element_or_returnContext::body_element() {
  return getRuleContext<MavkaParser::Body_elementContext>(0);
}

MavkaParser::Return_body_lineContext* MavkaParser::Body_element_or_returnContext::return_body_line() {
  return getRuleContext<MavkaParser::Return_body_lineContext>(0);
}


size_t MavkaParser::Body_element_or_returnContext::getRuleIndex() const {
  return MavkaParser::RuleBody_element_or_return;
}

void MavkaParser::Body_element_or_returnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_element_or_return(this);
}

void MavkaParser::Body_element_or_returnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_element_or_return(this);
}


std::any MavkaParser::Body_element_or_returnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody_element_or_return(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Body_element_or_returnContext* MavkaParser::body_element_or_return() {
  Body_element_or_returnContext *_localctx = _tracker.createInstance<Body_element_or_returnContext>(_ctx, getState());
  enterRule(_localctx, 146, MavkaParser::RuleBody_element_or_return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1061);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::DIIA:
      case MavkaParser::FOR:
      case MavkaParser::IF:
      case MavkaParser::WAIT:
      case MavkaParser::ASYNC:
      case MavkaParser::SUBJECT:
      case MavkaParser::TRY:
      case MavkaParser::THROW:
      case MavkaParser::WHILE:
      case MavkaParser::PARENT:
      case MavkaParser::KID:
      case MavkaParser::NL:
      case MavkaParser::DECREMENT:
      case MavkaParser::INCREMENT:
      case MavkaParser::OPEN_PAREN:
      case MavkaParser::OPEN_ARRAY:
      case MavkaParser::PLUS:
      case MavkaParser::MINUS:
      case MavkaParser::NOT:
      case MavkaParser::TILDA:
      case MavkaParser::ID:
      case MavkaParser::NUMBER:
      case MavkaParser::MML:
      case MavkaParser::STRING_MULTILINE:
      case MavkaParser::STRING: {
        enterOuterAlt(_localctx, 1);
        setState(1059);
        body_element();
        break;
      }

      case MavkaParser::RETURN: {
        enterOuterAlt(_localctx, 2);
        setState(1060);
        return_body_line();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_elementContext ------------------------------------------------------------------

MavkaParser::Body_elementContext::Body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IfContext* MavkaParser::Body_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Body_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Body_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Body_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Body_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Body_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Body_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Body_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Body_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleBody_element;
}

void MavkaParser::Body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_element(this);
}

void MavkaParser::Body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_element(this);
}


std::any MavkaParser::Body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Body_elementContext* MavkaParser::body_element() {
  Body_elementContext *_localctx = _tracker.createInstance<Body_elementContext>(_ctx, getState());
  enterRule(_localctx, 148, MavkaParser::RuleBody_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1072);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1063);
      if_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1064);
      each();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1065);
      while_();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1066);
      try_();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1067);
      expr();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1068);
      throw_();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1069);
      wait_assign();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1070);
      assign();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1071);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_body_lineContext ------------------------------------------------------------------

MavkaParser::Return_body_lineContext::Return_body_lineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Return_body_lineContext::RETURN() {
  return getToken(MavkaParser::RETURN, 0);
}

MavkaParser::ExprContext* MavkaParser::Return_body_lineContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Return_body_lineContext::getRuleIndex() const {
  return MavkaParser::RuleReturn_body_line;
}

void MavkaParser::Return_body_lineContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_body_line(this);
}

void MavkaParser::Return_body_lineContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_body_line(this);
}


std::any MavkaParser::Return_body_lineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitReturn_body_line(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Return_body_lineContext* MavkaParser::return_body_line() {
  Return_body_lineContext *_localctx = _tracker.createInstance<Return_body_lineContext>(_ctx, getState());
  enterRule(_localctx, 150, MavkaParser::RuleReturn_body_line);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1074);
    match(MavkaParser::RETURN);
    setState(1075);
    antlrcpp::downCast<Return_body_lineContext *>(_localctx)->rbl_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithmetic_op_mulContext ------------------------------------------------------------------

MavkaParser::Arithmetic_op_mulContext::Arithmetic_op_mulContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::MUL() {
  return getToken(MavkaParser::MUL, 0);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::DIV() {
  return getToken(MavkaParser::DIV, 0);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::PERCENT() {
  return getToken(MavkaParser::PERCENT, 0);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::DIVDIV() {
  return getToken(MavkaParser::DIVDIV, 0);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::POW() {
  return getToken(MavkaParser::POW, 0);
}


size_t MavkaParser::Arithmetic_op_mulContext::getRuleIndex() const {
  return MavkaParser::RuleArithmetic_op_mul;
}

void MavkaParser::Arithmetic_op_mulContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_op_mul(this);
}

void MavkaParser::Arithmetic_op_mulContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_op_mul(this);
}


std::any MavkaParser::Arithmetic_op_mulContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_op_mul(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Arithmetic_op_mulContext* MavkaParser::arithmetic_op_mul() {
  Arithmetic_op_mulContext *_localctx = _tracker.createInstance<Arithmetic_op_mulContext>(_ctx, getState());
  enterRule(_localctx, 152, MavkaParser::RuleArithmetic_op_mul);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1077);
    _la = _input->LA(1);
    if (!(((((_la - 82) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 82)) & 451) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithmetic_op_addContext ------------------------------------------------------------------

MavkaParser::Arithmetic_op_addContext::Arithmetic_op_addContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Arithmetic_op_addContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_addContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}


size_t MavkaParser::Arithmetic_op_addContext::getRuleIndex() const {
  return MavkaParser::RuleArithmetic_op_add;
}

void MavkaParser::Arithmetic_op_addContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_op_add(this);
}

void MavkaParser::Arithmetic_op_addContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_op_add(this);
}


std::any MavkaParser::Arithmetic_op_addContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_op_add(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Arithmetic_op_addContext* MavkaParser::arithmetic_op_add() {
  Arithmetic_op_addContext *_localctx = _tracker.createInstance<Arithmetic_op_addContext>(_ctx, getState());
  enterRule(_localctx, 154, MavkaParser::RuleArithmetic_op_add);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1079);
    _la = _input->LA(1);
    if (!(_la == MavkaParser::PLUS

    || _la == MavkaParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bitwise_opContext ------------------------------------------------------------------

MavkaParser::Bitwise_opContext::Bitwise_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::XOR() {
  return getToken(MavkaParser::XOR, 0);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::OR_BW() {
  return getToken(MavkaParser::OR_BW, 0);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::AND_BW() {
  return getToken(MavkaParser::AND_BW, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Bitwise_opContext::SMALLER() {
  return getTokens(MavkaParser::SMALLER);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::SMALLER(size_t i) {
  return getToken(MavkaParser::SMALLER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Bitwise_opContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}


size_t MavkaParser::Bitwise_opContext::getRuleIndex() const {
  return MavkaParser::RuleBitwise_op;
}

void MavkaParser::Bitwise_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise_op(this);
}

void MavkaParser::Bitwise_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise_op(this);
}


std::any MavkaParser::Bitwise_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Bitwise_opContext* MavkaParser::bitwise_op() {
  Bitwise_opContext *_localctx = _tracker.createInstance<Bitwise_opContext>(_ctx, getState());
  enterRule(_localctx, 156, MavkaParser::RuleBitwise_op);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1088);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::XOR: {
        enterOuterAlt(_localctx, 1);
        setState(1081);
        match(MavkaParser::XOR);
        break;
      }

      case MavkaParser::OR_BW: {
        enterOuterAlt(_localctx, 2);
        setState(1082);
        match(MavkaParser::OR_BW);
        break;
      }

      case MavkaParser::AND_BW: {
        enterOuterAlt(_localctx, 3);
        setState(1083);
        match(MavkaParser::AND_BW);
        break;
      }

      case MavkaParser::SMALLER: {
        enterOuterAlt(_localctx, 4);
        setState(1084);
        match(MavkaParser::SMALLER);
        setState(1085);
        match(MavkaParser::SMALLER);
        break;
      }

      case MavkaParser::GREATER: {
        enterOuterAlt(_localctx, 5);
        setState(1086);
        match(MavkaParser::GREATER);
        setState(1087);
        match(MavkaParser::GREATER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Test_opContext ------------------------------------------------------------------

MavkaParser::Test_opContext::Test_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Test_opContext::AND() {
  return getToken(MavkaParser::AND, 0);
}

tree::TerminalNode* MavkaParser::Test_opContext::OR() {
  return getToken(MavkaParser::OR, 0);
}

tree::TerminalNode* MavkaParser::Test_opContext::OR_SYM() {
  return getToken(MavkaParser::OR_SYM, 0);
}

tree::TerminalNode* MavkaParser::Test_opContext::AND_SYM() {
  return getToken(MavkaParser::AND_SYM, 0);
}


size_t MavkaParser::Test_opContext::getRuleIndex() const {
  return MavkaParser::RuleTest_op;
}

void MavkaParser::Test_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTest_op(this);
}

void MavkaParser::Test_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTest_op(this);
}


std::any MavkaParser::Test_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTest_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Test_opContext* MavkaParser::test_op() {
  Test_opContext *_localctx = _tracker.createInstance<Test_opContext>(_ctx, getState());
  enterRule(_localctx, 158, MavkaParser::RuleTest_op);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1090);
    _la = _input->LA(1);
    if (!(_la == MavkaParser::AND

    || _la == MavkaParser::OR || _la == MavkaParser::OR_SYM

    || _la == MavkaParser::AND_SYM)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comparison_opContext ------------------------------------------------------------------

MavkaParser::Comparison_opContext::Comparison_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Comparison_opContext::EQ() {
  return getToken(MavkaParser::EQ, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::NOT_EQ() {
  return getToken(MavkaParser::NOT_EQ, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::SMALLER() {
  return getToken(MavkaParser::SMALLER, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::GREATER_EQ() {
  return getToken(MavkaParser::GREATER_EQ, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::SMALLER_EQ() {
  return getToken(MavkaParser::SMALLER_EQ, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::IS() {
  return getToken(MavkaParser::IS, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::NOT_IS_WORD() {
  return getToken(MavkaParser::NOT_IS_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::EQ_WORD() {
  return getToken(MavkaParser::EQ_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::NOT_EQ_WORD() {
  return getToken(MavkaParser::NOT_EQ_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::GR_WORD() {
  return getToken(MavkaParser::GR_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::NOT_GR_WORD() {
  return getToken(MavkaParser::NOT_GR_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::SM_WORD() {
  return getToken(MavkaParser::SM_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::NOT_SM_WORD() {
  return getToken(MavkaParser::NOT_SM_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::HAS_IS_WORD() {
  return getToken(MavkaParser::HAS_IS_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::NOT_HAS_IS_WORD() {
  return getToken(MavkaParser::NOT_HAS_IS_WORD, 0);
}


size_t MavkaParser::Comparison_opContext::getRuleIndex() const {
  return MavkaParser::RuleComparison_op;
}

void MavkaParser::Comparison_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison_op(this);
}

void MavkaParser::Comparison_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison_op(this);
}


std::any MavkaParser::Comparison_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComparison_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Comparison_opContext* MavkaParser::comparison_op() {
  Comparison_opContext *_localctx = _tracker.createInstance<Comparison_opContext>(_ctx, getState());
  enterRule(_localctx, 160, MavkaParser::RuleComparison_op);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1092);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4389457102816) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NlContext ------------------------------------------------------------------

MavkaParser::NlContext::NlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::NlContext::NL() {
  return getToken(MavkaParser::NL, 0);
}


size_t MavkaParser::NlContext::getRuleIndex() const {
  return MavkaParser::RuleNl;
}

void MavkaParser::NlContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNl(this);
}

void MavkaParser::NlContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNl(this);
}


std::any MavkaParser::NlContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNl(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::NlContext* MavkaParser::nl() {
  NlContext *_localctx = _tracker.createInstance<NlContext>(_ctx, getState());
  enterRule(_localctx, 162, MavkaParser::RuleNl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1094);
    match(MavkaParser::NL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NlsContext ------------------------------------------------------------------

MavkaParser::NlsContext::NlsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlContext *> MavkaParser::NlsContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::NlsContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::NlsContext::getRuleIndex() const {
  return MavkaParser::RuleNls;
}

void MavkaParser::NlsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNls(this);
}

void MavkaParser::NlsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNls(this);
}


std::any MavkaParser::NlsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNls(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::NlsContext* MavkaParser::nls() {
  NlsContext *_localctx = _tracker.createInstance<NlsContext>(_ctx, getState());
  enterRule(_localctx, 164, MavkaParser::RuleNls);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1099);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1096);
        nl(); 
      }
      setState(1101);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool MavkaParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 36: return atomSempred(antlrcpp::downCast<AtomContext *>(context), predicateIndex);
    case 37: return valueSempred(antlrcpp::downCast<ValueContext *>(context), predicateIndex);
    case 58: return identifiers_chainSempred(antlrcpp::downCast<Identifiers_chainContext *>(context), predicateIndex);
    case 59: return super_identifiers_chainSempred(antlrcpp::downCast<Super_identifiers_chainContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool MavkaParser::atomSempred(AtomContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 14);
    case 1: return precpred(_ctx, 13);
    case 2: return precpred(_ctx, 12);
    case 3: return precpred(_ctx, 5);
    case 4: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

bool MavkaParser::valueSempred(ValueContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 5: return precpred(_ctx, 5);
    case 6: return precpred(_ctx, 4);
    case 7: return precpred(_ctx, 3);
    case 8: return precpred(_ctx, 2);
    case 9: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool MavkaParser::identifiers_chainSempred(Identifiers_chainContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool MavkaParser::super_identifiers_chainSempred(Super_identifiers_chainContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 2);
    case 12: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void MavkaParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  mavkaparserParserInitialize();
#else
  ::antlr4::internal::call_once(mavkaparserParserOnceFlag, mavkaparserParserInitialize);
#endif
}
