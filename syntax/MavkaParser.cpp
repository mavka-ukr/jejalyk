
// Generated from MavkaParser.g4 by ANTLR 4.13.0


#include "MavkaParserListener.h"
#include "MavkaParserVisitor.h"

#include "MavkaParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct MavkaParserStaticData final {
  MavkaParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MavkaParserStaticData(const MavkaParserStaticData&) = delete;
  MavkaParserStaticData(MavkaParserStaticData&&) = delete;
  MavkaParserStaticData& operator=(const MavkaParserStaticData&) = delete;
  MavkaParserStaticData& operator=(MavkaParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag mavkaparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
MavkaParserStaticData *mavkaparserParserStaticData = nullptr;

void mavkaparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (mavkaparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(mavkaparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MavkaParserStaticData>(
    std::vector<std::string>{
      "ws", "wss", "nl", "nls", "number_token", "string", "identifier", 
      "file", "program", "program_element", "module", "module_body", "module_body_element", 
      "structure", "structure_elements", "structure_element", "structure_param", 
      "generics", "mockup", "mockup_module", "mockup_module_body", "mockup_structure", 
      "mockup_structure_body", "mockup_structure_body_element", "mockup_diia", 
      "mockup_subject", "diia", "if", "each", "fromto", "fromto_simple", 
      "fromto_complex", "fromto_value", "fromto_middle_symbol", "fromto_to_symbol", 
      "while", "try", "eval", "take", "take_module_elements", "take_module_element", 
      "give", "give_element", "atom", "value", "call_generics", "array_elements", 
      "array_element", "dictionary_args", "dictionary_arg", "expr", "throw", 
      "assign", "assign_simple", "assign_by_identifier", "assign_by_element", 
      "assign_symbol", "wait_assign", "identifiers_chain", "super_identifiers_chain", 
      "type_value", "type_value_item", "type_value_item_simple", "type_value_item_generics", 
      "type_value_item_array", "args", "arg", "named_args", "named_arg", 
      "params", "param", "param_value", "body", "body_element_or_return", 
      "body_element", "return_body_line", "arithmetic_op_mul", "arithmetic_op_add", 
      "bitwise_op", "test_op", "comparison_op", "comp_inst_block_program", 
      "comp_inst_assign"
    },
    std::vector<std::string>{
      "", "", "", "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", "'\\u0434\\u0456\\u044F'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'\\u043F\\u0435\\u0440\\u0435\\u0431\\u0440\\u0430\\u0442\\u0438'", 
      "'\\u044F\\u043A\\u0449\\u043E'", "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", 
      "'\\u0432\\u0437\\u044F\\u0442\\u0438'", "'\\u0434\\u0430\\u0442\\u0438'", 
      "'\\u044F\\u043A'", "'\\u0442\\u0430'", "'\\u0454'", "'\\u0441\\u043F\\u0435\\u0446'", 
      "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", "'\\u0442\\u0440\\u0438\\u0432\\u0430\\u043B\\u0430'", 
      "'\\u0441\\u0443\\u0431\\u02BC\\u0454\\u043A\\u0442'", "'\\u0456'", 
      "'\\u0430\\u0431\\u043E'", "'\\u0441\\u043F\\u0440\\u043E\\u0431\\u0443\\u0432\\u0430\\u0442\\u0438'", 
      "'\\u0437\\u043B\\u043E\\u0432\\u0438\\u0442\\u0438'", "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", 
      "'\\u0432\\u043F\\u0430\\u0441\\u0442\\u0438'", "'\\u043F\\u043E\\u043A\\u0438'", 
      "'\\u043C\\u043E\\u0434\\u0443\\u043B\\u044C'", "'\\u0440\\u0456\\u0432\\u043D\\u043E'", 
      "'\\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", "'\\u043C\\u0435\\u043D\\u0448\\u0435'", 
      "'\\u043C\\u0456\\u0441\\u0442\\u0438\\u0442\\u044C'", "'\\u043C\\u0430\\u043A\\u0435\\u0442'", 
      "'\\u043D\\u0435'", "'js'", "'\\u043F\\u0440\\u0435\\u0434\\u043E\\u043A'", 
      "'\\u0446\\u0435'", "'='", "'>'", "'<'", "'.'", "'+'", "'-'", "'*'", 
      "'/'", "'%'", "'^'", "'&'", "'|'", "'('", "')'", "'['", "']'", "'\\u003F'", 
      "':'", "'~'", "'''", "'\"'", "'!'", "','"
    },
    std::vector<std::string>{
      "", "NL", "WS", "KW_END", "KW_DIIA", "KW_STRUCTURE", "KW_FOR", "KW_IF", 
      "KW_WAIT", "KW_TAKE", "KW_GIVE", "KW_AS", "KW_TA", "KW_IS", "KW_SPEC", 
      "KW_RETURN", "KW_ASYNC", "KW_SUBJECT", "KW_AND", "KW_OR", "KW_TRY", 
      "KW_CATCH", "KW_ELSE", "KW_THROW", "KW_WHILE", "KW_MODULE", "KW_EQ_WORD", 
      "KW_GR_WORD", "KW_SM_WORD", "KW_HAS_IS_WORD", "KW_MOCKUP", "KW_NOT", 
      "KW_JS", "KW_PARENT", "KW_TSE", "EQUAL", "GREATER", "LESSER", "DOT", 
      "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MOD", "POWER", "AND", "OR", 
      "PAREN_OPEN", "PAREN_CLOSE", "BRACKET_OPEN", "BRACKET_CLOSE", "QUESTION", 
      "COLON", "TILDA", "QUOTE", "DOUBLE_QUOTE", "EXCLAMATION", "COMA", 
      "INTEGER", "FLOAT", "HEX", "BIN", "ID", "KWID", "STRING_MULTILINE", 
      "STRING", "COMP_INST_START", "COMP_INST_END", "COMP_INST_ASSIGN", 
      "COMMENT", "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,70,1385,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
  	63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
  	70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
  	77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,1,0,4,0,168,8,0,
  	11,0,12,0,169,1,1,5,1,173,8,1,10,1,12,1,176,9,1,1,2,1,2,4,2,180,8,2,11,
  	2,12,2,181,1,2,1,2,1,3,1,3,5,3,188,8,3,10,3,12,3,191,9,3,1,3,1,3,1,4,
  	1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,208,8,8,10,8,12,8,
  	211,9,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
  	9,1,9,1,9,3,9,231,8,9,1,10,1,10,1,10,3,10,236,8,10,1,10,1,10,1,10,1,10,
  	3,10,242,8,10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,250,8,11,10,11,12,11,
  	253,9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,12,3,12,270,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,13,3,13,282,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,13,3,13,295,8,13,3,13,297,8,13,1,13,1,13,1,13,1,13,3,13,303,8,
  	13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,5,14,312,8,14,10,14,12,14,315,9,
  	14,1,15,1,15,1,16,3,16,320,8,16,1,16,1,16,1,16,1,16,1,16,3,16,327,8,16,
  	1,16,1,16,1,16,1,16,1,16,3,16,334,8,16,1,17,1,17,1,17,1,17,1,17,1,17,
  	5,17,342,8,17,10,17,12,17,345,9,17,1,18,1,18,1,18,1,18,3,18,351,8,18,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,362,8,19,1,19,1,19,
  	1,20,1,20,1,20,1,20,5,20,370,8,20,10,20,12,20,373,9,20,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,387,8,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,400,8,21,3,21,402,8,
  	21,1,21,1,21,1,21,1,21,3,21,408,8,21,1,21,1,21,1,22,1,22,1,22,1,22,5,
  	22,416,8,22,10,22,12,22,419,9,22,1,23,1,23,1,24,1,24,1,24,1,24,3,24,427,
  	8,24,1,24,1,24,3,24,431,8,24,1,24,1,24,1,24,1,24,1,24,3,24,438,8,24,1,
  	24,1,24,1,24,1,24,1,24,1,24,3,24,446,8,24,1,24,1,24,1,24,1,24,3,24,452,
  	8,24,1,24,1,24,1,24,1,24,1,24,3,24,459,8,24,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,26,1,26,3,26,471,8,26,1,26,1,26,3,26,475,8,26,1,26,1,
  	26,1,26,1,26,1,26,3,26,482,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
  	26,3,26,492,8,26,1,26,1,26,1,26,1,26,3,26,498,8,26,1,26,1,26,1,26,1,26,
  	1,26,3,26,505,8,26,1,26,1,26,1,26,1,26,3,26,511,8,26,1,26,1,26,1,27,1,
  	27,1,27,1,27,1,27,1,27,1,27,3,27,522,8,27,1,27,1,27,1,27,1,27,1,27,1,
  	27,3,27,530,8,27,1,27,1,27,1,27,3,27,535,8,27,1,28,1,28,1,28,1,28,3,28,
  	541,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,551,8,28,1,28,3,
  	28,554,8,28,1,28,1,28,1,28,1,28,3,28,560,8,28,1,28,1,28,1,29,1,29,3,29,
  	566,8,29,1,30,1,30,1,30,1,30,1,30,1,30,3,30,574,8,30,1,30,1,30,1,30,1,
  	31,1,31,1,31,1,31,1,31,1,31,3,31,585,8,31,1,31,1,31,1,31,1,31,1,31,1,
  	31,1,31,3,31,594,8,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,3,32,607,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,
  	33,618,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,630,
  	8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,639,8,35,1,35,1,35,1,36,
  	1,36,1,36,1,36,1,36,3,36,648,8,36,1,36,1,36,1,36,3,36,653,8,36,1,36,1,
  	36,1,36,1,36,3,36,659,8,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,
  	38,3,38,670,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,681,
  	8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,
  	695,8,38,3,38,697,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,707,
  	8,39,10,39,12,39,710,9,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,
  	3,40,721,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,731,8,41,10,
  	41,12,41,734,9,41,1,42,1,42,1,42,1,42,1,42,1,42,3,42,742,8,42,1,43,1,
  	43,1,43,1,43,1,43,1,43,1,43,3,43,751,8,43,1,43,1,43,1,43,1,43,1,43,1,
  	43,3,43,759,8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
  	43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,784,
  	8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
  	1,43,3,43,800,8,43,1,43,1,43,1,43,1,43,1,43,3,43,807,8,43,1,43,1,43,1,
  	43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
  	43,5,43,826,8,43,10,43,12,43,829,9,43,1,44,1,44,1,44,1,44,1,44,1,44,1,
  	44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
  	44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,864,
  	8,44,10,44,12,44,867,9,44,1,45,1,45,1,45,1,45,1,45,1,45,5,45,875,8,45,
  	10,45,12,45,878,9,45,1,46,1,46,1,46,1,46,1,46,1,46,5,46,886,8,46,10,46,
  	12,46,889,9,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,5,48,899,8,48,
  	10,48,12,48,902,9,48,1,49,1,49,3,49,906,8,49,1,49,1,49,1,49,1,49,1,49,
  	1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,922,8,50,1,50,1,50,
  	1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
  	1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,4,50,950,8,50,11,50,
  	12,50,951,1,50,1,50,1,50,1,50,1,50,1,50,3,50,960,8,50,1,50,1,50,1,50,
  	3,50,965,8,50,1,50,1,50,1,50,1,50,3,50,971,8,50,1,50,1,50,1,50,1,50,1,
  	50,1,50,1,50,3,50,980,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,
  	50,990,8,50,1,50,1,50,1,50,1,50,3,50,996,8,50,1,50,1,50,1,50,1,50,3,50,
  	1002,8,50,1,50,1,50,1,50,1,50,3,50,1008,8,50,1,50,1,50,3,50,1012,8,50,
  	1,51,1,51,1,51,1,51,1,52,1,52,1,52,3,52,1021,8,52,1,53,1,53,3,53,1025,
  	8,53,1,53,1,53,1,53,1,53,3,53,1031,8,53,1,53,1,53,1,53,1,53,1,53,1,54,
  	1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,
  	1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
  	1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
  	1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
  	1,56,1,56,1,56,1,56,1,56,3,56,1100,8,56,1,57,1,57,1,57,1,57,1,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,1,58,5,58,1115,8,58,10,58,12,58,1118,9,
  	58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,59,5,59,1136,8,59,10,59,12,59,1139,9,59,1,60,1,60,1,60,1,60,
  	1,60,1,60,1,60,1,60,1,60,3,60,1150,8,60,1,60,1,60,5,60,1154,8,60,10,60,
  	12,60,1157,9,60,1,61,1,61,3,61,1161,8,61,1,62,1,62,1,62,1,62,1,62,1,62,
  	1,62,1,62,3,62,1171,8,62,1,63,1,63,1,63,1,63,1,63,1,63,5,63,1179,8,63,
  	10,63,12,63,1182,9,63,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,
  	65,5,65,1194,8,65,10,65,12,65,1197,9,65,1,66,1,66,1,67,1,67,1,67,1,67,
  	1,67,1,67,5,67,1207,8,67,10,67,12,67,1210,9,67,1,68,1,68,1,68,1,68,1,
  	68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,5,69,1224,8,69,10,69,12,69,1227,
  	9,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1239,8,69,
  	3,69,1241,8,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1250,8,69,3,69,
  	1252,8,69,1,70,1,70,1,70,1,70,3,70,1258,8,70,1,70,1,70,1,70,1,70,1,70,
  	3,70,1265,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1274,8,71,1,72,
  	1,72,1,72,1,72,5,72,1280,8,72,10,72,12,72,1283,9,72,1,73,1,73,3,73,1287,
  	8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,1298,8,74,1,75,
  	1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1311,8,76,1,77,
  	1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1322,8,78,1,79,1,79,1,79,
  	1,79,1,79,1,79,3,79,1330,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
  	1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
  	1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,
  	1367,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,
  	1,82,1,82,1,82,1,82,1,82,0,4,86,88,116,118,83,0,2,4,6,8,10,12,14,16,18,
  	20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
  	66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
  	110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
  	146,148,150,152,154,156,158,160,162,164,0,3,1,0,58,61,1,0,64,65,1,0,39,
  	40,1535,0,167,1,0,0,0,2,174,1,0,0,0,4,177,1,0,0,0,6,185,1,0,0,0,8,194,
  	1,0,0,0,10,196,1,0,0,0,12,198,1,0,0,0,14,200,1,0,0,0,16,203,1,0,0,0,18,
  	230,1,0,0,0,20,232,1,0,0,0,22,245,1,0,0,0,24,269,1,0,0,0,26,271,1,0,0,
  	0,28,307,1,0,0,0,30,316,1,0,0,0,32,319,1,0,0,0,34,335,1,0,0,0,36,350,
  	1,0,0,0,38,352,1,0,0,0,40,365,1,0,0,0,42,374,1,0,0,0,44,411,1,0,0,0,46,
  	420,1,0,0,0,48,422,1,0,0,0,50,460,1,0,0,0,52,470,1,0,0,0,54,514,1,0,0,
  	0,56,536,1,0,0,0,58,565,1,0,0,0,60,567,1,0,0,0,62,578,1,0,0,0,64,606,
  	1,0,0,0,66,617,1,0,0,0,68,629,1,0,0,0,70,631,1,0,0,0,72,642,1,0,0,0,74,
  	662,1,0,0,0,76,696,1,0,0,0,78,698,1,0,0,0,80,714,1,0,0,0,82,722,1,0,0,
  	0,84,735,1,0,0,0,86,783,1,0,0,0,88,830,1,0,0,0,90,868,1,0,0,0,92,879,
  	1,0,0,0,94,890,1,0,0,0,96,892,1,0,0,0,98,905,1,0,0,0,100,1011,1,0,0,0,
  	102,1013,1,0,0,0,104,1020,1,0,0,0,106,1024,1,0,0,0,108,1037,1,0,0,0,110,
  	1047,1,0,0,0,112,1099,1,0,0,0,114,1101,1,0,0,0,116,1105,1,0,0,0,118,1119,
  	1,0,0,0,120,1140,1,0,0,0,122,1160,1,0,0,0,124,1162,1,0,0,0,126,1172,1,
  	0,0,0,128,1183,1,0,0,0,130,1187,1,0,0,0,132,1198,1,0,0,0,134,1200,1,0,
  	0,0,136,1211,1,0,0,0,138,1251,1,0,0,0,140,1253,1,0,0,0,142,1273,1,0,0,
  	0,144,1275,1,0,0,0,146,1286,1,0,0,0,148,1297,1,0,0,0,150,1299,1,0,0,0,
  	152,1310,1,0,0,0,154,1312,1,0,0,0,156,1321,1,0,0,0,158,1329,1,0,0,0,160,
  	1366,1,0,0,0,162,1368,1,0,0,0,164,1378,1,0,0,0,166,168,5,2,0,0,167,166,
  	1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,1,1,0,0,0,
  	171,173,5,2,0,0,172,171,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,174,175,
  	1,0,0,0,175,3,1,0,0,0,176,174,1,0,0,0,177,179,3,2,1,0,178,180,5,1,0,0,
  	179,178,1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,183,
  	1,0,0,0,183,184,3,2,1,0,184,5,1,0,0,0,185,189,3,2,1,0,186,188,5,1,0,0,
  	187,186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,192,
  	1,0,0,0,191,189,1,0,0,0,192,193,3,2,1,0,193,7,1,0,0,0,194,195,7,0,0,0,
  	195,9,1,0,0,0,196,197,7,1,0,0,197,11,1,0,0,0,198,199,5,62,0,0,199,13,
  	1,0,0,0,200,201,3,16,8,0,201,202,5,0,0,1,202,15,1,0,0,0,203,209,3,18,
  	9,0,204,205,3,4,2,0,205,206,3,18,9,0,206,208,1,0,0,0,207,204,1,0,0,0,
  	208,211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,17,1,0,0,0,211,209,
  	1,0,0,0,212,231,3,20,10,0,213,231,3,26,13,0,214,231,3,36,18,0,215,231,
  	3,52,26,0,216,231,3,54,27,0,217,231,3,56,28,0,218,231,3,70,35,0,219,231,
  	3,72,36,0,220,231,3,100,50,0,221,231,3,102,51,0,222,231,3,74,37,0,223,
  	231,3,114,57,0,224,231,3,104,52,0,225,231,3,76,38,0,226,231,3,82,41,0,
  	227,231,3,162,81,0,228,231,3,164,82,0,229,231,3,6,3,0,230,212,1,0,0,0,
  	230,213,1,0,0,0,230,214,1,0,0,0,230,215,1,0,0,0,230,216,1,0,0,0,230,217,
  	1,0,0,0,230,218,1,0,0,0,230,219,1,0,0,0,230,220,1,0,0,0,230,221,1,0,0,
  	0,230,222,1,0,0,0,230,223,1,0,0,0,230,224,1,0,0,0,230,225,1,0,0,0,230,
  	226,1,0,0,0,230,227,1,0,0,0,230,228,1,0,0,0,230,229,1,0,0,0,231,19,1,
  	0,0,0,232,233,5,25,0,0,233,235,3,0,0,0,234,236,3,12,6,0,235,234,1,0,0,
  	0,235,236,1,0,0,0,236,237,1,0,0,0,237,241,3,4,2,0,238,239,3,22,11,0,239,
  	240,3,4,2,0,240,242,1,0,0,0,241,238,1,0,0,0,241,242,1,0,0,0,242,243,1,
  	0,0,0,243,244,5,3,0,0,244,21,1,0,0,0,245,251,3,24,12,0,246,247,3,4,2,
  	0,247,248,3,24,12,0,248,250,1,0,0,0,249,246,1,0,0,0,250,253,1,0,0,0,251,
  	249,1,0,0,0,251,252,1,0,0,0,252,23,1,0,0,0,253,251,1,0,0,0,254,270,3,
  	20,10,0,255,270,3,26,13,0,256,270,3,36,18,0,257,270,3,52,26,0,258,270,
  	3,54,27,0,259,270,3,56,28,0,260,270,3,70,35,0,261,270,3,72,36,0,262,270,
  	3,100,50,0,263,270,3,102,51,0,264,270,3,74,37,0,265,270,3,114,57,0,266,
  	270,3,104,52,0,267,270,3,82,41,0,268,270,3,6,3,0,269,254,1,0,0,0,269,
  	255,1,0,0,0,269,256,1,0,0,0,269,257,1,0,0,0,269,258,1,0,0,0,269,259,1,
  	0,0,0,269,260,1,0,0,0,269,261,1,0,0,0,269,262,1,0,0,0,269,263,1,0,0,0,
  	269,264,1,0,0,0,269,265,1,0,0,0,269,266,1,0,0,0,269,267,1,0,0,0,269,268,
  	1,0,0,0,270,25,1,0,0,0,271,272,5,5,0,0,272,273,3,0,0,0,273,281,3,12,6,
  	0,274,275,3,2,1,0,275,276,5,37,0,0,276,277,3,2,1,0,277,278,3,34,17,0,
  	278,279,3,2,1,0,279,280,5,36,0,0,280,282,1,0,0,0,281,274,1,0,0,0,281,
  	282,1,0,0,0,282,296,1,0,0,0,283,284,3,0,0,0,284,285,5,13,0,0,285,286,
  	3,0,0,0,286,287,3,118,59,0,287,294,3,2,1,0,288,289,5,37,0,0,289,290,3,
  	2,1,0,290,291,3,34,17,0,291,292,3,2,1,0,292,293,5,36,0,0,293,295,1,0,
  	0,0,294,288,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,283,1,0,0,0,296,
  	297,1,0,0,0,297,298,1,0,0,0,298,302,3,4,2,0,299,300,3,28,14,0,300,301,
  	3,4,2,0,301,303,1,0,0,0,302,299,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,
  	0,304,305,3,6,3,0,305,306,5,3,0,0,306,27,1,0,0,0,307,313,3,30,15,0,308,
  	309,3,4,2,0,309,310,3,30,15,0,310,312,1,0,0,0,311,308,1,0,0,0,312,315,
  	1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,29,1,0,0,0,315,313,1,0,0,
  	0,316,317,3,32,16,0,317,31,1,0,0,0,318,320,5,14,0,0,319,318,1,0,0,0,319,
  	320,1,0,0,0,320,321,1,0,0,0,321,322,3,0,0,0,322,326,3,12,6,0,323,324,
  	3,0,0,0,324,325,3,120,60,0,325,327,1,0,0,0,326,323,1,0,0,0,326,327,1,
  	0,0,0,327,333,1,0,0,0,328,329,3,2,1,0,329,330,5,35,0,0,330,331,3,2,1,
  	0,331,332,3,142,71,0,332,334,1,0,0,0,333,328,1,0,0,0,333,334,1,0,0,0,
  	334,33,1,0,0,0,335,343,3,12,6,0,336,337,3,2,1,0,337,338,5,57,0,0,338,
  	339,3,2,1,0,339,340,3,12,6,0,340,342,1,0,0,0,341,336,1,0,0,0,342,345,
  	1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,35,1,0,0,0,345,343,1,0,0,
  	0,346,351,3,38,19,0,347,351,3,42,21,0,348,351,3,48,24,0,349,351,3,50,
  	25,0,350,346,1,0,0,0,350,347,1,0,0,0,350,348,1,0,0,0,350,349,1,0,0,0,
  	351,37,1,0,0,0,352,353,5,30,0,0,353,354,3,0,0,0,354,355,5,25,0,0,355,
  	356,3,0,0,0,356,357,3,12,6,0,357,361,3,4,2,0,358,359,3,40,20,0,359,360,
  	3,4,2,0,360,362,1,0,0,0,361,358,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,
  	0,363,364,5,3,0,0,364,39,1,0,0,0,365,371,3,36,18,0,366,367,3,4,2,0,367,
  	368,3,36,18,0,368,370,1,0,0,0,369,366,1,0,0,0,370,373,1,0,0,0,371,369,
  	1,0,0,0,371,372,1,0,0,0,372,41,1,0,0,0,373,371,1,0,0,0,374,375,5,30,0,
  	0,375,376,3,0,0,0,376,377,5,5,0,0,377,378,3,0,0,0,378,386,3,12,6,0,379,
  	380,3,2,1,0,380,381,5,37,0,0,381,382,3,2,1,0,382,383,3,34,17,0,383,384,
  	3,2,1,0,384,385,5,36,0,0,385,387,1,0,0,0,386,379,1,0,0,0,386,387,1,0,
  	0,0,387,401,1,0,0,0,388,389,3,0,0,0,389,390,5,13,0,0,390,391,3,0,0,0,
  	391,399,3,118,59,0,392,393,3,2,1,0,393,394,5,37,0,0,394,395,3,2,1,0,395,
  	396,3,34,17,0,396,397,3,2,1,0,397,398,5,36,0,0,398,400,1,0,0,0,399,392,
  	1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,401,388,1,0,0,0,401,402,1,0,0,
  	0,402,403,1,0,0,0,403,407,3,4,2,0,404,405,3,44,22,0,405,406,3,4,2,0,406,
  	408,1,0,0,0,407,404,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,410,5,
  	3,0,0,410,43,1,0,0,0,411,417,3,46,23,0,412,413,3,4,2,0,413,414,3,46,23,
  	0,414,416,1,0,0,0,415,412,1,0,0,0,416,419,1,0,0,0,417,415,1,0,0,0,417,
  	418,1,0,0,0,418,45,1,0,0,0,419,417,1,0,0,0,420,421,3,32,16,0,421,47,1,
  	0,0,0,422,423,5,30,0,0,423,426,3,0,0,0,424,425,5,16,0,0,425,427,3,0,0,
  	0,426,424,1,0,0,0,426,427,1,0,0,0,427,430,1,0,0,0,428,429,5,14,0,0,429,
  	431,3,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,433,5,
  	4,0,0,433,437,3,0,0,0,434,435,3,12,6,0,435,436,5,38,0,0,436,438,1,0,0,
  	0,437,434,1,0,0,0,437,438,1,0,0,0,438,439,1,0,0,0,439,445,3,12,6,0,440,
  	441,3,2,1,0,441,442,5,37,0,0,442,443,3,34,17,0,443,444,5,36,0,0,444,446,
  	1,0,0,0,445,440,1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,0,447,448,3,2,1,
  	0,448,449,5,47,0,0,449,451,3,6,3,0,450,452,3,138,69,0,451,450,1,0,0,0,
  	451,452,1,0,0,0,452,453,1,0,0,0,453,454,3,6,3,0,454,458,5,48,0,0,455,
  	456,3,0,0,0,456,457,3,120,60,0,457,459,1,0,0,0,458,455,1,0,0,0,458,459,
  	1,0,0,0,459,49,1,0,0,0,460,461,5,30,0,0,461,462,3,0,0,0,462,463,5,17,
  	0,0,463,464,3,0,0,0,464,465,3,12,6,0,465,466,3,0,0,0,466,467,3,120,60,
  	0,467,51,1,0,0,0,468,469,5,16,0,0,469,471,3,0,0,0,470,468,1,0,0,0,470,
  	471,1,0,0,0,471,474,1,0,0,0,472,473,5,14,0,0,473,475,3,0,0,0,474,472,
  	1,0,0,0,474,475,1,0,0,0,475,476,1,0,0,0,476,477,5,4,0,0,477,481,3,0,0,
  	0,478,479,3,12,6,0,479,480,5,38,0,0,480,482,1,0,0,0,481,478,1,0,0,0,481,
  	482,1,0,0,0,482,483,1,0,0,0,483,491,3,12,6,0,484,485,3,2,1,0,485,486,
  	5,37,0,0,486,487,3,2,1,0,487,488,3,34,17,0,488,489,3,2,1,0,489,490,5,
  	36,0,0,490,492,1,0,0,0,491,484,1,0,0,0,491,492,1,0,0,0,492,493,1,0,0,
  	0,493,494,3,2,1,0,494,495,5,47,0,0,495,497,3,6,3,0,496,498,3,138,69,0,
  	497,496,1,0,0,0,497,498,1,0,0,0,498,499,1,0,0,0,499,500,3,6,3,0,500,504,
  	5,48,0,0,501,502,3,0,0,0,502,503,3,120,60,0,503,505,1,0,0,0,504,501,1,
  	0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,510,3,4,2,0,507,508,3,144,72,
  	0,508,509,3,4,2,0,509,511,1,0,0,0,510,507,1,0,0,0,510,511,1,0,0,0,511,
  	512,1,0,0,0,512,513,5,3,0,0,513,53,1,0,0,0,514,515,5,7,0,0,515,516,3,
  	0,0,0,516,517,3,100,50,0,517,521,3,4,2,0,518,519,3,144,72,0,519,520,3,
  	4,2,0,520,522,1,0,0,0,521,518,1,0,0,0,521,522,1,0,0,0,522,534,1,0,0,0,
  	523,524,3,0,0,0,524,525,5,22,0,0,525,526,3,4,2,0,526,527,3,144,72,0,527,
  	528,3,4,2,0,528,530,1,0,0,0,529,523,1,0,0,0,529,530,1,0,0,0,530,531,1,
  	0,0,0,531,535,5,3,0,0,532,533,5,22,0,0,533,535,3,54,27,0,534,529,1,0,
  	0,0,534,532,1,0,0,0,535,55,1,0,0,0,536,537,5,6,0,0,537,540,3,0,0,0,538,
  	541,3,86,43,0,539,541,3,58,29,0,540,538,1,0,0,0,540,539,1,0,0,0,541,542,
  	1,0,0,0,542,543,3,0,0,0,543,544,5,11,0,0,544,550,3,0,0,0,545,546,3,12,
  	6,0,546,547,3,2,1,0,547,548,5,57,0,0,548,549,3,2,1,0,549,551,1,0,0,0,
  	550,545,1,0,0,0,550,551,1,0,0,0,551,553,1,0,0,0,552,554,3,12,6,0,553,
  	552,1,0,0,0,553,554,1,0,0,0,554,555,1,0,0,0,555,559,3,4,2,0,556,557,3,
  	144,72,0,557,558,3,4,2,0,558,560,1,0,0,0,559,556,1,0,0,0,559,560,1,0,
  	0,0,560,561,1,0,0,0,561,562,5,3,0,0,562,57,1,0,0,0,563,566,3,60,30,0,
  	564,566,3,62,31,0,565,563,1,0,0,0,565,564,1,0,0,0,566,59,1,0,0,0,567,
  	568,3,64,32,0,568,569,3,2,1,0,569,570,5,38,0,0,570,571,5,38,0,0,571,573,
  	3,2,1,0,572,574,3,68,34,0,573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,
  	0,0,575,576,3,2,1,0,576,577,3,64,32,0,577,61,1,0,0,0,578,579,3,64,32,
  	0,579,580,3,2,1,0,580,581,5,38,0,0,581,582,5,38,0,0,582,584,3,2,1,0,583,
  	585,3,66,33,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,587,
  	3,2,1,0,587,588,3,64,32,0,588,589,3,2,1,0,589,590,5,38,0,0,590,591,5,
  	38,0,0,591,593,3,2,1,0,592,594,3,68,34,0,593,592,1,0,0,0,593,594,1,0,
  	0,0,594,595,1,0,0,0,595,596,3,2,1,0,596,597,3,64,32,0,597,63,1,0,0,0,
  	598,607,3,8,4,0,599,607,3,12,6,0,600,601,5,47,0,0,601,602,3,6,3,0,602,
  	603,3,100,50,0,603,604,3,6,3,0,604,605,5,48,0,0,605,607,1,0,0,0,606,598,
  	1,0,0,0,606,599,1,0,0,0,606,600,1,0,0,0,607,65,1,0,0,0,608,618,5,39,0,
  	0,609,618,5,40,0,0,610,618,5,41,0,0,611,618,5,42,0,0,612,618,5,43,0,0,
  	613,614,5,42,0,0,614,618,5,42,0,0,615,616,5,41,0,0,616,618,5,41,0,0,617,
  	608,1,0,0,0,617,609,1,0,0,0,617,610,1,0,0,0,617,611,1,0,0,0,617,612,1,
  	0,0,0,617,613,1,0,0,0,617,615,1,0,0,0,618,67,1,0,0,0,619,620,5,56,0,0,
  	620,630,5,35,0,0,621,622,5,35,0,0,622,630,5,35,0,0,623,630,5,36,0,0,624,
  	630,5,37,0,0,625,626,5,36,0,0,626,630,5,35,0,0,627,628,5,37,0,0,628,630,
  	5,35,0,0,629,619,1,0,0,0,629,621,1,0,0,0,629,623,1,0,0,0,629,624,1,0,
  	0,0,629,625,1,0,0,0,629,627,1,0,0,0,630,69,1,0,0,0,631,632,5,24,0,0,632,
  	633,3,0,0,0,633,634,3,100,50,0,634,638,3,4,2,0,635,636,3,144,72,0,636,
  	637,3,4,2,0,637,639,1,0,0,0,638,635,1,0,0,0,638,639,1,0,0,0,639,640,1,
  	0,0,0,640,641,5,3,0,0,641,71,1,0,0,0,642,643,5,20,0,0,643,647,3,4,2,0,
  	644,645,3,144,72,0,645,646,3,4,2,0,646,648,1,0,0,0,647,644,1,0,0,0,647,
  	648,1,0,0,0,648,649,1,0,0,0,649,650,5,21,0,0,650,652,3,0,0,0,651,653,
  	3,12,6,0,652,651,1,0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,658,3,4,
  	2,0,655,656,3,144,72,0,656,657,3,4,2,0,657,659,1,0,0,0,658,655,1,0,0,
  	0,658,659,1,0,0,0,659,660,1,0,0,0,660,661,5,3,0,0,661,73,1,0,0,0,662,
  	663,5,32,0,0,663,664,3,0,0,0,664,665,3,10,5,0,665,75,1,0,0,0,666,667,
  	5,9,0,0,667,669,3,0,0,0,668,670,5,38,0,0,669,668,1,0,0,0,669,670,1,0,
  	0,0,670,671,1,0,0,0,671,680,3,116,58,0,672,673,3,2,1,0,673,674,3,78,39,
  	0,674,681,1,0,0,0,675,676,3,0,0,0,676,677,5,11,0,0,677,678,3,0,0,0,678,
  	679,3,12,6,0,679,681,1,0,0,0,680,672,1,0,0,0,680,675,1,0,0,0,680,681,
  	1,0,0,0,681,697,1,0,0,0,682,683,5,9,0,0,683,684,3,0,0,0,684,685,3,12,
  	6,0,685,686,3,0,0,0,686,687,5,65,0,0,687,688,3,0,0,0,688,694,5,65,0,0,
  	689,690,3,0,0,0,690,691,5,11,0,0,691,692,3,0,0,0,692,693,3,12,6,0,693,
  	695,1,0,0,0,694,689,1,0,0,0,694,695,1,0,0,0,695,697,1,0,0,0,696,666,1,
  	0,0,0,696,682,1,0,0,0,697,77,1,0,0,0,698,699,5,49,0,0,699,700,3,2,1,0,
  	700,708,3,80,40,0,701,702,3,2,1,0,702,703,5,57,0,0,703,704,3,2,1,0,704,
  	705,3,80,40,0,705,707,1,0,0,0,706,701,1,0,0,0,707,710,1,0,0,0,708,706,
  	1,0,0,0,708,709,1,0,0,0,709,711,1,0,0,0,710,708,1,0,0,0,711,712,3,2,1,
  	0,712,713,5,50,0,0,713,79,1,0,0,0,714,720,3,12,6,0,715,716,3,0,0,0,716,
  	717,5,11,0,0,717,718,3,0,0,0,718,719,3,12,6,0,719,721,1,0,0,0,720,715,
  	1,0,0,0,720,721,1,0,0,0,721,81,1,0,0,0,722,723,5,10,0,0,723,724,3,0,0,
  	0,724,732,3,84,42,0,725,726,3,6,3,0,726,727,5,57,0,0,727,728,3,6,3,0,
  	728,729,3,84,42,0,729,731,1,0,0,0,730,725,1,0,0,0,731,734,1,0,0,0,732,
  	730,1,0,0,0,732,733,1,0,0,0,733,83,1,0,0,0,734,732,1,0,0,0,735,741,3,
  	12,6,0,736,737,3,0,0,0,737,738,5,11,0,0,738,739,3,0,0,0,739,740,3,12,
  	6,0,740,742,1,0,0,0,741,736,1,0,0,0,741,742,1,0,0,0,742,85,1,0,0,0,743,
  	744,6,43,-1,0,744,784,3,8,4,0,745,784,3,10,5,0,746,784,3,12,6,0,747,748,
  	5,49,0,0,748,750,3,6,3,0,749,751,3,92,46,0,750,749,1,0,0,0,750,751,1,
  	0,0,0,751,752,1,0,0,0,752,753,3,6,3,0,753,754,5,50,0,0,754,784,1,0,0,
  	0,755,756,5,47,0,0,756,758,3,6,3,0,757,759,3,96,48,0,758,757,1,0,0,0,
  	758,759,1,0,0,0,759,760,1,0,0,0,760,761,3,6,3,0,761,762,5,48,0,0,762,
  	784,1,0,0,0,763,764,5,39,0,0,764,784,3,86,43,9,765,766,5,40,0,0,766,784,
  	3,86,43,8,767,768,5,40,0,0,768,769,5,40,0,0,769,784,3,86,43,7,770,771,
  	5,39,0,0,771,772,5,39,0,0,772,784,3,86,43,6,773,774,5,56,0,0,774,784,
  	3,86,43,3,775,776,5,53,0,0,776,784,3,86,43,2,777,778,5,47,0,0,778,779,
  	3,6,3,0,779,780,3,100,50,0,780,781,3,6,3,0,781,782,5,48,0,0,782,784,1,
  	0,0,0,783,743,1,0,0,0,783,745,1,0,0,0,783,746,1,0,0,0,783,747,1,0,0,0,
  	783,755,1,0,0,0,783,763,1,0,0,0,783,765,1,0,0,0,783,767,1,0,0,0,783,770,
  	1,0,0,0,783,773,1,0,0,0,783,775,1,0,0,0,783,777,1,0,0,0,784,827,1,0,0,
  	0,785,786,10,14,0,0,786,787,3,6,3,0,787,788,5,38,0,0,788,789,3,6,3,0,
  	789,790,3,12,6,0,790,826,1,0,0,0,791,799,10,13,0,0,792,793,3,2,1,0,793,
  	794,5,37,0,0,794,795,3,2,1,0,795,796,3,90,45,0,796,797,3,2,1,0,797,798,
  	5,36,0,0,798,800,1,0,0,0,799,792,1,0,0,0,799,800,1,0,0,0,800,801,1,0,
  	0,0,801,802,3,2,1,0,802,803,5,47,0,0,803,806,3,6,3,0,804,807,3,130,65,
  	0,805,807,3,134,67,0,806,804,1,0,0,0,806,805,1,0,0,0,806,807,1,0,0,0,
  	807,808,1,0,0,0,808,809,3,6,3,0,809,810,5,48,0,0,810,826,1,0,0,0,811,
  	812,10,12,0,0,812,813,3,2,1,0,813,814,5,49,0,0,814,815,3,6,3,0,815,816,
  	3,100,50,0,816,817,3,6,3,0,817,818,5,50,0,0,818,826,1,0,0,0,819,820,10,
  	5,0,0,820,821,5,40,0,0,821,826,5,40,0,0,822,823,10,4,0,0,823,824,5,39,
  	0,0,824,826,5,39,0,0,825,785,1,0,0,0,825,791,1,0,0,0,825,811,1,0,0,0,
  	825,819,1,0,0,0,825,822,1,0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,
  	1,0,0,0,828,87,1,0,0,0,829,827,1,0,0,0,830,831,6,44,-1,0,831,832,3,86,
  	43,0,832,865,1,0,0,0,833,834,10,5,0,0,834,835,3,6,3,0,835,836,3,152,76,
  	0,836,837,3,6,3,0,837,838,3,88,44,6,838,864,1,0,0,0,839,840,10,4,0,0,
  	840,841,3,6,3,0,841,842,3,154,77,0,842,843,3,6,3,0,843,844,3,88,44,5,
  	844,864,1,0,0,0,845,846,10,3,0,0,846,847,3,6,3,0,847,848,3,156,78,0,848,
  	849,3,6,3,0,849,850,3,88,44,4,850,864,1,0,0,0,851,852,10,2,0,0,852,853,
  	3,6,3,0,853,854,3,160,80,0,854,855,3,6,3,0,855,856,3,88,44,3,856,864,
  	1,0,0,0,857,858,10,1,0,0,858,859,3,6,3,0,859,860,3,158,79,0,860,861,3,
  	6,3,0,861,862,3,88,44,2,862,864,1,0,0,0,863,833,1,0,0,0,863,839,1,0,0,
  	0,863,845,1,0,0,0,863,851,1,0,0,0,863,857,1,0,0,0,864,867,1,0,0,0,865,
  	863,1,0,0,0,865,866,1,0,0,0,866,89,1,0,0,0,867,865,1,0,0,0,868,876,3,
  	120,60,0,869,870,3,2,1,0,870,871,5,57,0,0,871,872,3,2,1,0,872,873,3,120,
  	60,0,873,875,1,0,0,0,874,869,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,
  	876,877,1,0,0,0,877,91,1,0,0,0,878,876,1,0,0,0,879,887,3,94,47,0,880,
  	881,3,6,3,0,881,882,5,57,0,0,882,883,3,6,3,0,883,884,3,94,47,0,884,886,
  	1,0,0,0,885,880,1,0,0,0,886,889,1,0,0,0,887,885,1,0,0,0,887,888,1,0,0,
  	0,888,93,1,0,0,0,889,887,1,0,0,0,890,891,3,100,50,0,891,95,1,0,0,0,892,
  	900,3,98,49,0,893,894,3,6,3,0,894,895,5,57,0,0,895,896,3,6,3,0,896,897,
  	3,98,49,0,897,899,1,0,0,0,898,893,1,0,0,0,899,902,1,0,0,0,900,898,1,0,
  	0,0,900,901,1,0,0,0,901,97,1,0,0,0,902,900,1,0,0,0,903,906,3,12,6,0,904,
  	906,5,65,0,0,905,903,1,0,0,0,905,904,1,0,0,0,906,907,1,0,0,0,907,908,
  	3,2,1,0,908,909,5,35,0,0,909,910,3,2,1,0,910,911,3,100,50,0,911,99,1,
  	0,0,0,912,913,5,33,0,0,913,914,3,6,3,0,914,915,5,38,0,0,915,916,3,6,3,
  	0,916,917,3,12,6,0,917,918,5,47,0,0,918,921,3,6,3,0,919,922,3,130,65,
  	0,920,922,3,134,67,0,921,919,1,0,0,0,921,920,1,0,0,0,921,922,1,0,0,0,
  	922,923,1,0,0,0,923,924,3,6,3,0,924,925,5,48,0,0,925,1012,1,0,0,0,926,
  	1012,3,88,44,0,927,928,3,86,43,0,928,929,3,0,0,0,929,930,5,11,0,0,930,
  	931,3,0,0,0,931,932,3,122,61,0,932,1012,1,0,0,0,933,934,3,88,44,0,934,
  	935,3,6,3,0,935,936,5,51,0,0,936,937,3,6,3,0,937,938,3,100,50,0,938,939,
  	3,6,3,0,939,940,5,52,0,0,940,941,3,6,3,0,941,942,3,100,50,0,942,1012,
  	1,0,0,0,943,949,3,86,43,0,944,945,3,0,0,0,945,946,5,12,0,0,946,947,3,
  	0,0,0,947,948,3,86,43,0,948,950,1,0,0,0,949,944,1,0,0,0,950,951,1,0,0,
  	0,951,949,1,0,0,0,951,952,1,0,0,0,952,1012,1,0,0,0,953,954,5,8,0,0,954,
  	955,3,0,0,0,955,956,3,88,44,0,956,1012,1,0,0,0,957,958,5,16,0,0,958,960,
  	3,0,0,0,959,957,1,0,0,0,959,960,1,0,0,0,960,961,1,0,0,0,961,962,5,47,
  	0,0,962,964,3,6,3,0,963,965,3,138,69,0,964,963,1,0,0,0,964,965,1,0,0,
  	0,965,966,1,0,0,0,966,967,3,6,3,0,967,968,5,48,0,0,968,970,3,0,0,0,969,
  	971,3,120,60,0,970,969,1,0,0,0,970,971,1,0,0,0,971,972,1,0,0,0,972,973,
  	3,0,0,0,973,974,5,52,0,0,974,975,3,6,3,0,975,976,3,100,50,0,976,1012,
  	1,0,0,0,977,978,5,16,0,0,978,980,3,0,0,0,979,977,1,0,0,0,979,980,1,0,
  	0,0,980,981,1,0,0,0,981,989,5,4,0,0,982,983,3,6,3,0,983,984,5,37,0,0,
  	984,985,3,6,3,0,985,986,3,34,17,0,986,987,3,6,3,0,987,988,5,36,0,0,988,
  	990,1,0,0,0,989,982,1,0,0,0,989,990,1,0,0,0,990,991,1,0,0,0,991,992,3,
  	2,1,0,992,993,5,47,0,0,993,995,3,6,3,0,994,996,3,138,69,0,995,994,1,0,
  	0,0,995,996,1,0,0,0,996,997,1,0,0,0,997,998,3,6,3,0,998,999,5,48,0,0,
  	999,1001,3,0,0,0,1000,1002,3,120,60,0,1001,1000,1,0,0,0,1001,1002,1,0,
  	0,0,1002,1003,1,0,0,0,1003,1007,3,4,2,0,1004,1005,3,144,72,0,1005,1006,
  	3,4,2,0,1006,1008,1,0,0,0,1007,1004,1,0,0,0,1007,1008,1,0,0,0,1008,1009,
  	1,0,0,0,1009,1010,5,3,0,0,1010,1012,1,0,0,0,1011,912,1,0,0,0,1011,926,
  	1,0,0,0,1011,927,1,0,0,0,1011,933,1,0,0,0,1011,943,1,0,0,0,1011,953,1,
  	0,0,0,1011,959,1,0,0,0,1011,979,1,0,0,0,1012,101,1,0,0,0,1013,1014,5,
  	23,0,0,1014,1015,3,0,0,0,1015,1016,3,100,50,0,1016,103,1,0,0,0,1017,1021,
  	3,106,53,0,1018,1021,3,108,54,0,1019,1021,3,110,55,0,1020,1017,1,0,0,
  	0,1020,1018,1,0,0,0,1020,1019,1,0,0,0,1021,105,1,0,0,0,1022,1023,5,17,
  	0,0,1023,1025,3,0,0,0,1024,1022,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,
  	0,0,0,1026,1030,3,12,6,0,1027,1028,3,0,0,0,1028,1029,3,120,60,0,1029,
  	1031,1,0,0,0,1030,1027,1,0,0,0,1030,1031,1,0,0,0,1031,1032,1,0,0,0,1032,
  	1033,3,2,1,0,1033,1034,3,112,56,0,1034,1035,3,2,1,0,1035,1036,3,100,50,
  	0,1036,107,1,0,0,0,1037,1038,3,118,59,0,1038,1039,3,6,3,0,1039,1040,5,
  	38,0,0,1040,1041,3,6,3,0,1041,1042,3,12,6,0,1042,1043,3,2,1,0,1043,1044,
  	3,112,56,0,1044,1045,3,2,1,0,1045,1046,3,100,50,0,1046,109,1,0,0,0,1047,
  	1048,3,118,59,0,1048,1049,5,49,0,0,1049,1050,3,6,3,0,1050,1051,3,100,
  	50,0,1051,1052,3,6,3,0,1052,1053,5,50,0,0,1053,1054,3,2,1,0,1054,1055,
  	3,112,56,0,1055,1056,3,2,1,0,1056,1057,3,100,50,0,1057,111,1,0,0,0,1058,
  	1100,5,34,0,0,1059,1100,5,35,0,0,1060,1061,5,52,0,0,1061,1100,5,35,0,
  	0,1062,1063,5,39,0,0,1063,1100,5,35,0,0,1064,1065,5,40,0,0,1065,1100,
  	5,35,0,0,1066,1067,5,41,0,0,1067,1100,5,35,0,0,1068,1069,5,42,0,0,1069,
  	1100,5,35,0,0,1070,1071,5,42,0,0,1071,1072,5,42,0,0,1072,1100,5,35,0,
  	0,1073,1074,5,43,0,0,1074,1100,5,35,0,0,1075,1076,5,41,0,0,1076,1077,
  	5,41,0,0,1077,1100,5,35,0,0,1078,1079,5,45,0,0,1079,1100,5,35,0,0,1080,
  	1081,5,46,0,0,1081,1100,5,35,0,0,1082,1083,5,37,0,0,1083,1084,5,37,0,
  	0,1084,1100,5,35,0,0,1085,1086,5,36,0,0,1086,1087,5,36,0,0,1087,1100,
  	5,35,0,0,1088,1089,5,44,0,0,1089,1100,5,35,0,0,1090,1091,5,45,0,0,1091,
  	1092,5,45,0,0,1092,1100,5,35,0,0,1093,1094,5,46,0,0,1094,1095,5,46,0,
  	0,1095,1100,5,35,0,0,1096,1097,5,51,0,0,1097,1098,5,51,0,0,1098,1100,
  	5,35,0,0,1099,1058,1,0,0,0,1099,1059,1,0,0,0,1099,1060,1,0,0,0,1099,1062,
  	1,0,0,0,1099,1064,1,0,0,0,1099,1066,1,0,0,0,1099,1068,1,0,0,0,1099,1070,
  	1,0,0,0,1099,1073,1,0,0,0,1099,1075,1,0,0,0,1099,1078,1,0,0,0,1099,1080,
  	1,0,0,0,1099,1082,1,0,0,0,1099,1085,1,0,0,0,1099,1088,1,0,0,0,1099,1090,
  	1,0,0,0,1099,1093,1,0,0,0,1099,1096,1,0,0,0,1100,113,1,0,0,0,1101,1102,
  	5,8,0,0,1102,1103,3,0,0,0,1103,1104,3,104,52,0,1104,115,1,0,0,0,1105,
  	1106,6,58,-1,0,1106,1107,3,12,6,0,1107,1116,1,0,0,0,1108,1109,10,1,0,
  	0,1109,1110,3,6,3,0,1110,1111,5,38,0,0,1111,1112,3,6,3,0,1112,1113,3,
  	12,6,0,1113,1115,1,0,0,0,1114,1108,1,0,0,0,1115,1118,1,0,0,0,1116,1114,
  	1,0,0,0,1116,1117,1,0,0,0,1117,117,1,0,0,0,1118,1116,1,0,0,0,1119,1120,
  	6,59,-1,0,1120,1121,3,12,6,0,1121,1137,1,0,0,0,1122,1123,10,2,0,0,1123,
  	1124,3,6,3,0,1124,1125,5,38,0,0,1125,1126,3,6,3,0,1126,1127,3,12,6,0,
  	1127,1136,1,0,0,0,1128,1129,10,1,0,0,1129,1130,5,49,0,0,1130,1131,3,6,
  	3,0,1131,1132,3,100,50,0,1132,1133,3,6,3,0,1133,1134,5,50,0,0,1134,1136,
  	1,0,0,0,1135,1122,1,0,0,0,1135,1128,1,0,0,0,1136,1139,1,0,0,0,1137,1135,
  	1,0,0,0,1137,1138,1,0,0,0,1138,119,1,0,0,0,1139,1137,1,0,0,0,1140,1155,
  	3,122,61,0,1141,1142,3,2,1,0,1142,1143,5,46,0,0,1143,1144,3,2,1,0,1144,
  	1150,1,0,0,0,1145,1146,3,0,0,0,1146,1147,5,19,0,0,1147,1148,3,0,0,0,1148,
  	1150,1,0,0,0,1149,1141,1,0,0,0,1149,1145,1,0,0,0,1150,1151,1,0,0,0,1151,
  	1152,3,122,61,0,1152,1154,1,0,0,0,1153,1149,1,0,0,0,1154,1157,1,0,0,0,
  	1155,1153,1,0,0,0,1155,1156,1,0,0,0,1156,121,1,0,0,0,1157,1155,1,0,0,
  	0,1158,1161,3,124,62,0,1159,1161,3,128,64,0,1160,1158,1,0,0,0,1160,1159,
  	1,0,0,0,1161,123,1,0,0,0,1162,1170,3,116,58,0,1163,1164,3,2,1,0,1164,
  	1165,5,37,0,0,1165,1166,3,2,1,0,1166,1167,3,126,63,0,1167,1168,3,2,1,
  	0,1168,1169,5,36,0,0,1169,1171,1,0,0,0,1170,1163,1,0,0,0,1170,1171,1,
  	0,0,0,1171,125,1,0,0,0,1172,1180,3,120,60,0,1173,1174,3,2,1,0,1174,1175,
  	5,57,0,0,1175,1176,3,2,1,0,1176,1177,3,120,60,0,1177,1179,1,0,0,0,1178,
  	1173,1,0,0,0,1179,1182,1,0,0,0,1180,1178,1,0,0,0,1180,1181,1,0,0,0,1181,
  	127,1,0,0,0,1182,1180,1,0,0,0,1183,1184,5,49,0,0,1184,1185,5,50,0,0,1185,
  	1186,3,122,61,0,1186,129,1,0,0,0,1187,1195,3,132,66,0,1188,1189,3,6,3,
  	0,1189,1190,5,57,0,0,1190,1191,3,6,3,0,1191,1192,3,132,66,0,1192,1194,
  	1,0,0,0,1193,1188,1,0,0,0,1194,1197,1,0,0,0,1195,1193,1,0,0,0,1195,1196,
  	1,0,0,0,1196,131,1,0,0,0,1197,1195,1,0,0,0,1198,1199,3,100,50,0,1199,
  	133,1,0,0,0,1200,1208,3,136,68,0,1201,1202,3,6,3,0,1202,1203,5,57,0,0,
  	1203,1204,3,6,3,0,1204,1205,3,136,68,0,1205,1207,1,0,0,0,1206,1201,1,
  	0,0,0,1207,1210,1,0,0,0,1208,1206,1,0,0,0,1208,1209,1,0,0,0,1209,135,
  	1,0,0,0,1210,1208,1,0,0,0,1211,1212,3,12,6,0,1212,1213,3,2,1,0,1213,1214,
  	5,35,0,0,1214,1215,3,2,1,0,1215,1216,3,100,50,0,1216,137,1,0,0,0,1217,
  	1225,3,140,70,0,1218,1219,3,6,3,0,1219,1220,5,57,0,0,1220,1221,3,6,3,
  	0,1221,1222,3,140,70,0,1222,1224,1,0,0,0,1223,1218,1,0,0,0,1224,1227,
  	1,0,0,0,1225,1223,1,0,0,0,1225,1226,1,0,0,0,1226,1240,1,0,0,0,1227,1225,
  	1,0,0,0,1228,1229,3,6,3,0,1229,1230,5,57,0,0,1230,1231,3,6,3,0,1231,1232,
  	5,38,0,0,1232,1233,5,38,0,0,1233,1234,5,38,0,0,1234,1238,3,12,6,0,1235,
  	1236,3,0,0,0,1236,1237,3,120,60,0,1237,1239,1,0,0,0,1238,1235,1,0,0,0,
  	1238,1239,1,0,0,0,1239,1241,1,0,0,0,1240,1228,1,0,0,0,1240,1241,1,0,0,
  	0,1241,1252,1,0,0,0,1242,1243,5,38,0,0,1243,1244,5,38,0,0,1244,1245,5,
  	38,0,0,1245,1249,3,12,6,0,1246,1247,3,0,0,0,1247,1248,3,120,60,0,1248,
  	1250,1,0,0,0,1249,1246,1,0,0,0,1249,1250,1,0,0,0,1250,1252,1,0,0,0,1251,
  	1217,1,0,0,0,1251,1242,1,0,0,0,1252,139,1,0,0,0,1253,1257,3,12,6,0,1254,
  	1255,3,0,0,0,1255,1256,3,120,60,0,1256,1258,1,0,0,0,1257,1254,1,0,0,0,
  	1257,1258,1,0,0,0,1258,1264,1,0,0,0,1259,1260,3,2,1,0,1260,1261,5,35,
  	0,0,1261,1262,3,2,1,0,1262,1263,3,142,71,0,1263,1265,1,0,0,0,1264,1259,
  	1,0,0,0,1264,1265,1,0,0,0,1265,141,1,0,0,0,1266,1274,3,8,4,0,1267,1274,
  	3,10,5,0,1268,1274,3,12,6,0,1269,1270,5,47,0,0,1270,1274,5,48,0,0,1271,
  	1272,5,49,0,0,1272,1274,5,50,0,0,1273,1266,1,0,0,0,1273,1267,1,0,0,0,
  	1273,1268,1,0,0,0,1273,1269,1,0,0,0,1273,1271,1,0,0,0,1274,143,1,0,0,
  	0,1275,1281,3,146,73,0,1276,1277,3,4,2,0,1277,1278,3,146,73,0,1278,1280,
  	1,0,0,0,1279,1276,1,0,0,0,1280,1283,1,0,0,0,1281,1279,1,0,0,0,1281,1282,
  	1,0,0,0,1282,145,1,0,0,0,1283,1281,1,0,0,0,1284,1287,3,148,74,0,1285,
  	1287,3,150,75,0,1286,1284,1,0,0,0,1286,1285,1,0,0,0,1287,147,1,0,0,0,
  	1288,1298,3,54,27,0,1289,1298,3,56,28,0,1290,1298,3,70,35,0,1291,1298,
  	3,72,36,0,1292,1298,3,100,50,0,1293,1298,3,102,51,0,1294,1298,3,114,57,
  	0,1295,1298,3,104,52,0,1296,1298,3,6,3,0,1297,1288,1,0,0,0,1297,1289,
  	1,0,0,0,1297,1290,1,0,0,0,1297,1291,1,0,0,0,1297,1292,1,0,0,0,1297,1293,
  	1,0,0,0,1297,1294,1,0,0,0,1297,1295,1,0,0,0,1297,1296,1,0,0,0,1298,149,
  	1,0,0,0,1299,1300,5,15,0,0,1300,1301,3,0,0,0,1301,1302,3,100,50,0,1302,
  	151,1,0,0,0,1303,1311,5,41,0,0,1304,1311,5,42,0,0,1305,1311,5,43,0,0,
  	1306,1307,5,42,0,0,1307,1311,5,42,0,0,1308,1309,5,41,0,0,1309,1311,5,
  	41,0,0,1310,1303,1,0,0,0,1310,1304,1,0,0,0,1310,1305,1,0,0,0,1310,1306,
  	1,0,0,0,1310,1308,1,0,0,0,1311,153,1,0,0,0,1312,1313,7,2,0,0,1313,155,
  	1,0,0,0,1314,1322,5,44,0,0,1315,1322,5,46,0,0,1316,1322,5,45,0,0,1317,
  	1318,5,37,0,0,1318,1322,5,37,0,0,1319,1320,5,36,0,0,1320,1322,5,36,0,
  	0,1321,1314,1,0,0,0,1321,1315,1,0,0,0,1321,1316,1,0,0,0,1321,1317,1,0,
  	0,0,1321,1319,1,0,0,0,1322,157,1,0,0,0,1323,1330,5,18,0,0,1324,1330,5,
  	19,0,0,1325,1326,5,46,0,0,1326,1330,5,46,0,0,1327,1328,5,45,0,0,1328,
  	1330,5,45,0,0,1329,1323,1,0,0,0,1329,1324,1,0,0,0,1329,1325,1,0,0,0,1329,
  	1327,1,0,0,0,1330,159,1,0,0,0,1331,1332,5,35,0,0,1332,1367,5,35,0,0,1333,
  	1334,5,56,0,0,1334,1367,5,35,0,0,1335,1367,5,36,0,0,1336,1367,5,37,0,
  	0,1337,1338,5,36,0,0,1338,1367,5,35,0,0,1339,1340,5,37,0,0,1340,1367,
  	5,35,0,0,1341,1367,5,13,0,0,1342,1343,5,31,0,0,1343,1344,3,0,0,0,1344,
  	1345,5,13,0,0,1345,1367,1,0,0,0,1346,1367,5,26,0,0,1347,1348,5,31,0,0,
  	1348,1349,3,0,0,0,1349,1350,5,26,0,0,1350,1367,1,0,0,0,1351,1367,5,27,
  	0,0,1352,1353,5,31,0,0,1353,1354,3,0,0,0,1354,1355,5,27,0,0,1355,1367,
  	1,0,0,0,1356,1367,5,28,0,0,1357,1358,5,31,0,0,1358,1359,3,0,0,0,1359,
  	1360,5,28,0,0,1360,1367,1,0,0,0,1361,1367,5,29,0,0,1362,1363,5,31,0,0,
  	1363,1364,3,0,0,0,1364,1365,5,29,0,0,1365,1367,1,0,0,0,1366,1331,1,0,
  	0,0,1366,1333,1,0,0,0,1366,1335,1,0,0,0,1366,1336,1,0,0,0,1366,1337,1,
  	0,0,0,1366,1339,1,0,0,0,1366,1341,1,0,0,0,1366,1342,1,0,0,0,1366,1346,
  	1,0,0,0,1366,1347,1,0,0,0,1366,1351,1,0,0,0,1366,1352,1,0,0,0,1366,1356,
  	1,0,0,0,1366,1357,1,0,0,0,1366,1361,1,0,0,0,1366,1362,1,0,0,0,1367,161,
  	1,0,0,0,1368,1369,5,66,0,0,1369,1370,3,2,1,0,1370,1371,3,12,6,0,1371,
  	1372,3,0,0,0,1372,1373,5,65,0,0,1373,1374,3,4,2,0,1374,1375,3,16,8,0,
  	1375,1376,3,4,2,0,1376,1377,5,67,0,0,1377,163,1,0,0,0,1378,1379,5,68,
  	0,0,1379,1380,3,2,1,0,1380,1381,3,12,6,0,1381,1382,3,0,0,0,1382,1383,
  	5,65,0,0,1383,165,1,0,0,0,119,169,174,181,189,209,230,235,241,251,269,
  	281,294,296,302,313,319,326,333,343,350,361,371,386,399,401,407,417,426,
  	430,437,445,451,458,470,474,481,491,497,504,510,521,529,534,540,550,553,
  	559,565,573,584,593,606,617,629,638,647,652,658,669,680,694,696,708,720,
  	732,741,750,758,783,799,806,825,827,863,865,876,887,900,905,921,951,959,
  	964,970,979,989,995,1001,1007,1011,1020,1024,1030,1099,1116,1135,1137,
  	1149,1155,1160,1170,1180,1195,1208,1225,1238,1240,1249,1251,1257,1264,
  	1273,1281,1286,1297,1310,1321,1329,1366
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  mavkaparserParserStaticData = staticData.release();
}

}

MavkaParser::MavkaParser(TokenStream *input) : MavkaParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

MavkaParser::MavkaParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  MavkaParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *mavkaparserParserStaticData->atn, mavkaparserParserStaticData->decisionToDFA, mavkaparserParserStaticData->sharedContextCache, options);
}

MavkaParser::~MavkaParser() {
  delete _interpreter;
}

const atn::ATN& MavkaParser::getATN() const {
  return *mavkaparserParserStaticData->atn;
}

std::string MavkaParser::getGrammarFileName() const {
  return "MavkaParser.g4";
}

const std::vector<std::string>& MavkaParser::getRuleNames() const {
  return mavkaparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& MavkaParser::getVocabulary() const {
  return mavkaparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MavkaParser::getSerializedATN() const {
  return mavkaparserParserStaticData->serializedATN;
}


//----------------- WsContext ------------------------------------------------------------------

MavkaParser::WsContext::WsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::WsContext::WS() {
  return getTokens(MavkaParser::WS);
}

tree::TerminalNode* MavkaParser::WsContext::WS(size_t i) {
  return getToken(MavkaParser::WS, i);
}


size_t MavkaParser::WsContext::getRuleIndex() const {
  return MavkaParser::RuleWs;
}

void MavkaParser::WsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWs(this);
}

void MavkaParser::WsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWs(this);
}


std::any MavkaParser::WsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWs(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::WsContext* MavkaParser::ws() {
  WsContext *_localctx = _tracker.createInstance<WsContext>(_ctx, getState());
  enterRule(_localctx, 0, MavkaParser::RuleWs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(167); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(166);
              match(MavkaParser::WS);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(169); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WssContext ------------------------------------------------------------------

MavkaParser::WssContext::WssContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::WssContext::WS() {
  return getTokens(MavkaParser::WS);
}

tree::TerminalNode* MavkaParser::WssContext::WS(size_t i) {
  return getToken(MavkaParser::WS, i);
}


size_t MavkaParser::WssContext::getRuleIndex() const {
  return MavkaParser::RuleWss;
}

void MavkaParser::WssContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWss(this);
}

void MavkaParser::WssContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWss(this);
}


std::any MavkaParser::WssContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWss(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::WssContext* MavkaParser::wss() {
  WssContext *_localctx = _tracker.createInstance<WssContext>(_ctx, getState());
  enterRule(_localctx, 2, MavkaParser::RuleWss);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(174);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(171);
        match(MavkaParser::WS); 
      }
      setState(176);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NlContext ------------------------------------------------------------------

MavkaParser::NlContext::NlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::WssContext *> MavkaParser::NlContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::NlContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::NlContext::NL() {
  return getTokens(MavkaParser::NL);
}

tree::TerminalNode* MavkaParser::NlContext::NL(size_t i) {
  return getToken(MavkaParser::NL, i);
}


size_t MavkaParser::NlContext::getRuleIndex() const {
  return MavkaParser::RuleNl;
}

void MavkaParser::NlContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNl(this);
}

void MavkaParser::NlContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNl(this);
}


std::any MavkaParser::NlContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNl(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::NlContext* MavkaParser::nl() {
  NlContext *_localctx = _tracker.createInstance<NlContext>(_ctx, getState());
  enterRule(_localctx, 4, MavkaParser::RuleNl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(177);
    wss();
    setState(179); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(178);
              match(MavkaParser::NL);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(181); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(183);
    wss();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NlsContext ------------------------------------------------------------------

MavkaParser::NlsContext::NlsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::WssContext *> MavkaParser::NlsContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::NlsContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::NlsContext::NL() {
  return getTokens(MavkaParser::NL);
}

tree::TerminalNode* MavkaParser::NlsContext::NL(size_t i) {
  return getToken(MavkaParser::NL, i);
}


size_t MavkaParser::NlsContext::getRuleIndex() const {
  return MavkaParser::RuleNls;
}

void MavkaParser::NlsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNls(this);
}

void MavkaParser::NlsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNls(this);
}


std::any MavkaParser::NlsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNls(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::NlsContext* MavkaParser::nls() {
  NlsContext *_localctx = _tracker.createInstance<NlsContext>(_ctx, getState());
  enterRule(_localctx, 6, MavkaParser::RuleNls);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(185);
    wss();
    setState(189);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(186);
        match(MavkaParser::NL); 
      }
      setState(191);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    }
    setState(192);
    wss();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Number_tokenContext ------------------------------------------------------------------

MavkaParser::Number_tokenContext::Number_tokenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Number_tokenContext::INTEGER() {
  return getToken(MavkaParser::INTEGER, 0);
}

tree::TerminalNode* MavkaParser::Number_tokenContext::FLOAT() {
  return getToken(MavkaParser::FLOAT, 0);
}

tree::TerminalNode* MavkaParser::Number_tokenContext::HEX() {
  return getToken(MavkaParser::HEX, 0);
}

tree::TerminalNode* MavkaParser::Number_tokenContext::BIN() {
  return getToken(MavkaParser::BIN, 0);
}


size_t MavkaParser::Number_tokenContext::getRuleIndex() const {
  return MavkaParser::RuleNumber_token;
}

void MavkaParser::Number_tokenContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumber_token(this);
}

void MavkaParser::Number_tokenContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumber_token(this);
}


std::any MavkaParser::Number_tokenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNumber_token(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Number_tokenContext* MavkaParser::number_token() {
  Number_tokenContext *_localctx = _tracker.createInstance<Number_tokenContext>(_ctx, getState());
  enterRule(_localctx, 8, MavkaParser::RuleNumber_token);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(194);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4323455642275676160) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

MavkaParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::StringContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

tree::TerminalNode* MavkaParser::StringContext::STRING_MULTILINE() {
  return getToken(MavkaParser::STRING_MULTILINE, 0);
}


size_t MavkaParser::StringContext::getRuleIndex() const {
  return MavkaParser::RuleString;
}

void MavkaParser::StringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString(this);
}

void MavkaParser::StringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString(this);
}


std::any MavkaParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::StringContext* MavkaParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 10, MavkaParser::RuleString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(196);
    _la = _input->LA(1);
    if (!(_la == MavkaParser::STRING_MULTILINE

    || _la == MavkaParser::STRING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

MavkaParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::IdentifierContext::ID() {
  return getToken(MavkaParser::ID, 0);
}


size_t MavkaParser::IdentifierContext::getRuleIndex() const {
  return MavkaParser::RuleIdentifier;
}

void MavkaParser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void MavkaParser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}


std::any MavkaParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::IdentifierContext* MavkaParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 12, MavkaParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(198);
    match(MavkaParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileContext ------------------------------------------------------------------

MavkaParser::FileContext::FileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::FileContext::EOF() {
  return getToken(MavkaParser::EOF, 0);
}

MavkaParser::ProgramContext* MavkaParser::FileContext::program() {
  return getRuleContext<MavkaParser::ProgramContext>(0);
}


size_t MavkaParser::FileContext::getRuleIndex() const {
  return MavkaParser::RuleFile;
}

void MavkaParser::FileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile(this);
}

void MavkaParser::FileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile(this);
}


std::any MavkaParser::FileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFile(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::FileContext* MavkaParser::file() {
  FileContext *_localctx = _tracker.createInstance<FileContext>(_ctx, getState());
  enterRule(_localctx, 14, MavkaParser::RuleFile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(200);
    antlrcpp::downCast<FileContext *>(_localctx)->f_program = program();
    setState(201);
    match(MavkaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

MavkaParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Program_elementContext *> MavkaParser::ProgramContext::program_element() {
  return getRuleContexts<MavkaParser::Program_elementContext>();
}

MavkaParser::Program_elementContext* MavkaParser::ProgramContext::program_element(size_t i) {
  return getRuleContext<MavkaParser::Program_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::ProgramContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::ProgramContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::ProgramContext::getRuleIndex() const {
  return MavkaParser::RuleProgram;
}

void MavkaParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void MavkaParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}


std::any MavkaParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ProgramContext* MavkaParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 16, MavkaParser::RuleProgram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(203);
    program_element();
    setState(209);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(204);
        nl();
        setState(205);
        program_element(); 
      }
      setState(211);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Program_elementContext ------------------------------------------------------------------

MavkaParser::Program_elementContext::Program_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ModuleContext* MavkaParser::Program_elementContext::module() {
  return getRuleContext<MavkaParser::ModuleContext>(0);
}

MavkaParser::StructureContext* MavkaParser::Program_elementContext::structure() {
  return getRuleContext<MavkaParser::StructureContext>(0);
}

MavkaParser::MockupContext* MavkaParser::Program_elementContext::mockup() {
  return getRuleContext<MavkaParser::MockupContext>(0);
}

MavkaParser::DiiaContext* MavkaParser::Program_elementContext::diia() {
  return getRuleContext<MavkaParser::DiiaContext>(0);
}

MavkaParser::IfContext* MavkaParser::Program_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Program_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Program_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Program_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Program_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Program_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::EvalContext* MavkaParser::Program_elementContext::eval() {
  return getRuleContext<MavkaParser::EvalContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Program_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Program_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::TakeContext* MavkaParser::Program_elementContext::take() {
  return getRuleContext<MavkaParser::TakeContext>(0);
}

MavkaParser::GiveContext* MavkaParser::Program_elementContext::give() {
  return getRuleContext<MavkaParser::GiveContext>(0);
}

MavkaParser::Comp_inst_block_programContext* MavkaParser::Program_elementContext::comp_inst_block_program() {
  return getRuleContext<MavkaParser::Comp_inst_block_programContext>(0);
}

MavkaParser::Comp_inst_assignContext* MavkaParser::Program_elementContext::comp_inst_assign() {
  return getRuleContext<MavkaParser::Comp_inst_assignContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Program_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Program_elementContext::getRuleIndex() const {
  return MavkaParser::RuleProgram_element;
}

void MavkaParser::Program_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram_element(this);
}

void MavkaParser::Program_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram_element(this);
}


std::any MavkaParser::Program_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitProgram_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Program_elementContext* MavkaParser::program_element() {
  Program_elementContext *_localctx = _tracker.createInstance<Program_elementContext>(_ctx, getState());
  enterRule(_localctx, 18, MavkaParser::RuleProgram_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(230);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(212);
      module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(213);
      structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(214);
      mockup();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(215);
      diia();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(216);
      if_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(217);
      each();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(218);
      while_();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(219);
      try_();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(220);
      expr();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(221);
      throw_();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(222);
      eval();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(223);
      wait_assign();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(224);
      assign();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(225);
      take();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(226);
      give();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(227);
      comp_inst_block_program();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(228);
      comp_inst_assign();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(229);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleContext ------------------------------------------------------------------

MavkaParser::ModuleContext::ModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::ModuleContext::KW_MODULE() {
  return getToken(MavkaParser::KW_MODULE, 0);
}

MavkaParser::WsContext* MavkaParser::ModuleContext::ws() {
  return getRuleContext<MavkaParser::WsContext>(0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::ModuleContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::ModuleContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::ModuleContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::ModuleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Module_bodyContext* MavkaParser::ModuleContext::module_body() {
  return getRuleContext<MavkaParser::Module_bodyContext>(0);
}


size_t MavkaParser::ModuleContext::getRuleIndex() const {
  return MavkaParser::RuleModule;
}

void MavkaParser::ModuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule(this);
}

void MavkaParser::ModuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule(this);
}


std::any MavkaParser::ModuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ModuleContext* MavkaParser::module() {
  ModuleContext *_localctx = _tracker.createInstance<ModuleContext>(_ctx, getState());
  enterRule(_localctx, 20, MavkaParser::RuleModule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(232);
    match(MavkaParser::KW_MODULE);
    setState(233);
    ws();
    setState(235);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(234);
      antlrcpp::downCast<ModuleContext *>(_localctx)->m_name = identifier();
    }
    setState(237);
    nl();
    setState(241);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9016911804723578358) != 0) || _la == MavkaParser::STRING_MULTILINE

    || _la == MavkaParser::STRING) {
      setState(238);
      antlrcpp::downCast<ModuleContext *>(_localctx)->m_body = module_body();
      setState(239);
      nl();
    }
    setState(243);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_bodyContext ------------------------------------------------------------------

MavkaParser::Module_bodyContext::Module_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Module_body_elementContext *> MavkaParser::Module_bodyContext::module_body_element() {
  return getRuleContexts<MavkaParser::Module_body_elementContext>();
}

MavkaParser::Module_body_elementContext* MavkaParser::Module_bodyContext::module_body_element(size_t i) {
  return getRuleContext<MavkaParser::Module_body_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Module_bodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Module_bodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Module_bodyContext::getRuleIndex() const {
  return MavkaParser::RuleModule_body;
}

void MavkaParser::Module_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_body(this);
}

void MavkaParser::Module_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_body(this);
}


std::any MavkaParser::Module_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule_body(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Module_bodyContext* MavkaParser::module_body() {
  Module_bodyContext *_localctx = _tracker.createInstance<Module_bodyContext>(_ctx, getState());
  enterRule(_localctx, 22, MavkaParser::RuleModule_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(245);
    module_body_element();
    setState(251);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(246);
        nl();
        setState(247);
        module_body_element(); 
      }
      setState(253);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_body_elementContext ------------------------------------------------------------------

MavkaParser::Module_body_elementContext::Module_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ModuleContext* MavkaParser::Module_body_elementContext::module() {
  return getRuleContext<MavkaParser::ModuleContext>(0);
}

MavkaParser::StructureContext* MavkaParser::Module_body_elementContext::structure() {
  return getRuleContext<MavkaParser::StructureContext>(0);
}

MavkaParser::MockupContext* MavkaParser::Module_body_elementContext::mockup() {
  return getRuleContext<MavkaParser::MockupContext>(0);
}

MavkaParser::DiiaContext* MavkaParser::Module_body_elementContext::diia() {
  return getRuleContext<MavkaParser::DiiaContext>(0);
}

MavkaParser::IfContext* MavkaParser::Module_body_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Module_body_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Module_body_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Module_body_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Module_body_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Module_body_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::EvalContext* MavkaParser::Module_body_elementContext::eval() {
  return getRuleContext<MavkaParser::EvalContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Module_body_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Module_body_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::GiveContext* MavkaParser::Module_body_elementContext::give() {
  return getRuleContext<MavkaParser::GiveContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Module_body_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Module_body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleModule_body_element;
}

void MavkaParser::Module_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_body_element(this);
}

void MavkaParser::Module_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_body_element(this);
}


std::any MavkaParser::Module_body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule_body_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Module_body_elementContext* MavkaParser::module_body_element() {
  Module_body_elementContext *_localctx = _tracker.createInstance<Module_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 24, MavkaParser::RuleModule_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(269);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(254);
      module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(255);
      structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(256);
      mockup();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(257);
      diia();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(258);
      if_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(259);
      each();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(260);
      while_();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(261);
      try_();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(262);
      expr();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(263);
      throw_();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(264);
      eval();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(265);
      wait_assign();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(266);
      assign();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(267);
      give();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(268);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureContext ------------------------------------------------------------------

MavkaParser::StructureContext::StructureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::StructureContext::KW_STRUCTURE() {
  return getToken(MavkaParser::KW_STRUCTURE, 0);
}

std::vector<MavkaParser::WsContext *> MavkaParser::StructureContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::StructureContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::StructureContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::StructureContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

MavkaParser::NlsContext* MavkaParser::StructureContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}

tree::TerminalNode* MavkaParser::StructureContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::StructureContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<MavkaParser::WssContext *> MavkaParser::StructureContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::StructureContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::StructureContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::StructureContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::StructureContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::StructureContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}

tree::TerminalNode* MavkaParser::StructureContext::KW_IS() {
  return getToken(MavkaParser::KW_IS, 0);
}

std::vector<MavkaParser::GenericsContext *> MavkaParser::StructureContext::generics() {
  return getRuleContexts<MavkaParser::GenericsContext>();
}

MavkaParser::GenericsContext* MavkaParser::StructureContext::generics(size_t i) {
  return getRuleContext<MavkaParser::GenericsContext>(i);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::StructureContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::Structure_elementsContext* MavkaParser::StructureContext::structure_elements() {
  return getRuleContext<MavkaParser::Structure_elementsContext>(0);
}


size_t MavkaParser::StructureContext::getRuleIndex() const {
  return MavkaParser::RuleStructure;
}

void MavkaParser::StructureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure(this);
}

void MavkaParser::StructureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure(this);
}


std::any MavkaParser::StructureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::StructureContext* MavkaParser::structure() {
  StructureContext *_localctx = _tracker.createInstance<StructureContext>(_ctx, getState());
  enterRule(_localctx, 26, MavkaParser::RuleStructure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(271);
    match(MavkaParser::KW_STRUCTURE);
    setState(272);
    ws();
    setState(273);
    antlrcpp::downCast<StructureContext *>(_localctx)->s_name = identifier();
    setState(281);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      setState(274);
      wss();
      setState(275);
      match(MavkaParser::LESSER);
      setState(276);
      wss();
      setState(277);
      antlrcpp::downCast<StructureContext *>(_localctx)->s_generics = generics();
      setState(278);
      wss();
      setState(279);
      match(MavkaParser::GREATER);
      break;
    }

    default:
      break;
    }
    setState(296);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      setState(283);
      ws();
      setState(284);
      match(MavkaParser::KW_IS);
      setState(285);
      ws();
      setState(286);
      antlrcpp::downCast<StructureContext *>(_localctx)->s_parent = super_identifiers_chain(0);
      setState(287);
      wss();
      setState(294);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::LESSER) {
        setState(288);
        match(MavkaParser::LESSER);
        setState(289);
        wss();
        setState(290);
        antlrcpp::downCast<StructureContext *>(_localctx)->s_parent_generics = generics();
        setState(291);
        wss();
        setState(292);
        match(MavkaParser::GREATER);
      }
      break;
    }

    default:
      break;
    }
    setState(298);
    nl();
    setState(302);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(299);
      antlrcpp::downCast<StructureContext *>(_localctx)->s_elements = structure_elements();
      setState(300);
      nl();
      break;
    }

    default:
      break;
    }
    setState(304);
    nls();
    setState(305);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_elementsContext ------------------------------------------------------------------

MavkaParser::Structure_elementsContext::Structure_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Structure_elementContext *> MavkaParser::Structure_elementsContext::structure_element() {
  return getRuleContexts<MavkaParser::Structure_elementContext>();
}

MavkaParser::Structure_elementContext* MavkaParser::Structure_elementsContext::structure_element(size_t i) {
  return getRuleContext<MavkaParser::Structure_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Structure_elementsContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Structure_elementsContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Structure_elementsContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_elements;
}

void MavkaParser::Structure_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_elements(this);
}

void MavkaParser::Structure_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_elements(this);
}


std::any MavkaParser::Structure_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_elements(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_elementsContext* MavkaParser::structure_elements() {
  Structure_elementsContext *_localctx = _tracker.createInstance<Structure_elementsContext>(_ctx, getState());
  enterRule(_localctx, 28, MavkaParser::RuleStructure_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(307);
    structure_element();
    setState(313);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(308);
        nl();
        setState(309);
        structure_element(); 
      }
      setState(315);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_elementContext ------------------------------------------------------------------

MavkaParser::Structure_elementContext::Structure_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Structure_paramContext* MavkaParser::Structure_elementContext::structure_param() {
  return getRuleContext<MavkaParser::Structure_paramContext>(0);
}


size_t MavkaParser::Structure_elementContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_element;
}

void MavkaParser::Structure_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_element(this);
}

void MavkaParser::Structure_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_element(this);
}


std::any MavkaParser::Structure_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_elementContext* MavkaParser::structure_element() {
  Structure_elementContext *_localctx = _tracker.createInstance<Structure_elementContext>(_ctx, getState());
  enterRule(_localctx, 30, MavkaParser::RuleStructure_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(316);
    structure_param();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_paramContext ------------------------------------------------------------------

MavkaParser::Structure_paramContext::Structure_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::WsContext *> MavkaParser::Structure_paramContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::Structure_paramContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

MavkaParser::IdentifierContext* MavkaParser::Structure_paramContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<MavkaParser::WssContext *> MavkaParser::Structure_paramContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Structure_paramContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

tree::TerminalNode* MavkaParser::Structure_paramContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

tree::TerminalNode* MavkaParser::Structure_paramContext::KW_SPEC() {
  return getToken(MavkaParser::KW_SPEC, 0);
}

MavkaParser::Type_valueContext* MavkaParser::Structure_paramContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::Param_valueContext* MavkaParser::Structure_paramContext::param_value() {
  return getRuleContext<MavkaParser::Param_valueContext>(0);
}


size_t MavkaParser::Structure_paramContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_param;
}

void MavkaParser::Structure_paramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_param(this);
}

void MavkaParser::Structure_paramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_param(this);
}


std::any MavkaParser::Structure_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_param(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_paramContext* MavkaParser::structure_param() {
  Structure_paramContext *_localctx = _tracker.createInstance<Structure_paramContext>(_ctx, getState());
  enterRule(_localctx, 32, MavkaParser::RuleStructure_param);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(319);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SPEC) {
      setState(318);
      antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_static = match(MavkaParser::KW_SPEC);
    }
    setState(321);
    ws();
    setState(322);
    antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_name = identifier();
    setState(326);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      setState(323);
      ws();
      setState(324);
      antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_type = type_value();
      break;
    }

    default:
      break;
    }
    setState(333);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      setState(328);
      wss();
      setState(329);
      match(MavkaParser::EQUAL);
      setState(330);
      wss();
      setState(331);
      antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_value = param_value();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericsContext ------------------------------------------------------------------

MavkaParser::GenericsContext::GenericsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::GenericsContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::GenericsContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

std::vector<MavkaParser::WssContext *> MavkaParser::GenericsContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::GenericsContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::GenericsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::GenericsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::GenericsContext::getRuleIndex() const {
  return MavkaParser::RuleGenerics;
}

void MavkaParser::GenericsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenerics(this);
}

void MavkaParser::GenericsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenerics(this);
}


std::any MavkaParser::GenericsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGenerics(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::GenericsContext* MavkaParser::generics() {
  GenericsContext *_localctx = _tracker.createInstance<GenericsContext>(_ctx, getState());
  enterRule(_localctx, 34, MavkaParser::RuleGenerics);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(335);
    identifier();
    setState(343);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(336);
        wss();
        setState(337);
        match(MavkaParser::COMA);
        setState(338);
        wss();
        setState(339);
        identifier(); 
      }
      setState(345);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MockupContext ------------------------------------------------------------------

MavkaParser::MockupContext::MockupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Mockup_moduleContext* MavkaParser::MockupContext::mockup_module() {
  return getRuleContext<MavkaParser::Mockup_moduleContext>(0);
}

MavkaParser::Mockup_structureContext* MavkaParser::MockupContext::mockup_structure() {
  return getRuleContext<MavkaParser::Mockup_structureContext>(0);
}

MavkaParser::Mockup_diiaContext* MavkaParser::MockupContext::mockup_diia() {
  return getRuleContext<MavkaParser::Mockup_diiaContext>(0);
}

MavkaParser::Mockup_subjectContext* MavkaParser::MockupContext::mockup_subject() {
  return getRuleContext<MavkaParser::Mockup_subjectContext>(0);
}


size_t MavkaParser::MockupContext::getRuleIndex() const {
  return MavkaParser::RuleMockup;
}

void MavkaParser::MockupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup(this);
}

void MavkaParser::MockupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup(this);
}


std::any MavkaParser::MockupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::MockupContext* MavkaParser::mockup() {
  MockupContext *_localctx = _tracker.createInstance<MockupContext>(_ctx, getState());
  enterRule(_localctx, 36, MavkaParser::RuleMockup);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(350);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(346);
      mockup_module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(347);
      mockup_structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(348);
      mockup_diia();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(349);
      mockup_subject();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_moduleContext ------------------------------------------------------------------

MavkaParser::Mockup_moduleContext::Mockup_moduleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::KW_MOCKUP() {
  return getToken(MavkaParser::KW_MOCKUP, 0);
}

std::vector<MavkaParser::WsContext *> MavkaParser::Mockup_moduleContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::Mockup_moduleContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::KW_MODULE() {
  return getToken(MavkaParser::KW_MODULE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_moduleContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_moduleContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_moduleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Mockup_module_bodyContext* MavkaParser::Mockup_moduleContext::mockup_module_body() {
  return getRuleContext<MavkaParser::Mockup_module_bodyContext>(0);
}


size_t MavkaParser::Mockup_moduleContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_module;
}

void MavkaParser::Mockup_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_module(this);
}

void MavkaParser::Mockup_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_module(this);
}


std::any MavkaParser::Mockup_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_module(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_moduleContext* MavkaParser::mockup_module() {
  Mockup_moduleContext *_localctx = _tracker.createInstance<Mockup_moduleContext>(_ctx, getState());
  enterRule(_localctx, 38, MavkaParser::RuleMockup_module);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(352);
    match(MavkaParser::KW_MOCKUP);
    setState(353);
    ws();
    setState(354);
    match(MavkaParser::KW_MODULE);
    setState(355);
    ws();
    setState(356);
    antlrcpp::downCast<Mockup_moduleContext *>(_localctx)->mm_name = identifier();
    setState(357);
    nl();
    setState(361);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_MOCKUP) {
      setState(358);
      antlrcpp::downCast<Mockup_moduleContext *>(_localctx)->mm_elements = mockup_module_body();
      setState(359);
      nl();
    }
    setState(363);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_module_bodyContext ------------------------------------------------------------------

MavkaParser::Mockup_module_bodyContext::Mockup_module_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::MockupContext *> MavkaParser::Mockup_module_bodyContext::mockup() {
  return getRuleContexts<MavkaParser::MockupContext>();
}

MavkaParser::MockupContext* MavkaParser::Mockup_module_bodyContext::mockup(size_t i) {
  return getRuleContext<MavkaParser::MockupContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_module_bodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_module_bodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Mockup_module_bodyContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_module_body;
}

void MavkaParser::Mockup_module_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_module_body(this);
}

void MavkaParser::Mockup_module_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_module_body(this);
}


std::any MavkaParser::Mockup_module_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_module_body(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_module_bodyContext* MavkaParser::mockup_module_body() {
  Mockup_module_bodyContext *_localctx = _tracker.createInstance<Mockup_module_bodyContext>(_ctx, getState());
  enterRule(_localctx, 40, MavkaParser::RuleMockup_module_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(365);
    mockup();
    setState(371);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(366);
        nl();
        setState(367);
        mockup(); 
      }
      setState(373);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_structureContext ------------------------------------------------------------------

MavkaParser::Mockup_structureContext::Mockup_structureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::KW_MOCKUP() {
  return getToken(MavkaParser::KW_MOCKUP, 0);
}

std::vector<MavkaParser::WsContext *> MavkaParser::Mockup_structureContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::Mockup_structureContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::KW_STRUCTURE() {
  return getToken(MavkaParser::KW_STRUCTURE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_structureContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_structureContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_structureContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<MavkaParser::WssContext *> MavkaParser::Mockup_structureContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Mockup_structureContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Mockup_structureContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Mockup_structureContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::KW_IS() {
  return getToken(MavkaParser::KW_IS, 0);
}

std::vector<MavkaParser::GenericsContext *> MavkaParser::Mockup_structureContext::generics() {
  return getRuleContexts<MavkaParser::GenericsContext>();
}

MavkaParser::GenericsContext* MavkaParser::Mockup_structureContext::generics(size_t i) {
  return getRuleContext<MavkaParser::GenericsContext>(i);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Mockup_structureContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::Mockup_structure_bodyContext* MavkaParser::Mockup_structureContext::mockup_structure_body() {
  return getRuleContext<MavkaParser::Mockup_structure_bodyContext>(0);
}


size_t MavkaParser::Mockup_structureContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_structure;
}

void MavkaParser::Mockup_structureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_structure(this);
}

void MavkaParser::Mockup_structureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_structure(this);
}


std::any MavkaParser::Mockup_structureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_structure(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_structureContext* MavkaParser::mockup_structure() {
  Mockup_structureContext *_localctx = _tracker.createInstance<Mockup_structureContext>(_ctx, getState());
  enterRule(_localctx, 42, MavkaParser::RuleMockup_structure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(374);
    match(MavkaParser::KW_MOCKUP);
    setState(375);
    ws();
    setState(376);
    match(MavkaParser::KW_STRUCTURE);
    setState(377);
    ws();
    setState(378);
    antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_name = identifier();
    setState(386);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      setState(379);
      wss();
      setState(380);
      match(MavkaParser::LESSER);
      setState(381);
      wss();
      setState(382);
      antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_generics = generics();
      setState(383);
      wss();
      setState(384);
      match(MavkaParser::GREATER);
      break;
    }

    default:
      break;
    }
    setState(401);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      setState(388);
      ws();
      setState(389);
      match(MavkaParser::KW_IS);
      setState(390);
      ws();
      setState(391);
      antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_parent = super_identifiers_chain(0);
      setState(399);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
      case 1: {
        setState(392);
        wss();
        setState(393);
        match(MavkaParser::LESSER);
        setState(394);
        wss();
        setState(395);
        antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_parent_generics = generics();
        setState(396);
        wss();
        setState(397);
        match(MavkaParser::GREATER);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(403);
    nl();
    setState(407);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::WS

    || _la == MavkaParser::KW_SPEC) {
      setState(404);
      antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_elements = mockup_structure_body();
      setState(405);
      nl();
    }
    setState(409);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_structure_bodyContext ------------------------------------------------------------------

MavkaParser::Mockup_structure_bodyContext::Mockup_structure_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Mockup_structure_body_elementContext *> MavkaParser::Mockup_structure_bodyContext::mockup_structure_body_element() {
  return getRuleContexts<MavkaParser::Mockup_structure_body_elementContext>();
}

MavkaParser::Mockup_structure_body_elementContext* MavkaParser::Mockup_structure_bodyContext::mockup_structure_body_element(size_t i) {
  return getRuleContext<MavkaParser::Mockup_structure_body_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_structure_bodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_structure_bodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Mockup_structure_bodyContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_structure_body;
}

void MavkaParser::Mockup_structure_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_structure_body(this);
}

void MavkaParser::Mockup_structure_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_structure_body(this);
}


std::any MavkaParser::Mockup_structure_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_structure_body(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_structure_bodyContext* MavkaParser::mockup_structure_body() {
  Mockup_structure_bodyContext *_localctx = _tracker.createInstance<Mockup_structure_bodyContext>(_ctx, getState());
  enterRule(_localctx, 44, MavkaParser::RuleMockup_structure_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(411);
    mockup_structure_body_element();
    setState(417);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(412);
        nl();
        setState(413);
        mockup_structure_body_element(); 
      }
      setState(419);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_structure_body_elementContext ------------------------------------------------------------------

MavkaParser::Mockup_structure_body_elementContext::Mockup_structure_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Structure_paramContext* MavkaParser::Mockup_structure_body_elementContext::structure_param() {
  return getRuleContext<MavkaParser::Structure_paramContext>(0);
}


size_t MavkaParser::Mockup_structure_body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_structure_body_element;
}

void MavkaParser::Mockup_structure_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_structure_body_element(this);
}

void MavkaParser::Mockup_structure_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_structure_body_element(this);
}


std::any MavkaParser::Mockup_structure_body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_structure_body_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_structure_body_elementContext* MavkaParser::mockup_structure_body_element() {
  Mockup_structure_body_elementContext *_localctx = _tracker.createInstance<Mockup_structure_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 46, MavkaParser::RuleMockup_structure_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(420);
    structure_param();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_diiaContext ------------------------------------------------------------------

MavkaParser::Mockup_diiaContext::Mockup_diiaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::KW_MOCKUP() {
  return getToken(MavkaParser::KW_MOCKUP, 0);
}

std::vector<MavkaParser::WsContext *> MavkaParser::Mockup_diiaContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::Mockup_diiaContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::KW_DIIA() {
  return getToken(MavkaParser::KW_DIIA, 0);
}

std::vector<MavkaParser::WssContext *> MavkaParser::Mockup_diiaContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Mockup_diiaContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mockup_diiaContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mockup_diiaContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::Mockup_diiaContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_diiaContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::KW_ASYNC() {
  return getToken(MavkaParser::KW_ASYNC, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::KW_SPEC() {
  return getToken(MavkaParser::KW_SPEC, 0);
}

MavkaParser::GenericsContext* MavkaParser::Mockup_diiaContext::generics() {
  return getRuleContext<MavkaParser::GenericsContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::Mockup_diiaContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::Mockup_diiaContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::Mockup_diiaContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_diia;
}

void MavkaParser::Mockup_diiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_diia(this);
}

void MavkaParser::Mockup_diiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_diia(this);
}


std::any MavkaParser::Mockup_diiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_diia(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_diiaContext* MavkaParser::mockup_diia() {
  Mockup_diiaContext *_localctx = _tracker.createInstance<Mockup_diiaContext>(_ctx, getState());
  enterRule(_localctx, 48, MavkaParser::RuleMockup_diia);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(422);
    match(MavkaParser::KW_MOCKUP);
    setState(423);
    ws();
    setState(426);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_ASYNC) {
      setState(424);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_async = match(MavkaParser::KW_ASYNC);
      setState(425);
      ws();
    }
    setState(430);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SPEC) {
      setState(428);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_static = match(MavkaParser::KW_SPEC);
      setState(429);
      ws();
    }
    setState(432);
    match(MavkaParser::KW_DIIA);
    setState(433);
    ws();
    setState(437);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      setState(434);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_structure = identifier();
      setState(435);
      match(MavkaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(439);
    antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_name = identifier();
    setState(445);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      setState(440);
      wss();
      setState(441);
      match(MavkaParser::LESSER);
      setState(442);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_generics = generics();
      setState(443);
      match(MavkaParser::GREATER);
      break;
    }

    default:
      break;
    }
    setState(447);
    wss();
    setState(448);
    match(MavkaParser::PAREN_OPEN);
    setState(449);
    nls();
    setState(451);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::DOT

    || _la == MavkaParser::ID) {
      setState(450);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_params = params();
    }
    setState(453);
    nls();
    setState(454);
    match(MavkaParser::PAREN_CLOSE);
    setState(458);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(455);
      ws();
      setState(456);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_type = type_value();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_subjectContext ------------------------------------------------------------------

MavkaParser::Mockup_subjectContext::Mockup_subjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_subjectContext::KW_MOCKUP() {
  return getToken(MavkaParser::KW_MOCKUP, 0);
}

std::vector<MavkaParser::WsContext *> MavkaParser::Mockup_subjectContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::Mockup_subjectContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_subjectContext::KW_SUBJECT() {
  return getToken(MavkaParser::KW_SUBJECT, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_subjectContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::Mockup_subjectContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::Mockup_subjectContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_subject;
}

void MavkaParser::Mockup_subjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_subject(this);
}

void MavkaParser::Mockup_subjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_subject(this);
}


std::any MavkaParser::Mockup_subjectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_subject(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_subjectContext* MavkaParser::mockup_subject() {
  Mockup_subjectContext *_localctx = _tracker.createInstance<Mockup_subjectContext>(_ctx, getState());
  enterRule(_localctx, 50, MavkaParser::RuleMockup_subject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(460);
    match(MavkaParser::KW_MOCKUP);
    setState(461);
    ws();
    setState(462);
    match(MavkaParser::KW_SUBJECT);
    setState(463);
    ws();
    setState(464);
    antlrcpp::downCast<Mockup_subjectContext *>(_localctx)->ms_name = identifier();
    setState(465);
    ws();
    setState(466);
    antlrcpp::downCast<Mockup_subjectContext *>(_localctx)->ms_type = type_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiiaContext ------------------------------------------------------------------

MavkaParser::DiiaContext::DiiaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::DiiaContext::KW_DIIA() {
  return getToken(MavkaParser::KW_DIIA, 0);
}

std::vector<MavkaParser::WsContext *> MavkaParser::DiiaContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::DiiaContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

std::vector<MavkaParser::WssContext *> MavkaParser::DiiaContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::DiiaContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

tree::TerminalNode* MavkaParser::DiiaContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::DiiaContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::DiiaContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::DiiaContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::DiiaContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::DiiaContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::DiiaContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::DiiaContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::DiiaContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

tree::TerminalNode* MavkaParser::DiiaContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::KW_ASYNC() {
  return getToken(MavkaParser::KW_ASYNC, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::KW_SPEC() {
  return getToken(MavkaParser::KW_SPEC, 0);
}

MavkaParser::GenericsContext* MavkaParser::DiiaContext::generics() {
  return getRuleContext<MavkaParser::GenericsContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::DiiaContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::DiiaContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::BodyContext* MavkaParser::DiiaContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}


size_t MavkaParser::DiiaContext::getRuleIndex() const {
  return MavkaParser::RuleDiia;
}

void MavkaParser::DiiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiia(this);
}

void MavkaParser::DiiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiia(this);
}


std::any MavkaParser::DiiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDiia(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::DiiaContext* MavkaParser::diia() {
  DiiaContext *_localctx = _tracker.createInstance<DiiaContext>(_ctx, getState());
  enterRule(_localctx, 52, MavkaParser::RuleDiia);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(470);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_ASYNC) {
      setState(468);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_async = match(MavkaParser::KW_ASYNC);
      setState(469);
      ws();
    }
    setState(474);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SPEC) {
      setState(472);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_static = match(MavkaParser::KW_SPEC);
      setState(473);
      ws();
    }
    setState(476);
    match(MavkaParser::KW_DIIA);
    setState(477);
    ws();
    setState(481);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      setState(478);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_structure = identifier();
      setState(479);
      match(MavkaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(483);
    antlrcpp::downCast<DiiaContext *>(_localctx)->d_name = identifier();
    setState(491);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      setState(484);
      wss();
      setState(485);
      match(MavkaParser::LESSER);
      setState(486);
      wss();
      setState(487);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_generics = generics();
      setState(488);
      wss();
      setState(489);
      match(MavkaParser::GREATER);
      break;
    }

    default:
      break;
    }
    setState(493);
    wss();
    setState(494);
    match(MavkaParser::PAREN_OPEN);
    setState(495);
    nls();
    setState(497);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::DOT

    || _la == MavkaParser::ID) {
      setState(496);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_params = params();
    }
    setState(499);
    nls();
    setState(500);
    match(MavkaParser::PAREN_CLOSE);
    setState(504);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(501);
      ws();
      setState(502);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_type = type_value();
      break;
    }

    default:
      break;
    }
    setState(506);
    nl();
    setState(510);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9016911799321330134) != 0) || _la == MavkaParser::STRING_MULTILINE

    || _la == MavkaParser::STRING) {
      setState(507);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_body = body();
      setState(508);
      nl();
    }
    setState(512);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfContext ------------------------------------------------------------------

MavkaParser::IfContext::IfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::IfContext::KW_IF() {
  return getToken(MavkaParser::KW_IF, 0);
}

std::vector<MavkaParser::WsContext *> MavkaParser::IfContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::IfContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::IfContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::IfContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

MavkaParser::ExprContext* MavkaParser::IfContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

std::vector<MavkaParser::BodyContext *> MavkaParser::IfContext::body() {
  return getRuleContexts<MavkaParser::BodyContext>();
}

MavkaParser::BodyContext* MavkaParser::IfContext::body(size_t i) {
  return getRuleContext<MavkaParser::BodyContext>(i);
}

tree::TerminalNode* MavkaParser::IfContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

tree::TerminalNode* MavkaParser::IfContext::KW_ELSE() {
  return getToken(MavkaParser::KW_ELSE, 0);
}

MavkaParser::IfContext* MavkaParser::IfContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}


size_t MavkaParser::IfContext::getRuleIndex() const {
  return MavkaParser::RuleIf;
}

void MavkaParser::IfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf(this);
}

void MavkaParser::IfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf(this);
}


std::any MavkaParser::IfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIf(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::IfContext* MavkaParser::if_() {
  IfContext *_localctx = _tracker.createInstance<IfContext>(_ctx, getState());
  enterRule(_localctx, 54, MavkaParser::RuleIf);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(514);
    match(MavkaParser::KW_IF);
    setState(515);
    ws();
    setState(516);
    antlrcpp::downCast<IfContext *>(_localctx)->i_value = expr();
    setState(517);
    nl();
    setState(521);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      setState(518);
      antlrcpp::downCast<IfContext *>(_localctx)->i_body = body();
      setState(519);
      nl();
      break;
    }

    default:
      break;
    }
    setState(534);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::WS:
      case MavkaParser::KW_END: {
        setState(529);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MavkaParser::WS) {
          setState(523);
          ws();
          setState(524);
          match(MavkaParser::KW_ELSE);
          setState(525);
          nl();
          setState(526);
          antlrcpp::downCast<IfContext *>(_localctx)->i_else_body = body();
          setState(527);
          nl();
        }
        setState(531);
        match(MavkaParser::KW_END);
        break;
      }

      case MavkaParser::KW_ELSE: {
        setState(532);
        match(MavkaParser::KW_ELSE);
        setState(533);
        antlrcpp::downCast<IfContext *>(_localctx)->i_else_if = if_();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EachContext ------------------------------------------------------------------

MavkaParser::EachContext::EachContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::EachContext::KW_FOR() {
  return getToken(MavkaParser::KW_FOR, 0);
}

std::vector<MavkaParser::WsContext *> MavkaParser::EachContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::EachContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

tree::TerminalNode* MavkaParser::EachContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::EachContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::EachContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::EachContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::AtomContext* MavkaParser::EachContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::FromtoContext* MavkaParser::EachContext::fromto() {
  return getRuleContext<MavkaParser::FromtoContext>(0);
}

std::vector<MavkaParser::WssContext *> MavkaParser::EachContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::EachContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

tree::TerminalNode* MavkaParser::EachContext::COMA() {
  return getToken(MavkaParser::COMA, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::EachContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::EachContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

MavkaParser::BodyContext* MavkaParser::EachContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}


size_t MavkaParser::EachContext::getRuleIndex() const {
  return MavkaParser::RuleEach;
}

void MavkaParser::EachContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEach(this);
}

void MavkaParser::EachContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEach(this);
}


std::any MavkaParser::EachContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitEach(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::EachContext* MavkaParser::each() {
  EachContext *_localctx = _tracker.createInstance<EachContext>(_ctx, getState());
  enterRule(_localctx, 56, MavkaParser::RuleEach);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(536);
    match(MavkaParser::KW_FOR);
    setState(537);
    ws();
    setState(540);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      setState(538);
      antlrcpp::downCast<EachContext *>(_localctx)->e_iterator = atom(0);
      break;
    }

    case 2: {
      setState(539);
      antlrcpp::downCast<EachContext *>(_localctx)->e_fromto = fromto();
      break;
    }

    default:
      break;
    }
    setState(542);
    ws();
    setState(543);
    match(MavkaParser::KW_AS);
    setState(544);
    ws();
    setState(550);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      setState(545);
      antlrcpp::downCast<EachContext *>(_localctx)->e_key_name = identifier();
      setState(546);
      wss();
      setState(547);
      match(MavkaParser::COMA);
      setState(548);
      wss();
      break;
    }

    default:
      break;
    }
    setState(553);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(552);
      antlrcpp::downCast<EachContext *>(_localctx)->e_name = identifier();
    }
    setState(555);
    nl();
    setState(559);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9016911799321330134) != 0) || _la == MavkaParser::STRING_MULTILINE

    || _la == MavkaParser::STRING) {
      setState(556);
      antlrcpp::downCast<EachContext *>(_localctx)->e_body = body();
      setState(557);
      nl();
    }
    setState(561);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromtoContext ------------------------------------------------------------------

MavkaParser::FromtoContext::FromtoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Fromto_simpleContext* MavkaParser::FromtoContext::fromto_simple() {
  return getRuleContext<MavkaParser::Fromto_simpleContext>(0);
}

MavkaParser::Fromto_complexContext* MavkaParser::FromtoContext::fromto_complex() {
  return getRuleContext<MavkaParser::Fromto_complexContext>(0);
}


size_t MavkaParser::FromtoContext::getRuleIndex() const {
  return MavkaParser::RuleFromto;
}

void MavkaParser::FromtoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto(this);
}

void MavkaParser::FromtoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto(this);
}


std::any MavkaParser::FromtoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::FromtoContext* MavkaParser::fromto() {
  FromtoContext *_localctx = _tracker.createInstance<FromtoContext>(_ctx, getState());
  enterRule(_localctx, 58, MavkaParser::RuleFromto);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(565);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(563);
      fromto_simple();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(564);
      fromto_complex();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_simpleContext ------------------------------------------------------------------

MavkaParser::Fromto_simpleContext::Fromto_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::WssContext *> MavkaParser::Fromto_simpleContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Fromto_simpleContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_simpleContext::DOT() {
  return getTokens(MavkaParser::DOT);
}

tree::TerminalNode* MavkaParser::Fromto_simpleContext::DOT(size_t i) {
  return getToken(MavkaParser::DOT, i);
}

std::vector<MavkaParser::Fromto_valueContext *> MavkaParser::Fromto_simpleContext::fromto_value() {
  return getRuleContexts<MavkaParser::Fromto_valueContext>();
}

MavkaParser::Fromto_valueContext* MavkaParser::Fromto_simpleContext::fromto_value(size_t i) {
  return getRuleContext<MavkaParser::Fromto_valueContext>(i);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::Fromto_simpleContext::fromto_to_symbol() {
  return getRuleContext<MavkaParser::Fromto_to_symbolContext>(0);
}


size_t MavkaParser::Fromto_simpleContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_simple;
}

void MavkaParser::Fromto_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_simple(this);
}

void MavkaParser::Fromto_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_simple(this);
}


std::any MavkaParser::Fromto_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_simple(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_simpleContext* MavkaParser::fromto_simple() {
  Fromto_simpleContext *_localctx = _tracker.createInstance<Fromto_simpleContext>(_ctx, getState());
  enterRule(_localctx, 60, MavkaParser::RuleFromto_simple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(567);
    antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_from = fromto_value();
    setState(568);
    wss();
    setState(569);
    match(MavkaParser::DOT);
    setState(570);
    match(MavkaParser::DOT);
    setState(571);
    wss();
    setState(573);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 72057834556096512) != 0)) {
      setState(572);
      antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_to_symbol = fromto_to_symbol();
    }
    setState(575);
    wss();
    setState(576);
    antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_to = fromto_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_complexContext ------------------------------------------------------------------

MavkaParser::Fromto_complexContext::Fromto_complexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::WssContext *> MavkaParser::Fromto_complexContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Fromto_complexContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_complexContext::DOT() {
  return getTokens(MavkaParser::DOT);
}

tree::TerminalNode* MavkaParser::Fromto_complexContext::DOT(size_t i) {
  return getToken(MavkaParser::DOT, i);
}

std::vector<MavkaParser::Fromto_valueContext *> MavkaParser::Fromto_complexContext::fromto_value() {
  return getRuleContexts<MavkaParser::Fromto_valueContext>();
}

MavkaParser::Fromto_valueContext* MavkaParser::Fromto_complexContext::fromto_value(size_t i) {
  return getRuleContext<MavkaParser::Fromto_valueContext>(i);
}

MavkaParser::Fromto_middle_symbolContext* MavkaParser::Fromto_complexContext::fromto_middle_symbol() {
  return getRuleContext<MavkaParser::Fromto_middle_symbolContext>(0);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::Fromto_complexContext::fromto_to_symbol() {
  return getRuleContext<MavkaParser::Fromto_to_symbolContext>(0);
}


size_t MavkaParser::Fromto_complexContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_complex;
}

void MavkaParser::Fromto_complexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_complex(this);
}

void MavkaParser::Fromto_complexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_complex(this);
}


std::any MavkaParser::Fromto_complexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_complex(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_complexContext* MavkaParser::fromto_complex() {
  Fromto_complexContext *_localctx = _tracker.createInstance<Fromto_complexContext>(_ctx, getState());
  enterRule(_localctx, 62, MavkaParser::RuleFromto_complex);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(578);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_from = fromto_value();
    setState(579);
    wss();
    setState(580);
    match(MavkaParser::DOT);
    setState(581);
    match(MavkaParser::DOT);
    setState(582);
    wss();
    setState(584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 17042430230528) != 0)) {
      setState(583);
      antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_middle_symbol = fromto_middle_symbol();
    }
    setState(586);
    wss();
    setState(587);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_middle = fromto_value();
    setState(588);
    wss();
    setState(589);
    match(MavkaParser::DOT);
    setState(590);
    match(MavkaParser::DOT);
    setState(591);
    wss();
    setState(593);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 72057834556096512) != 0)) {
      setState(592);
      antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_to_symbol = fromto_to_symbol();
    }
    setState(595);
    wss();
    setState(596);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_to = fromto_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_valueContext ------------------------------------------------------------------

MavkaParser::Fromto_valueContext::Fromto_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::Fromto_valueContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_value;
}

void MavkaParser::Fromto_valueContext::copyFrom(Fromto_valueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Fromto_idContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::Fromto_idContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Fromto_idContext::Fromto_idContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_idContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_id(this);
}
void MavkaParser::Fromto_idContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_id(this);
}

std::any MavkaParser::Fromto_idContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_id(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Fromto_numberContext ------------------------------------------------------------------

MavkaParser::Number_tokenContext* MavkaParser::Fromto_numberContext::number_token() {
  return getRuleContext<MavkaParser::Number_tokenContext>(0);
}

MavkaParser::Fromto_numberContext::Fromto_numberContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_numberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_number(this);
}
void MavkaParser::Fromto_numberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_number(this);
}

std::any MavkaParser::Fromto_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_number(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Fromto_nestedContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Fromto_nestedContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Fromto_nestedContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Fromto_nestedContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Fromto_nestedContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::ExprContext* MavkaParser::Fromto_nestedContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::Fromto_nestedContext::Fromto_nestedContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_nestedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_nested(this);
}
void MavkaParser::Fromto_nestedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_nested(this);
}

std::any MavkaParser::Fromto_nestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_nested(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::Fromto_valueContext* MavkaParser::fromto_value() {
  Fromto_valueContext *_localctx = _tracker.createInstance<Fromto_valueContext>(_ctx, getState());
  enterRule(_localctx, 64, MavkaParser::RuleFromto_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(606);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::INTEGER:
      case MavkaParser::FLOAT:
      case MavkaParser::HEX:
      case MavkaParser::BIN: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_numberContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(598);
        number_token();
        break;
      }

      case MavkaParser::ID: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_idContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(599);
        identifier();
        break;
      }

      case MavkaParser::PAREN_OPEN: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_nestedContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(600);
        match(MavkaParser::PAREN_OPEN);
        setState(601);
        nls();
        setState(602);
        antlrcpp::downCast<Fromto_nestedContext *>(_localctx)->fn_value = expr();
        setState(603);
        nls();
        setState(604);
        match(MavkaParser::PAREN_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_middle_symbolContext ------------------------------------------------------------------

MavkaParser::Fromto_middle_symbolContext::Fromto_middle_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_middle_symbolContext::MULTIPLY() {
  return getTokens(MavkaParser::MULTIPLY);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::MULTIPLY(size_t i) {
  return getToken(MavkaParser::MULTIPLY, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_middle_symbolContext::DIVIDE() {
  return getTokens(MavkaParser::DIVIDE);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::DIVIDE(size_t i) {
  return getToken(MavkaParser::DIVIDE, i);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::MOD() {
  return getToken(MavkaParser::MOD, 0);
}


size_t MavkaParser::Fromto_middle_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_middle_symbol;
}

void MavkaParser::Fromto_middle_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_middle_symbol(this);
}

void MavkaParser::Fromto_middle_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_middle_symbol(this);
}


std::any MavkaParser::Fromto_middle_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_middle_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_middle_symbolContext* MavkaParser::fromto_middle_symbol() {
  Fromto_middle_symbolContext *_localctx = _tracker.createInstance<Fromto_middle_symbolContext>(_ctx, getState());
  enterRule(_localctx, 66, MavkaParser::RuleFromto_middle_symbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(617);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(608);
      match(MavkaParser::PLUS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(609);
      match(MavkaParser::MINUS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(610);
      match(MavkaParser::MULTIPLY);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(611);
      match(MavkaParser::DIVIDE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(612);
      match(MavkaParser::MOD);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(613);
      match(MavkaParser::DIVIDE);
      setState(614);
      match(MavkaParser::DIVIDE);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(615);
      match(MavkaParser::MULTIPLY);
      setState(616);
      match(MavkaParser::MULTIPLY);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_to_symbolContext ------------------------------------------------------------------

MavkaParser::Fromto_to_symbolContext::Fromto_to_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::EXCLAMATION() {
  return getToken(MavkaParser::EXCLAMATION, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_to_symbolContext::EQUAL() {
  return getTokens(MavkaParser::EQUAL);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::EQUAL(size_t i) {
  return getToken(MavkaParser::EQUAL, i);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}


size_t MavkaParser::Fromto_to_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_to_symbol;
}

void MavkaParser::Fromto_to_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_to_symbol(this);
}

void MavkaParser::Fromto_to_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_to_symbol(this);
}


std::any MavkaParser::Fromto_to_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_to_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::fromto_to_symbol() {
  Fromto_to_symbolContext *_localctx = _tracker.createInstance<Fromto_to_symbolContext>(_ctx, getState());
  enterRule(_localctx, 68, MavkaParser::RuleFromto_to_symbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(629);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(619);
      match(MavkaParser::EXCLAMATION);
      setState(620);
      match(MavkaParser::EQUAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(621);
      match(MavkaParser::EQUAL);
      setState(622);
      match(MavkaParser::EQUAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(623);
      match(MavkaParser::GREATER);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(624);
      match(MavkaParser::LESSER);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(625);
      match(MavkaParser::GREATER);
      setState(626);
      match(MavkaParser::EQUAL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(627);
      match(MavkaParser::LESSER);
      setState(628);
      match(MavkaParser::EQUAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileContext ------------------------------------------------------------------

MavkaParser::WhileContext::WhileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::WhileContext::KW_WHILE() {
  return getToken(MavkaParser::KW_WHILE, 0);
}

MavkaParser::WsContext* MavkaParser::WhileContext::ws() {
  return getRuleContext<MavkaParser::WsContext>(0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::WhileContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::WhileContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::WhileContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::ExprContext* MavkaParser::WhileContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::BodyContext* MavkaParser::WhileContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}


size_t MavkaParser::WhileContext::getRuleIndex() const {
  return MavkaParser::RuleWhile;
}

void MavkaParser::WhileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhile(this);
}

void MavkaParser::WhileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhile(this);
}


std::any MavkaParser::WhileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWhile(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::WhileContext* MavkaParser::while_() {
  WhileContext *_localctx = _tracker.createInstance<WhileContext>(_ctx, getState());
  enterRule(_localctx, 70, MavkaParser::RuleWhile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(631);
    match(MavkaParser::KW_WHILE);
    setState(632);
    ws();
    setState(633);
    antlrcpp::downCast<WhileContext *>(_localctx)->w_value = expr();
    setState(634);
    nl();
    setState(638);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9016911799321330134) != 0) || _la == MavkaParser::STRING_MULTILINE

    || _la == MavkaParser::STRING) {
      setState(635);
      antlrcpp::downCast<WhileContext *>(_localctx)->w_body = body();
      setState(636);
      nl();
    }
    setState(640);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryContext ------------------------------------------------------------------

MavkaParser::TryContext::TryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::TryContext::KW_TRY() {
  return getToken(MavkaParser::KW_TRY, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::TryContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::TryContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::TryContext::KW_CATCH() {
  return getToken(MavkaParser::KW_CATCH, 0);
}

MavkaParser::WsContext* MavkaParser::TryContext::ws() {
  return getRuleContext<MavkaParser::WsContext>(0);
}

tree::TerminalNode* MavkaParser::TryContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

std::vector<MavkaParser::BodyContext *> MavkaParser::TryContext::body() {
  return getRuleContexts<MavkaParser::BodyContext>();
}

MavkaParser::BodyContext* MavkaParser::TryContext::body(size_t i) {
  return getRuleContext<MavkaParser::BodyContext>(i);
}

MavkaParser::IdentifierContext* MavkaParser::TryContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}


size_t MavkaParser::TryContext::getRuleIndex() const {
  return MavkaParser::RuleTry;
}

void MavkaParser::TryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry(this);
}

void MavkaParser::TryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry(this);
}


std::any MavkaParser::TryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTry(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::TryContext* MavkaParser::try_() {
  TryContext *_localctx = _tracker.createInstance<TryContext>(_ctx, getState());
  enterRule(_localctx, 72, MavkaParser::RuleTry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(642);
    match(MavkaParser::KW_TRY);
    setState(643);
    nl();
    setState(647);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9016911799321330134) != 0) || _la == MavkaParser::STRING_MULTILINE

    || _la == MavkaParser::STRING) {
      setState(644);
      antlrcpp::downCast<TryContext *>(_localctx)->t_body = body();
      setState(645);
      nl();
    }
    setState(649);
    match(MavkaParser::KW_CATCH);
    setState(650);
    ws();
    setState(652);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(651);
      antlrcpp::downCast<TryContext *>(_localctx)->tc_name = identifier();
    }
    setState(654);
    nl();
    setState(658);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9016911799321330134) != 0) || _la == MavkaParser::STRING_MULTILINE

    || _la == MavkaParser::STRING) {
      setState(655);
      antlrcpp::downCast<TryContext *>(_localctx)->tc_body = body();
      setState(656);
      nl();
    }
    setState(660);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvalContext ------------------------------------------------------------------

MavkaParser::EvalContext::EvalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::EvalContext::KW_JS() {
  return getToken(MavkaParser::KW_JS, 0);
}

MavkaParser::WsContext* MavkaParser::EvalContext::ws() {
  return getRuleContext<MavkaParser::WsContext>(0);
}

MavkaParser::StringContext* MavkaParser::EvalContext::string() {
  return getRuleContext<MavkaParser::StringContext>(0);
}


size_t MavkaParser::EvalContext::getRuleIndex() const {
  return MavkaParser::RuleEval;
}

void MavkaParser::EvalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEval(this);
}

void MavkaParser::EvalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEval(this);
}


std::any MavkaParser::EvalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitEval(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::EvalContext* MavkaParser::eval() {
  EvalContext *_localctx = _tracker.createInstance<EvalContext>(_ctx, getState());
  enterRule(_localctx, 74, MavkaParser::RuleEval);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(662);
    match(MavkaParser::KW_JS);
    setState(663);
    ws();
    setState(664);
    antlrcpp::downCast<EvalContext *>(_localctx)->e_value = string();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TakeContext ------------------------------------------------------------------

MavkaParser::TakeContext::TakeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::TakeContext::getRuleIndex() const {
  return MavkaParser::RuleTake;
}

void MavkaParser::TakeContext::copyFrom(TakeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Take_moduleContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Take_moduleContext::KW_TAKE() {
  return getToken(MavkaParser::KW_TAKE, 0);
}

std::vector<MavkaParser::WsContext *> MavkaParser::Take_moduleContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::Take_moduleContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

MavkaParser::Identifiers_chainContext* MavkaParser::Take_moduleContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}

MavkaParser::WssContext* MavkaParser::Take_moduleContext::wss() {
  return getRuleContext<MavkaParser::WssContext>(0);
}

tree::TerminalNode* MavkaParser::Take_moduleContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Take_module_elementsContext* MavkaParser::Take_moduleContext::take_module_elements() {
  return getRuleContext<MavkaParser::Take_module_elementsContext>(0);
}

tree::TerminalNode* MavkaParser::Take_moduleContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Take_moduleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Take_moduleContext::Take_moduleContext(TakeContext *ctx) { copyFrom(ctx); }

void MavkaParser::Take_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_module(this);
}
void MavkaParser::Take_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_module(this);
}

std::any MavkaParser::Take_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_module(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Take_remoteContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Take_remoteContext::KW_TAKE() {
  return getToken(MavkaParser::KW_TAKE, 0);
}

std::vector<MavkaParser::WsContext *> MavkaParser::Take_remoteContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::Take_remoteContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::Take_remoteContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::Take_remoteContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Take_remoteContext::STRING() {
  return getTokens(MavkaParser::STRING);
}

tree::TerminalNode* MavkaParser::Take_remoteContext::STRING(size_t i) {
  return getToken(MavkaParser::STRING, i);
}

tree::TerminalNode* MavkaParser::Take_remoteContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}

MavkaParser::Take_remoteContext::Take_remoteContext(TakeContext *ctx) { copyFrom(ctx); }

void MavkaParser::Take_remoteContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_remote(this);
}
void MavkaParser::Take_remoteContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_remote(this);
}

std::any MavkaParser::Take_remoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_remote(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::TakeContext* MavkaParser::take() {
  TakeContext *_localctx = _tracker.createInstance<TakeContext>(_ctx, getState());
  enterRule(_localctx, 76, MavkaParser::RuleTake);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(696);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<MavkaParser::Take_moduleContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(666);
      match(MavkaParser::KW_TAKE);
      setState(667);
      ws();
      setState(669);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::DOT) {
        setState(668);
        antlrcpp::downCast<Take_moduleContext *>(_localctx)->tm_relative = match(MavkaParser::DOT);
      }
      setState(671);
      antlrcpp::downCast<Take_moduleContext *>(_localctx)->tm_name_chain = identifiers_chain(0);
      setState(680);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
      case 1: {
        setState(672);
        wss();
        setState(673);
        antlrcpp::downCast<Take_moduleContext *>(_localctx)->tm_elements = take_module_elements();
        break;
      }

      case 2: {
        setState(675);
        ws();
        setState(676);
        match(MavkaParser::KW_AS);
        setState(677);
        ws();
        setState(678);
        antlrcpp::downCast<Take_moduleContext *>(_localctx)->tm_as = identifier();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<MavkaParser::Take_remoteContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(682);
      match(MavkaParser::KW_TAKE);
      setState(683);
      ws();
      setState(684);
      identifier();
      setState(685);
      ws();
      setState(686);
      antlrcpp::downCast<Take_remoteContext *>(_localctx)->tr_url = match(MavkaParser::STRING);
      setState(687);
      ws();
      setState(688);
      antlrcpp::downCast<Take_remoteContext *>(_localctx)->tr_version = match(MavkaParser::STRING);
      setState(694);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
      case 1: {
        setState(689);
        ws();
        setState(690);
        match(MavkaParser::KW_AS);
        setState(691);
        ws();
        setState(692);
        antlrcpp::downCast<Take_remoteContext *>(_localctx)->tr_as = identifier();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Take_module_elementsContext ------------------------------------------------------------------

MavkaParser::Take_module_elementsContext::Take_module_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Take_module_elementsContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

std::vector<MavkaParser::WssContext *> MavkaParser::Take_module_elementsContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Take_module_elementsContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

std::vector<MavkaParser::Take_module_elementContext *> MavkaParser::Take_module_elementsContext::take_module_element() {
  return getRuleContexts<MavkaParser::Take_module_elementContext>();
}

MavkaParser::Take_module_elementContext* MavkaParser::Take_module_elementsContext::take_module_element(size_t i) {
  return getRuleContext<MavkaParser::Take_module_elementContext>(i);
}

tree::TerminalNode* MavkaParser::Take_module_elementsContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Take_module_elementsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Take_module_elementsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Take_module_elementsContext::getRuleIndex() const {
  return MavkaParser::RuleTake_module_elements;
}

void MavkaParser::Take_module_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_module_elements(this);
}

void MavkaParser::Take_module_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_module_elements(this);
}


std::any MavkaParser::Take_module_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_module_elements(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Take_module_elementsContext* MavkaParser::take_module_elements() {
  Take_module_elementsContext *_localctx = _tracker.createInstance<Take_module_elementsContext>(_ctx, getState());
  enterRule(_localctx, 78, MavkaParser::RuleTake_module_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(698);
    match(MavkaParser::BRACKET_OPEN);
    setState(699);
    wss();
    setState(700);
    take_module_element();
    setState(708);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(701);
        wss();
        setState(702);
        match(MavkaParser::COMA);
        setState(703);
        wss();
        setState(704);
        take_module_element(); 
      }
      setState(710);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    }
    setState(711);
    wss();
    setState(712);
    match(MavkaParser::BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Take_module_elementContext ------------------------------------------------------------------

MavkaParser::Take_module_elementContext::Take_module_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::Take_module_elementContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::Take_module_elementContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

std::vector<MavkaParser::WsContext *> MavkaParser::Take_module_elementContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::Take_module_elementContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

tree::TerminalNode* MavkaParser::Take_module_elementContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}


size_t MavkaParser::Take_module_elementContext::getRuleIndex() const {
  return MavkaParser::RuleTake_module_element;
}

void MavkaParser::Take_module_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_module_element(this);
}

void MavkaParser::Take_module_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_module_element(this);
}


std::any MavkaParser::Take_module_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_module_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Take_module_elementContext* MavkaParser::take_module_element() {
  Take_module_elementContext *_localctx = _tracker.createInstance<Take_module_elementContext>(_ctx, getState());
  enterRule(_localctx, 80, MavkaParser::RuleTake_module_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(714);
    antlrcpp::downCast<Take_module_elementContext *>(_localctx)->tme_name = identifier();
    setState(720);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      setState(715);
      ws();
      setState(716);
      match(MavkaParser::KW_AS);
      setState(717);
      ws();
      setState(718);
      antlrcpp::downCast<Take_module_elementContext *>(_localctx)->tme_as = identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GiveContext ------------------------------------------------------------------

MavkaParser::GiveContext::GiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::GiveContext::KW_GIVE() {
  return getToken(MavkaParser::KW_GIVE, 0);
}

MavkaParser::WsContext* MavkaParser::GiveContext::ws() {
  return getRuleContext<MavkaParser::WsContext>(0);
}

std::vector<MavkaParser::Give_elementContext *> MavkaParser::GiveContext::give_element() {
  return getRuleContexts<MavkaParser::Give_elementContext>();
}

MavkaParser::Give_elementContext* MavkaParser::GiveContext::give_element(size_t i) {
  return getRuleContext<MavkaParser::Give_elementContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::GiveContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::GiveContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::GiveContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::GiveContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::GiveContext::getRuleIndex() const {
  return MavkaParser::RuleGive;
}

void MavkaParser::GiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGive(this);
}

void MavkaParser::GiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGive(this);
}


std::any MavkaParser::GiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGive(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::GiveContext* MavkaParser::give() {
  GiveContext *_localctx = _tracker.createInstance<GiveContext>(_ctx, getState());
  enterRule(_localctx, 82, MavkaParser::RuleGive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(722);
    match(MavkaParser::KW_GIVE);
    setState(723);
    ws();
    setState(724);
    give_element();
    setState(732);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(725);
        nls();
        setState(726);
        match(MavkaParser::COMA);
        setState(727);
        nls();
        setState(728);
        give_element(); 
      }
      setState(734);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Give_elementContext ------------------------------------------------------------------

MavkaParser::Give_elementContext::Give_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::Give_elementContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::Give_elementContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

std::vector<MavkaParser::WsContext *> MavkaParser::Give_elementContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::Give_elementContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

tree::TerminalNode* MavkaParser::Give_elementContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}


size_t MavkaParser::Give_elementContext::getRuleIndex() const {
  return MavkaParser::RuleGive_element;
}

void MavkaParser::Give_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGive_element(this);
}

void MavkaParser::Give_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGive_element(this);
}


std::any MavkaParser::Give_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGive_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Give_elementContext* MavkaParser::give_element() {
  Give_elementContext *_localctx = _tracker.createInstance<Give_elementContext>(_ctx, getState());
  enterRule(_localctx, 84, MavkaParser::RuleGive_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(735);
    antlrcpp::downCast<Give_elementContext *>(_localctx)->ge_name = identifier();
    setState(741);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      setState(736);
      ws();
      setState(737);
      match(MavkaParser::KW_AS);
      setState(738);
      ws();
      setState(739);
      antlrcpp::downCast<Give_elementContext *>(_localctx)->ge_as = identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

MavkaParser::AtomContext::AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::AtomContext::getRuleIndex() const {
  return MavkaParser::RuleAtom;
}

void MavkaParser::AtomContext::copyFrom(AtomContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Get_elementContext ------------------------------------------------------------------

MavkaParser::WssContext* MavkaParser::Get_elementContext::wss() {
  return getRuleContext<MavkaParser::WssContext>(0);
}

tree::TerminalNode* MavkaParser::Get_elementContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Get_elementContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Get_elementContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Get_elementContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::AtomContext* MavkaParser::Get_elementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Get_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::Get_elementContext::Get_elementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Get_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGet_element(this);
}
void MavkaParser::Get_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGet_element(this);
}

std::any MavkaParser::Get_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGet_element(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ChainContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::ChainContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ChainContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::ChainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::AtomContext* MavkaParser::ChainContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::ChainContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::ChainContext::ChainContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::ChainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChain(this);
}
void MavkaParser::ChainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChain(this);
}

std::any MavkaParser::ChainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitChain(this);
  else
    return visitor->visitChildren(this);
}
//----------------- String_valueContext ------------------------------------------------------------------

MavkaParser::StringContext* MavkaParser::String_valueContext::string() {
  return getRuleContext<MavkaParser::StringContext>(0);
}

MavkaParser::String_valueContext::String_valueContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::String_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString_value(this);
}
void MavkaParser::String_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString_value(this);
}

std::any MavkaParser::String_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitString_value(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Pre_incrementContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MavkaParser::Pre_incrementContext::PLUS() {
  return getTokens(MavkaParser::PLUS);
}

tree::TerminalNode* MavkaParser::Pre_incrementContext::PLUS(size_t i) {
  return getToken(MavkaParser::PLUS, i);
}

MavkaParser::AtomContext* MavkaParser::Pre_incrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Pre_incrementContext::Pre_incrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Pre_incrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPre_increment(this);
}
void MavkaParser::Pre_incrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPre_increment(this);
}

std::any MavkaParser::Pre_incrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPre_increment(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Bitwise_notContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Bitwise_notContext::TILDA() {
  return getToken(MavkaParser::TILDA, 0);
}

MavkaParser::AtomContext* MavkaParser::Bitwise_notContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Bitwise_notContext::Bitwise_notContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Bitwise_notContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise_not(this);
}
void MavkaParser::Bitwise_notContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise_not(this);
}

std::any MavkaParser::Bitwise_notContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_not(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Typeless_dictionaryContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Typeless_dictionaryContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Typeless_dictionaryContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Typeless_dictionaryContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Typeless_dictionaryContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::Dictionary_argsContext* MavkaParser::Typeless_dictionaryContext::dictionary_args() {
  return getRuleContext<MavkaParser::Dictionary_argsContext>(0);
}

MavkaParser::Typeless_dictionaryContext::Typeless_dictionaryContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Typeless_dictionaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeless_dictionary(this);
}
void MavkaParser::Typeless_dictionaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeless_dictionary(this);
}

std::any MavkaParser::Typeless_dictionaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTypeless_dictionary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PositiveContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::PositiveContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

MavkaParser::AtomContext* MavkaParser::PositiveContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::PositiveContext::PositiveContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::PositiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositive(this);
}
void MavkaParser::PositiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositive(this);
}

std::any MavkaParser::PositiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPositive(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NestedContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NestedContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::NestedContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::NestedContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::NestedContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::ExprContext* MavkaParser::NestedContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::NestedContext::NestedContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NestedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNested(this);
}
void MavkaParser::NestedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNested(this);
}

std::any MavkaParser::NestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNested(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CallContext ------------------------------------------------------------------

std::vector<MavkaParser::WssContext *> MavkaParser::CallContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::CallContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

tree::TerminalNode* MavkaParser::CallContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::CallContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::CallContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::CallContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::AtomContext* MavkaParser::CallContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

tree::TerminalNode* MavkaParser::CallContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

MavkaParser::Call_genericsContext* MavkaParser::CallContext::call_generics() {
  return getRuleContext<MavkaParser::Call_genericsContext>(0);
}

tree::TerminalNode* MavkaParser::CallContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

MavkaParser::ArgsContext* MavkaParser::CallContext::args() {
  return getRuleContext<MavkaParser::ArgsContext>(0);
}

MavkaParser::Named_argsContext* MavkaParser::CallContext::named_args() {
  return getRuleContext<MavkaParser::Named_argsContext>(0);
}

MavkaParser::CallContext::CallContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::CallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall(this);
}
void MavkaParser::CallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall(this);
}

std::any MavkaParser::CallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NumberContext ------------------------------------------------------------------

MavkaParser::Number_tokenContext* MavkaParser::NumberContext::number_token() {
  return getRuleContext<MavkaParser::Number_tokenContext>(0);
}

MavkaParser::NumberContext::NumberContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NumberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumber(this);
}
void MavkaParser::NumberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumber(this);
}

std::any MavkaParser::NumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNumber(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NegativeContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NegativeContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}

MavkaParser::AtomContext* MavkaParser::NegativeContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::NegativeContext::NegativeContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NegativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNegative(this);
}
void MavkaParser::NegativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNegative(this);
}

std::any MavkaParser::NegativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNegative(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NotContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NotContext::EXCLAMATION() {
  return getToken(MavkaParser::EXCLAMATION, 0);
}

MavkaParser::AtomContext* MavkaParser::NotContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::NotContext::NotContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NotContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNot(this);
}
void MavkaParser::NotContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNot(this);
}

std::any MavkaParser::NotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNot(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Typeless_arrayContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Typeless_arrayContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Typeless_arrayContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Typeless_arrayContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Typeless_arrayContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::Array_elementsContext* MavkaParser::Typeless_arrayContext::array_elements() {
  return getRuleContext<MavkaParser::Array_elementsContext>(0);
}

MavkaParser::Typeless_arrayContext::Typeless_arrayContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Typeless_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeless_array(this);
}
void MavkaParser::Typeless_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeless_array(this);
}

std::any MavkaParser::Typeless_arrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTypeless_array(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Pre_decrementContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MavkaParser::Pre_decrementContext::MINUS() {
  return getTokens(MavkaParser::MINUS);
}

tree::TerminalNode* MavkaParser::Pre_decrementContext::MINUS(size_t i) {
  return getToken(MavkaParser::MINUS, i);
}

MavkaParser::AtomContext* MavkaParser::Pre_decrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Pre_decrementContext::Pre_decrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Pre_decrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPre_decrement(this);
}
void MavkaParser::Pre_decrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPre_decrement(this);
}

std::any MavkaParser::Pre_decrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPre_decrement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Post_decrementContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MavkaParser::Post_decrementContext::MINUS() {
  return getTokens(MavkaParser::MINUS);
}

tree::TerminalNode* MavkaParser::Post_decrementContext::MINUS(size_t i) {
  return getToken(MavkaParser::MINUS, i);
}

MavkaParser::AtomContext* MavkaParser::Post_decrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Post_decrementContext::Post_decrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Post_decrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPost_decrement(this);
}
void MavkaParser::Post_decrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPost_decrement(this);
}

std::any MavkaParser::Post_decrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPost_decrement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IdContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::IdContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::IdContext::IdContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::IdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterId(this);
}
void MavkaParser::IdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitId(this);
}

std::any MavkaParser::IdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitId(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Post_incrementContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MavkaParser::Post_incrementContext::PLUS() {
  return getTokens(MavkaParser::PLUS);
}

tree::TerminalNode* MavkaParser::Post_incrementContext::PLUS(size_t i) {
  return getToken(MavkaParser::PLUS, i);
}

MavkaParser::AtomContext* MavkaParser::Post_incrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Post_incrementContext::Post_incrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Post_incrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPost_increment(this);
}
void MavkaParser::Post_incrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPost_increment(this);
}

std::any MavkaParser::Post_incrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPost_increment(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::AtomContext* MavkaParser::atom() {
   return atom(0);
}

MavkaParser::AtomContext* MavkaParser::atom(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::AtomContext *_localctx = _tracker.createInstance<AtomContext>(_ctx, parentState);
  MavkaParser::AtomContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 86;
  enterRecursionRule(_localctx, 86, MavkaParser::RuleAtom, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(783);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<NumberContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(744);
      number_token();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<String_valueContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(745);
      string();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<IdContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(746);
      identifier();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<Typeless_arrayContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(747);
      match(MavkaParser::BRACKET_OPEN);
      setState(748);
      nls();
      setState(750);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 4) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 4)) & 4022321501276475409) != 0)) {
        setState(749);
        antlrcpp::downCast<Typeless_arrayContext *>(_localctx)->a_elements = array_elements();
      }
      setState(752);
      nls();
      setState(753);
      match(MavkaParser::BRACKET_CLOSE);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<Typeless_dictionaryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(755);
      match(MavkaParser::PAREN_OPEN);
      setState(756);
      nls();
      setState(758);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::ID

      || _la == MavkaParser::STRING) {
        setState(757);
        antlrcpp::downCast<Typeless_dictionaryContext *>(_localctx)->d_args = dictionary_args();
      }
      setState(760);
      nls();
      setState(761);
      match(MavkaParser::PAREN_CLOSE);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<PositiveContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(763);
      match(MavkaParser::PLUS);
      setState(764);
      antlrcpp::downCast<PositiveContext *>(_localctx)->p_value = atom(9);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<NegativeContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(765);
      match(MavkaParser::MINUS);
      setState(766);
      antlrcpp::downCast<NegativeContext *>(_localctx)->n_value = atom(8);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<Pre_decrementContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(767);
      match(MavkaParser::MINUS);
      setState(768);
      match(MavkaParser::MINUS);
      setState(769);
      antlrcpp::downCast<Pre_decrementContext *>(_localctx)->pd_value = atom(7);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<Pre_incrementContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(770);
      match(MavkaParser::PLUS);
      setState(771);
      match(MavkaParser::PLUS);
      setState(772);
      antlrcpp::downCast<Pre_incrementContext *>(_localctx)->pi_value = atom(6);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<NotContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(773);
      match(MavkaParser::EXCLAMATION);
      setState(774);
      antlrcpp::downCast<NotContext *>(_localctx)->n_value = atom(3);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<Bitwise_notContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(775);
      match(MavkaParser::TILDA);
      setState(776);
      antlrcpp::downCast<Bitwise_notContext *>(_localctx)->bn_value = atom(2);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<NestedContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(777);
      match(MavkaParser::PAREN_OPEN);
      setState(778);
      nls();
      setState(779);
      antlrcpp::downCast<NestedContext *>(_localctx)->n_value = expr();
      setState(780);
      nls();
      setState(781);
      match(MavkaParser::PAREN_CLOSE);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(827);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(825);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ChainContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(785);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(786);
          nls();
          setState(787);
          match(MavkaParser::DOT);
          setState(788);
          nls();
          setState(789);
          antlrcpp::downCast<ChainContext *>(_localctx)->c_right = identifier();
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<CallContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(791);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(799);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
          case 1: {
            setState(792);
            wss();
            setState(793);
            match(MavkaParser::LESSER);
            setState(794);
            wss();
            setState(795);
            call_generics();
            setState(796);
            wss();
            setState(797);
            match(MavkaParser::GREATER);
            break;
          }

          default:
            break;
          }
          setState(801);
          wss();
          setState(802);
          match(MavkaParser::PAREN_OPEN);
          setState(803);
          nls();
          setState(806);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
          case 1: {
            setState(804);
            antlrcpp::downCast<CallContext *>(_localctx)->c_args = args();
            break;
          }

          case 2: {
            setState(805);
            antlrcpp::downCast<CallContext *>(_localctx)->c_named_args = named_args();
            break;
          }

          default:
            break;
          }
          setState(808);
          nls();
          setState(809);
          match(MavkaParser::PAREN_CLOSE);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<Get_elementContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->ge_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(811);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(812);
          wss();
          setState(813);
          match(MavkaParser::BRACKET_OPEN);
          setState(814);
          nls();
          setState(815);
          antlrcpp::downCast<Get_elementContext *>(_localctx)->ge_element = expr();
          setState(816);
          nls();
          setState(817);
          match(MavkaParser::BRACKET_CLOSE);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<Post_decrementContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->pd_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(819);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(820);
          match(MavkaParser::MINUS);
          setState(821);
          match(MavkaParser::MINUS);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<Post_incrementContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->pi_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(822);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(823);
          match(MavkaParser::PLUS);
          setState(824);
          match(MavkaParser::PLUS);
          break;
        }

        default:
          break;
        } 
      }
      setState(829);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ValueContext ------------------------------------------------------------------

MavkaParser::ValueContext::ValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::ValueContext::getRuleIndex() const {
  return MavkaParser::RuleValue;
}

void MavkaParser::ValueContext::copyFrom(ValueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Arithmetic_mulContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::Arithmetic_mulContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Arithmetic_mulContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::Arithmetic_mulContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::Arithmetic_mulContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Arithmetic_op_mulContext* MavkaParser::Arithmetic_mulContext::arithmetic_op_mul() {
  return getRuleContext<MavkaParser::Arithmetic_op_mulContext>(0);
}

MavkaParser::Arithmetic_mulContext::Arithmetic_mulContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Arithmetic_mulContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_mul(this);
}
void MavkaParser::Arithmetic_mulContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_mul(this);
}

std::any MavkaParser::Arithmetic_mulContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_mul(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Arithmetic_addContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::Arithmetic_addContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Arithmetic_addContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::Arithmetic_addContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::Arithmetic_addContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Arithmetic_op_addContext* MavkaParser::Arithmetic_addContext::arithmetic_op_add() {
  return getRuleContext<MavkaParser::Arithmetic_op_addContext>(0);
}

MavkaParser::Arithmetic_addContext::Arithmetic_addContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Arithmetic_addContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_add(this);
}
void MavkaParser::Arithmetic_addContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_add(this);
}

std::any MavkaParser::Arithmetic_addContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_add(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ComparisonContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::ComparisonContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ComparisonContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::ComparisonContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::ComparisonContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Comparison_opContext* MavkaParser::ComparisonContext::comparison_op() {
  return getRuleContext<MavkaParser::Comparison_opContext>(0);
}

MavkaParser::ComparisonContext::ComparisonContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::ComparisonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison(this);
}
void MavkaParser::ComparisonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison(this);
}

std::any MavkaParser::ComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComparison(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TestContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::TestContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::TestContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::TestContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::TestContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Test_opContext* MavkaParser::TestContext::test_op() {
  return getRuleContext<MavkaParser::Test_opContext>(0);
}

MavkaParser::TestContext::TestContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::TestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTest(this);
}
void MavkaParser::TestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTest(this);
}

std::any MavkaParser::TestContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTest(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BitwiseContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::BitwiseContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::BitwiseContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::BitwiseContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::BitwiseContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Bitwise_opContext* MavkaParser::BitwiseContext::bitwise_op() {
  return getRuleContext<MavkaParser::Bitwise_opContext>(0);
}

MavkaParser::BitwiseContext::BitwiseContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::BitwiseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise(this);
}
void MavkaParser::BitwiseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise(this);
}

std::any MavkaParser::BitwiseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Value_atomContext ------------------------------------------------------------------

MavkaParser::AtomContext* MavkaParser::Value_atomContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Value_atomContext::Value_atomContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Value_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue_atom(this);
}
void MavkaParser::Value_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue_atom(this);
}

std::any MavkaParser::Value_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitValue_atom(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ValueContext* MavkaParser::value() {
   return value(0);
}

MavkaParser::ValueContext* MavkaParser::value(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::ValueContext *_localctx = _tracker.createInstance<ValueContext>(_ctx, parentState);
  MavkaParser::ValueContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 88;
  enterRecursionRule(_localctx, 88, MavkaParser::RuleValue, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<Value_atomContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(831);
    atom(0);
    _ctx->stop = _input->LT(-1);
    setState(865);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(863);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<Arithmetic_mulContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->a_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(833);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(834);
          nls();
          setState(835);
          antlrcpp::downCast<Arithmetic_mulContext *>(_localctx)->a_operation = arithmetic_op_mul();
          setState(836);
          nls();
          setState(837);
          antlrcpp::downCast<Arithmetic_mulContext *>(_localctx)->a_right = value(6);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<Arithmetic_addContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->a_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(839);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(840);
          nls();
          setState(841);
          antlrcpp::downCast<Arithmetic_addContext *>(_localctx)->a_operation = arithmetic_op_add();
          setState(842);
          nls();
          setState(843);
          antlrcpp::downCast<Arithmetic_addContext *>(_localctx)->a_right = value(5);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<BitwiseContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->b_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(845);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(846);
          nls();
          setState(847);
          antlrcpp::downCast<BitwiseContext *>(_localctx)->b_operation = bitwise_op();
          setState(848);
          nls();
          setState(849);
          antlrcpp::downCast<BitwiseContext *>(_localctx)->b_right = value(4);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<ComparisonContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(851);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(852);
          nls();
          setState(853);
          antlrcpp::downCast<ComparisonContext *>(_localctx)->c_operation = comparison_op();
          setState(854);
          nls();
          setState(855);
          antlrcpp::downCast<ComparisonContext *>(_localctx)->c_right = value(3);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<TestContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->t_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(857);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(858);
          nls();
          setState(859);
          antlrcpp::downCast<TestContext *>(_localctx)->t_operation = test_op();
          setState(860);
          nls();
          setState(861);
          antlrcpp::downCast<TestContext *>(_localctx)->t_right = value(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(867);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Call_genericsContext ------------------------------------------------------------------

MavkaParser::Call_genericsContext::Call_genericsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Type_valueContext *> MavkaParser::Call_genericsContext::type_value() {
  return getRuleContexts<MavkaParser::Type_valueContext>();
}

MavkaParser::Type_valueContext* MavkaParser::Call_genericsContext::type_value(size_t i) {
  return getRuleContext<MavkaParser::Type_valueContext>(i);
}

std::vector<MavkaParser::WssContext *> MavkaParser::Call_genericsContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Call_genericsContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Call_genericsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Call_genericsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Call_genericsContext::getRuleIndex() const {
  return MavkaParser::RuleCall_generics;
}

void MavkaParser::Call_genericsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_generics(this);
}

void MavkaParser::Call_genericsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_generics(this);
}


std::any MavkaParser::Call_genericsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall_generics(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Call_genericsContext* MavkaParser::call_generics() {
  Call_genericsContext *_localctx = _tracker.createInstance<Call_genericsContext>(_ctx, getState());
  enterRule(_localctx, 90, MavkaParser::RuleCall_generics);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(868);
    type_value();
    setState(876);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(869);
        wss();
        setState(870);
        match(MavkaParser::COMA);
        setState(871);
        wss();
        setState(872);
        type_value(); 
      }
      setState(878);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_elementsContext ------------------------------------------------------------------

MavkaParser::Array_elementsContext::Array_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Array_elementContext *> MavkaParser::Array_elementsContext::array_element() {
  return getRuleContexts<MavkaParser::Array_elementContext>();
}

MavkaParser::Array_elementContext* MavkaParser::Array_elementsContext::array_element(size_t i) {
  return getRuleContext<MavkaParser::Array_elementContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Array_elementsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Array_elementsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Array_elementsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Array_elementsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Array_elementsContext::getRuleIndex() const {
  return MavkaParser::RuleArray_elements;
}

void MavkaParser::Array_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_elements(this);
}

void MavkaParser::Array_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_elements(this);
}


std::any MavkaParser::Array_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray_elements(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Array_elementsContext* MavkaParser::array_elements() {
  Array_elementsContext *_localctx = _tracker.createInstance<Array_elementsContext>(_ctx, getState());
  enterRule(_localctx, 92, MavkaParser::RuleArray_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(879);
    array_element();
    setState(887);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(880);
        nls();
        setState(881);
        match(MavkaParser::COMA);
        setState(882);
        nls();
        setState(883);
        array_element(); 
      }
      setState(889);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_elementContext ------------------------------------------------------------------

MavkaParser::Array_elementContext::Array_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ExprContext* MavkaParser::Array_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Array_elementContext::getRuleIndex() const {
  return MavkaParser::RuleArray_element;
}

void MavkaParser::Array_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_element(this);
}

void MavkaParser::Array_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_element(this);
}


std::any MavkaParser::Array_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Array_elementContext* MavkaParser::array_element() {
  Array_elementContext *_localctx = _tracker.createInstance<Array_elementContext>(_ctx, getState());
  enterRule(_localctx, 94, MavkaParser::RuleArray_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(890);
    antlrcpp::downCast<Array_elementContext *>(_localctx)->ae_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dictionary_argsContext ------------------------------------------------------------------

MavkaParser::Dictionary_argsContext::Dictionary_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Dictionary_argContext *> MavkaParser::Dictionary_argsContext::dictionary_arg() {
  return getRuleContexts<MavkaParser::Dictionary_argContext>();
}

MavkaParser::Dictionary_argContext* MavkaParser::Dictionary_argsContext::dictionary_arg(size_t i) {
  return getRuleContext<MavkaParser::Dictionary_argContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Dictionary_argsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Dictionary_argsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Dictionary_argsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Dictionary_argsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Dictionary_argsContext::getRuleIndex() const {
  return MavkaParser::RuleDictionary_args;
}

void MavkaParser::Dictionary_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionary_args(this);
}

void MavkaParser::Dictionary_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionary_args(this);
}


std::any MavkaParser::Dictionary_argsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDictionary_args(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Dictionary_argsContext* MavkaParser::dictionary_args() {
  Dictionary_argsContext *_localctx = _tracker.createInstance<Dictionary_argsContext>(_ctx, getState());
  enterRule(_localctx, 96, MavkaParser::RuleDictionary_args);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(892);
    dictionary_arg();
    setState(900);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(893);
        nls();
        setState(894);
        match(MavkaParser::COMA);
        setState(895);
        nls();
        setState(896);
        dictionary_arg(); 
      }
      setState(902);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dictionary_argContext ------------------------------------------------------------------

MavkaParser::Dictionary_argContext::Dictionary_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::WssContext *> MavkaParser::Dictionary_argContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Dictionary_argContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

tree::TerminalNode* MavkaParser::Dictionary_argContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

MavkaParser::ExprContext* MavkaParser::Dictionary_argContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::Dictionary_argContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Dictionary_argContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}


size_t MavkaParser::Dictionary_argContext::getRuleIndex() const {
  return MavkaParser::RuleDictionary_arg;
}

void MavkaParser::Dictionary_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionary_arg(this);
}

void MavkaParser::Dictionary_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionary_arg(this);
}


std::any MavkaParser::Dictionary_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDictionary_arg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Dictionary_argContext* MavkaParser::dictionary_arg() {
  Dictionary_argContext *_localctx = _tracker.createInstance<Dictionary_argContext>(_ctx, getState());
  enterRule(_localctx, 98, MavkaParser::RuleDictionary_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(905);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::ID: {
        setState(903);
        antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_name_id = identifier();
        break;
      }

      case MavkaParser::STRING: {
        setState(904);
        antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_name_string = match(MavkaParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(907);
    wss();
    setState(908);
    match(MavkaParser::EQUAL);
    setState(909);
    wss();
    setState(910);
    antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

MavkaParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::ExprContext::getRuleIndex() const {
  return MavkaParser::RuleExpr;
}

void MavkaParser::ExprContext::copyFrom(ExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Anonymous_diiaContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::KW_DIIA() {
  return getToken(MavkaParser::KW_DIIA, 0);
}

MavkaParser::WssContext* MavkaParser::Anonymous_diiaContext::wss() {
  return getRuleContext<MavkaParser::WssContext>(0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Anonymous_diiaContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Anonymous_diiaContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

std::vector<MavkaParser::WsContext *> MavkaParser::Anonymous_diiaContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::Anonymous_diiaContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Anonymous_diiaContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Anonymous_diiaContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::KW_ASYNC() {
  return getToken(MavkaParser::KW_ASYNC, 0);
}

MavkaParser::GenericsContext* MavkaParser::Anonymous_diiaContext::generics() {
  return getRuleContext<MavkaParser::GenericsContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::Anonymous_diiaContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::Anonymous_diiaContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::BodyContext* MavkaParser::Anonymous_diiaContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}

MavkaParser::Anonymous_diiaContext::Anonymous_diiaContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::Anonymous_diiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymous_diia(this);
}
void MavkaParser::Anonymous_diiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymous_diia(this);
}

std::any MavkaParser::Anonymous_diiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAnonymous_diia(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AsContext ------------------------------------------------------------------

std::vector<MavkaParser::WsContext *> MavkaParser::AsContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::AsContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

tree::TerminalNode* MavkaParser::AsContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}

MavkaParser::AtomContext* MavkaParser::AsContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Type_value_itemContext* MavkaParser::AsContext::type_value_item() {
  return getRuleContext<MavkaParser::Type_value_itemContext>(0);
}

MavkaParser::AsContext::AsContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::AsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAs(this);
}
void MavkaParser::AsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAs(this);
}

std::any MavkaParser::AsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAs(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WaitContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::WaitContext::KW_WAIT() {
  return getToken(MavkaParser::KW_WAIT, 0);
}

MavkaParser::WsContext* MavkaParser::WaitContext::ws() {
  return getRuleContext<MavkaParser::WsContext>(0);
}

MavkaParser::ValueContext* MavkaParser::WaitContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::WaitContext::WaitContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::WaitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWait(this);
}
void MavkaParser::WaitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWait(this);
}

std::any MavkaParser::WaitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWait(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Call_parentContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Call_parentContext::KW_PARENT() {
  return getToken(MavkaParser::KW_PARENT, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Call_parentContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Call_parentContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Call_parentContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

tree::TerminalNode* MavkaParser::Call_parentContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Call_parentContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Call_parentContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::ArgsContext* MavkaParser::Call_parentContext::args() {
  return getRuleContext<MavkaParser::ArgsContext>(0);
}

MavkaParser::Named_argsContext* MavkaParser::Call_parentContext::named_args() {
  return getRuleContext<MavkaParser::Named_argsContext>(0);
}

MavkaParser::Call_parentContext::Call_parentContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::Call_parentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_parent(this);
}
void MavkaParser::Call_parentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_parent(this);
}

std::any MavkaParser::Call_parentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall_parent(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FunctionContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::FunctionContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::FunctionContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::FunctionContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::FunctionContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

std::vector<MavkaParser::WsContext *> MavkaParser::FunctionContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::FunctionContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

tree::TerminalNode* MavkaParser::FunctionContext::COLON() {
  return getToken(MavkaParser::COLON, 0);
}

MavkaParser::ExprContext* MavkaParser::FunctionContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

tree::TerminalNode* MavkaParser::FunctionContext::KW_ASYNC() {
  return getToken(MavkaParser::KW_ASYNC, 0);
}

MavkaParser::ParamsContext* MavkaParser::FunctionContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::FunctionContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::FunctionContext::FunctionContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::FunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction(this);
}
void MavkaParser::FunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction(this);
}

std::any MavkaParser::FunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleContext ------------------------------------------------------------------

MavkaParser::ValueContext* MavkaParser::SimpleContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::SimpleContext::SimpleContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::SimpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple(this);
}
void MavkaParser::SimpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple(this);
}

std::any MavkaParser::SimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitSimple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TernaryContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::TernaryContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::TernaryContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::TernaryContext::QUESTION() {
  return getToken(MavkaParser::QUESTION, 0);
}

tree::TerminalNode* MavkaParser::TernaryContext::COLON() {
  return getToken(MavkaParser::COLON, 0);
}

MavkaParser::ValueContext* MavkaParser::TernaryContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

std::vector<MavkaParser::ExprContext *> MavkaParser::TernaryContext::expr() {
  return getRuleContexts<MavkaParser::ExprContext>();
}

MavkaParser::ExprContext* MavkaParser::TernaryContext::expr(size_t i) {
  return getRuleContext<MavkaParser::ExprContext>(i);
}

MavkaParser::TernaryContext::TernaryContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::TernaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTernary(this);
}
void MavkaParser::TernaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTernary(this);
}

std::any MavkaParser::TernaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTernary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GodContext ------------------------------------------------------------------

std::vector<MavkaParser::AtomContext *> MavkaParser::GodContext::atom() {
  return getRuleContexts<MavkaParser::AtomContext>();
}

MavkaParser::AtomContext* MavkaParser::GodContext::atom(size_t i) {
  return getRuleContext<MavkaParser::AtomContext>(i);
}

std::vector<MavkaParser::WsContext *> MavkaParser::GodContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::GodContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::GodContext::KW_TA() {
  return getTokens(MavkaParser::KW_TA);
}

tree::TerminalNode* MavkaParser::GodContext::KW_TA(size_t i) {
  return getToken(MavkaParser::KW_TA, i);
}

MavkaParser::GodContext::GodContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::GodContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGod(this);
}
void MavkaParser::GodContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGod(this);
}

std::any MavkaParser::GodContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGod(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::ExprContext* MavkaParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 100, MavkaParser::RuleExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1011);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<MavkaParser::Call_parentContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(912);
      match(MavkaParser::KW_PARENT);
      setState(913);
      nls();
      setState(914);
      match(MavkaParser::DOT);
      setState(915);
      nls();
      setState(916);
      antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_id = identifier();
      setState(917);
      match(MavkaParser::PAREN_OPEN);
      setState(918);
      nls();
      setState(921);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
      case 1: {
        setState(919);
        antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_args = args();
        break;
      }

      case 2: {
        setState(920);
        antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_named_args = named_args();
        break;
      }

      default:
        break;
      }
      setState(923);
      nls();
      setState(924);
      match(MavkaParser::PAREN_CLOSE);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<MavkaParser::SimpleContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(926);
      value(0);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<MavkaParser::AsContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(927);
      antlrcpp::downCast<AsContext *>(_localctx)->a_left = atom(0);
      setState(928);
      ws();
      setState(929);
      match(MavkaParser::KW_AS);
      setState(930);
      ws();
      setState(931);
      antlrcpp::downCast<AsContext *>(_localctx)->a_right = type_value_item();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<MavkaParser::TernaryContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(933);
      antlrcpp::downCast<TernaryContext *>(_localctx)->t_value = value(0);
      setState(934);
      nls();
      setState(935);
      match(MavkaParser::QUESTION);
      setState(936);
      nls();
      setState(937);
      antlrcpp::downCast<TernaryContext *>(_localctx)->t_positive = expr();
      setState(938);
      nls();
      setState(939);
      match(MavkaParser::COLON);
      setState(940);
      nls();
      setState(941);
      antlrcpp::downCast<TernaryContext *>(_localctx)->t_negative = expr();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<MavkaParser::GodContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(943);
      atom(0);
      setState(949); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(944);
                ws();
                setState(945);
                match(MavkaParser::KW_TA);
                setState(946);
                ws();
                setState(947);
                atom(0);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(951); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<MavkaParser::WaitContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(953);
      match(MavkaParser::KW_WAIT);
      setState(954);
      ws();
      setState(955);
      antlrcpp::downCast<WaitContext *>(_localctx)->w_value = value(0);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<MavkaParser::FunctionContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(959);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::KW_ASYNC) {
        setState(957);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_async = match(MavkaParser::KW_ASYNC);
        setState(958);
        ws();
      }
      setState(961);
      match(MavkaParser::PAREN_OPEN);
      setState(962);
      nls();
      setState(964);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::DOT

      || _la == MavkaParser::ID) {
        setState(963);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_params = params();
      }
      setState(966);
      nls();
      setState(967);
      match(MavkaParser::PAREN_CLOSE);
      setState(968);
      ws();
      setState(970);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::BRACKET_OPEN

      || _la == MavkaParser::ID) {
        setState(969);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_type = type_value();
      }
      setState(972);
      ws();
      setState(973);
      match(MavkaParser::COLON);
      setState(974);
      nls();
      setState(975);
      antlrcpp::downCast<FunctionContext *>(_localctx)->f_body = expr();
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<MavkaParser::Anonymous_diiaContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(979);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::KW_ASYNC) {
        setState(977);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_async = match(MavkaParser::KW_ASYNC);
        setState(978);
        ws();
      }
      setState(981);
      match(MavkaParser::KW_DIIA);
      setState(989);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
      case 1: {
        setState(982);
        nls();
        setState(983);
        match(MavkaParser::LESSER);
        setState(984);
        nls();
        setState(985);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_generics = generics();
        setState(986);
        nls();
        setState(987);
        match(MavkaParser::GREATER);
        break;
      }

      default:
        break;
      }
      setState(991);
      wss();
      setState(992);
      match(MavkaParser::PAREN_OPEN);
      setState(993);
      nls();
      setState(995);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::DOT

      || _la == MavkaParser::ID) {
        setState(994);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_params = params();
      }
      setState(997);
      nls();
      setState(998);
      match(MavkaParser::PAREN_CLOSE);
      setState(999);
      ws();
      setState(1001);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::BRACKET_OPEN

      || _la == MavkaParser::ID) {
        setState(1000);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_type = type_value();
      }
      setState(1003);
      nl();
      setState(1007);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 9016911799321330134) != 0) || _la == MavkaParser::STRING_MULTILINE

      || _la == MavkaParser::STRING) {
        setState(1004);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_body = body();
        setState(1005);
        nl();
      }
      setState(1009);
      match(MavkaParser::KW_END);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowContext ------------------------------------------------------------------

MavkaParser::ThrowContext::ThrowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::ThrowContext::KW_THROW() {
  return getToken(MavkaParser::KW_THROW, 0);
}

MavkaParser::WsContext* MavkaParser::ThrowContext::ws() {
  return getRuleContext<MavkaParser::WsContext>(0);
}

MavkaParser::ExprContext* MavkaParser::ThrowContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::ThrowContext::getRuleIndex() const {
  return MavkaParser::RuleThrow;
}

void MavkaParser::ThrowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrow(this);
}

void MavkaParser::ThrowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrow(this);
}


std::any MavkaParser::ThrowContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitThrow(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ThrowContext* MavkaParser::throw_() {
  ThrowContext *_localctx = _tracker.createInstance<ThrowContext>(_ctx, getState());
  enterRule(_localctx, 102, MavkaParser::RuleThrow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1013);
    match(MavkaParser::KW_THROW);
    setState(1014);
    ws();
    setState(1015);
    antlrcpp::downCast<ThrowContext *>(_localctx)->t_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignContext ------------------------------------------------------------------

MavkaParser::AssignContext::AssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Assign_simpleContext* MavkaParser::AssignContext::assign_simple() {
  return getRuleContext<MavkaParser::Assign_simpleContext>(0);
}

MavkaParser::Assign_by_identifierContext* MavkaParser::AssignContext::assign_by_identifier() {
  return getRuleContext<MavkaParser::Assign_by_identifierContext>(0);
}

MavkaParser::Assign_by_elementContext* MavkaParser::AssignContext::assign_by_element() {
  return getRuleContext<MavkaParser::Assign_by_elementContext>(0);
}


size_t MavkaParser::AssignContext::getRuleIndex() const {
  return MavkaParser::RuleAssign;
}

void MavkaParser::AssignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign(this);
}

void MavkaParser::AssignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign(this);
}


std::any MavkaParser::AssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::AssignContext* MavkaParser::assign() {
  AssignContext *_localctx = _tracker.createInstance<AssignContext>(_ctx, getState());
  enterRule(_localctx, 104, MavkaParser::RuleAssign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1020);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1017);
      assign_simple();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1018);
      assign_by_identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1019);
      assign_by_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_simpleContext ------------------------------------------------------------------

MavkaParser::Assign_simpleContext::Assign_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::WssContext *> MavkaParser::Assign_simpleContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Assign_simpleContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

MavkaParser::IdentifierContext* MavkaParser::Assign_simpleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_simpleContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Assign_simpleContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

std::vector<MavkaParser::WsContext *> MavkaParser::Assign_simpleContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::Assign_simpleContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

tree::TerminalNode* MavkaParser::Assign_simpleContext::KW_SUBJECT() {
  return getToken(MavkaParser::KW_SUBJECT, 0);
}

MavkaParser::Type_valueContext* MavkaParser::Assign_simpleContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::Assign_simpleContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_simple;
}

void MavkaParser::Assign_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_simple(this);
}

void MavkaParser::Assign_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_simple(this);
}


std::any MavkaParser::Assign_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_simple(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_simpleContext* MavkaParser::assign_simple() {
  Assign_simpleContext *_localctx = _tracker.createInstance<Assign_simpleContext>(_ctx, getState());
  enterRule(_localctx, 106, MavkaParser::RuleAssign_simple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1024);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SUBJECT) {
      setState(1022);
      antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_subject = match(MavkaParser::KW_SUBJECT);
      setState(1023);
      ws();
    }
    setState(1026);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_identifier = identifier();
    setState(1030);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      setState(1027);
      ws();
      setState(1028);
      antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_type = type_value();
      break;
    }

    default:
      break;
    }
    setState(1032);
    wss();
    setState(1033);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_symbol = assign_symbol();
    setState(1034);
    wss();
    setState(1035);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_by_identifierContext ------------------------------------------------------------------

MavkaParser::Assign_by_identifierContext::Assign_by_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Assign_by_identifierContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Assign_by_identifierContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Assign_by_identifierContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

std::vector<MavkaParser::WssContext *> MavkaParser::Assign_by_identifierContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Assign_by_identifierContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Assign_by_identifierContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::Assign_by_identifierContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_by_identifierContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Assign_by_identifierContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Assign_by_identifierContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_by_identifier;
}

void MavkaParser::Assign_by_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_by_identifier(this);
}

void MavkaParser::Assign_by_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_by_identifier(this);
}


std::any MavkaParser::Assign_by_identifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_by_identifier(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_by_identifierContext* MavkaParser::assign_by_identifier() {
  Assign_by_identifierContext *_localctx = _tracker.createInstance<Assign_by_identifierContext>(_ctx, getState());
  enterRule(_localctx, 108, MavkaParser::RuleAssign_by_identifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1037);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_left = super_identifiers_chain(0);
    setState(1038);
    nls();
    setState(1039);
    match(MavkaParser::DOT);
    setState(1040);
    nls();
    setState(1041);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_identifier = identifier();
    setState(1042);
    wss();
    setState(1043);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_symbol = assign_symbol();
    setState(1044);
    wss();
    setState(1045);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_by_elementContext ------------------------------------------------------------------

MavkaParser::Assign_by_elementContext::Assign_by_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_by_elementContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Assign_by_elementContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Assign_by_elementContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Assign_by_elementContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

std::vector<MavkaParser::WssContext *> MavkaParser::Assign_by_elementContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Assign_by_elementContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Assign_by_elementContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

std::vector<MavkaParser::ExprContext *> MavkaParser::Assign_by_elementContext::expr() {
  return getRuleContexts<MavkaParser::ExprContext>();
}

MavkaParser::ExprContext* MavkaParser::Assign_by_elementContext::expr(size_t i) {
  return getRuleContext<MavkaParser::ExprContext>(i);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_by_elementContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}


size_t MavkaParser::Assign_by_elementContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_by_element;
}

void MavkaParser::Assign_by_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_by_element(this);
}

void MavkaParser::Assign_by_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_by_element(this);
}


std::any MavkaParser::Assign_by_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_by_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_by_elementContext* MavkaParser::assign_by_element() {
  Assign_by_elementContext *_localctx = _tracker.createInstance<Assign_by_elementContext>(_ctx, getState());
  enterRule(_localctx, 110, MavkaParser::RuleAssign_by_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1047);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_left = super_identifiers_chain(0);
    setState(1048);
    match(MavkaParser::BRACKET_OPEN);
    setState(1049);
    nls();
    setState(1050);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_index = expr();
    setState(1051);
    nls();
    setState(1052);
    match(MavkaParser::BRACKET_CLOSE);
    setState(1053);
    wss();
    setState(1054);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_symbol = assign_symbol();
    setState(1055);
    wss();
    setState(1056);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_symbolContext ------------------------------------------------------------------

MavkaParser::Assign_symbolContext::Assign_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::KW_TSE() {
  return getToken(MavkaParser::KW_TSE, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::COLON() {
  return getToken(MavkaParser::COLON, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::MULTIPLY() {
  return getTokens(MavkaParser::MULTIPLY);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::MULTIPLY(size_t i) {
  return getToken(MavkaParser::MULTIPLY, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::DIVIDE() {
  return getTokens(MavkaParser::DIVIDE);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::DIVIDE(size_t i) {
  return getToken(MavkaParser::DIVIDE, i);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::MOD() {
  return getToken(MavkaParser::MOD, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::AND() {
  return getTokens(MavkaParser::AND);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::AND(size_t i) {
  return getToken(MavkaParser::AND, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::OR() {
  return getTokens(MavkaParser::OR);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::OR(size_t i) {
  return getToken(MavkaParser::OR, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::POWER() {
  return getToken(MavkaParser::POWER, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::QUESTION() {
  return getTokens(MavkaParser::QUESTION);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::QUESTION(size_t i) {
  return getToken(MavkaParser::QUESTION, i);
}


size_t MavkaParser::Assign_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_symbol;
}

void MavkaParser::Assign_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_symbol(this);
}

void MavkaParser::Assign_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_symbol(this);
}


std::any MavkaParser::Assign_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_symbolContext* MavkaParser::assign_symbol() {
  Assign_symbolContext *_localctx = _tracker.createInstance<Assign_symbolContext>(_ctx, getState());
  enterRule(_localctx, 112, MavkaParser::RuleAssign_symbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1099);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1058);
      match(MavkaParser::KW_TSE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1059);
      match(MavkaParser::EQUAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1060);
      match(MavkaParser::COLON);
      setState(1061);
      match(MavkaParser::EQUAL);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1062);
      match(MavkaParser::PLUS);
      setState(1063);
      match(MavkaParser::EQUAL);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1064);
      match(MavkaParser::MINUS);
      setState(1065);
      match(MavkaParser::EQUAL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1066);
      match(MavkaParser::MULTIPLY);
      setState(1067);
      match(MavkaParser::EQUAL);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1068);
      match(MavkaParser::DIVIDE);
      setState(1069);
      match(MavkaParser::EQUAL);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1070);
      match(MavkaParser::DIVIDE);
      setState(1071);
      match(MavkaParser::DIVIDE);
      setState(1072);
      match(MavkaParser::EQUAL);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1073);
      match(MavkaParser::MOD);
      setState(1074);
      match(MavkaParser::EQUAL);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1075);
      match(MavkaParser::MULTIPLY);
      setState(1076);
      match(MavkaParser::MULTIPLY);
      setState(1077);
      match(MavkaParser::EQUAL);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1078);
      match(MavkaParser::AND);
      setState(1079);
      match(MavkaParser::EQUAL);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1080);
      match(MavkaParser::OR);
      setState(1081);
      match(MavkaParser::EQUAL);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1082);
      match(MavkaParser::LESSER);
      setState(1083);
      match(MavkaParser::LESSER);
      setState(1084);
      match(MavkaParser::EQUAL);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1085);
      match(MavkaParser::GREATER);
      setState(1086);
      match(MavkaParser::GREATER);
      setState(1087);
      match(MavkaParser::EQUAL);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1088);
      match(MavkaParser::POWER);
      setState(1089);
      match(MavkaParser::EQUAL);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1090);
      match(MavkaParser::AND);
      setState(1091);
      match(MavkaParser::AND);
      setState(1092);
      match(MavkaParser::EQUAL);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1093);
      match(MavkaParser::OR);
      setState(1094);
      match(MavkaParser::OR);
      setState(1095);
      match(MavkaParser::EQUAL);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(1096);
      match(MavkaParser::QUESTION);
      setState(1097);
      match(MavkaParser::QUESTION);
      setState(1098);
      match(MavkaParser::EQUAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Wait_assignContext ------------------------------------------------------------------

MavkaParser::Wait_assignContext::Wait_assignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Wait_assignContext::KW_WAIT() {
  return getToken(MavkaParser::KW_WAIT, 0);
}

MavkaParser::WsContext* MavkaParser::Wait_assignContext::ws() {
  return getRuleContext<MavkaParser::WsContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Wait_assignContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}


size_t MavkaParser::Wait_assignContext::getRuleIndex() const {
  return MavkaParser::RuleWait_assign;
}

void MavkaParser::Wait_assignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWait_assign(this);
}

void MavkaParser::Wait_assignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWait_assign(this);
}


std::any MavkaParser::Wait_assignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWait_assign(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Wait_assignContext* MavkaParser::wait_assign() {
  Wait_assignContext *_localctx = _tracker.createInstance<Wait_assignContext>(_ctx, getState());
  enterRule(_localctx, 114, MavkaParser::RuleWait_assign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1101);
    match(MavkaParser::KW_WAIT);
    setState(1102);
    ws();
    setState(1103);
    antlrcpp::downCast<Wait_assignContext *>(_localctx)->wa_assign = assign();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Identifiers_chainContext ------------------------------------------------------------------

MavkaParser::Identifiers_chainContext::Identifiers_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Identifiers_chainContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Identifiers_chainContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Identifiers_chainContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Identifiers_chainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::Identifiers_chainContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}


size_t MavkaParser::Identifiers_chainContext::getRuleIndex() const {
  return MavkaParser::RuleIdentifiers_chain;
}

void MavkaParser::Identifiers_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifiers_chain(this);
}

void MavkaParser::Identifiers_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifiers_chain(this);
}


std::any MavkaParser::Identifiers_chainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIdentifiers_chain(this);
  else
    return visitor->visitChildren(this);
}


MavkaParser::Identifiers_chainContext* MavkaParser::identifiers_chain() {
   return identifiers_chain(0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::identifiers_chain(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::Identifiers_chainContext *_localctx = _tracker.createInstance<Identifiers_chainContext>(_ctx, parentState);
  MavkaParser::Identifiers_chainContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 116;
  enterRecursionRule(_localctx, 116, MavkaParser::RuleIdentifiers_chain, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1106);
    antlrcpp::downCast<Identifiers_chainContext *>(_localctx)->ic_identifier = identifier();
    _ctx->stop = _input->LT(-1);
    setState(1116);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Identifiers_chainContext>(parentContext, parentState);
        _localctx->ic_left = previousContext;
        pushNewRecursionContext(_localctx, startState, RuleIdentifiers_chain);
        setState(1108);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1109);
        nls();
        setState(1110);
        match(MavkaParser::DOT);
        setState(1111);
        nls();
        setState(1112);
        antlrcpp::downCast<Identifiers_chainContext *>(_localctx)->ic_right = identifier(); 
      }
      setState(1118);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Super_identifiers_chainContext ------------------------------------------------------------------

MavkaParser::Super_identifiers_chainContext::Super_identifiers_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Super_identifiers_chainContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Super_identifiers_chainContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Super_identifiers_chainContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Super_identifiers_chainContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::ExprContext* MavkaParser::Super_identifiers_chainContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Super_identifiers_chainContext::getRuleIndex() const {
  return MavkaParser::RuleSuper_identifiers_chain;
}

void MavkaParser::Super_identifiers_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuper_identifiers_chain(this);
}

void MavkaParser::Super_identifiers_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuper_identifiers_chain(this);
}


std::any MavkaParser::Super_identifiers_chainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitSuper_identifiers_chain(this);
  else
    return visitor->visitChildren(this);
}


MavkaParser::Super_identifiers_chainContext* MavkaParser::super_identifiers_chain() {
   return super_identifiers_chain(0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::super_identifiers_chain(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::Super_identifiers_chainContext *_localctx = _tracker.createInstance<Super_identifiers_chainContext>(_ctx, parentState);
  MavkaParser::Super_identifiers_chainContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 118;
  enterRecursionRule(_localctx, 118, MavkaParser::RuleSuper_identifiers_chain, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1120);
    antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_identifier = identifier();
    _ctx->stop = _input->LT(-1);
    setState(1137);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1135);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Super_identifiers_chainContext>(parentContext, parentState);
          _localctx->sic_left = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleSuper_identifiers_chain);
          setState(1122);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1123);
          nls();
          setState(1124);
          match(MavkaParser::DOT);
          setState(1125);
          nls();
          setState(1126);
          antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_right = identifier();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Super_identifiers_chainContext>(parentContext, parentState);
          _localctx->sic_left = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleSuper_identifiers_chain);
          setState(1128);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1129);
          match(MavkaParser::BRACKET_OPEN);
          setState(1130);
          nls();
          setState(1131);
          antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_index = expr();
          setState(1132);
          nls();
          setState(1133);
          match(MavkaParser::BRACKET_CLOSE);
          break;
        }

        default:
          break;
        } 
      }
      setState(1139);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Type_valueContext ------------------------------------------------------------------

MavkaParser::Type_valueContext::Type_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Type_value_itemContext *> MavkaParser::Type_valueContext::type_value_item() {
  return getRuleContexts<MavkaParser::Type_value_itemContext>();
}

MavkaParser::Type_value_itemContext* MavkaParser::Type_valueContext::type_value_item(size_t i) {
  return getRuleContext<MavkaParser::Type_value_itemContext>(i);
}

std::vector<MavkaParser::WssContext *> MavkaParser::Type_valueContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Type_valueContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Type_valueContext::OR() {
  return getTokens(MavkaParser::OR);
}

tree::TerminalNode* MavkaParser::Type_valueContext::OR(size_t i) {
  return getToken(MavkaParser::OR, i);
}

std::vector<MavkaParser::WsContext *> MavkaParser::Type_valueContext::ws() {
  return getRuleContexts<MavkaParser::WsContext>();
}

MavkaParser::WsContext* MavkaParser::Type_valueContext::ws(size_t i) {
  return getRuleContext<MavkaParser::WsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Type_valueContext::KW_OR() {
  return getTokens(MavkaParser::KW_OR);
}

tree::TerminalNode* MavkaParser::Type_valueContext::KW_OR(size_t i) {
  return getToken(MavkaParser::KW_OR, i);
}


size_t MavkaParser::Type_valueContext::getRuleIndex() const {
  return MavkaParser::RuleType_value;
}

void MavkaParser::Type_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value(this);
}

void MavkaParser::Type_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value(this);
}


std::any MavkaParser::Type_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_valueContext* MavkaParser::type_value() {
  Type_valueContext *_localctx = _tracker.createInstance<Type_valueContext>(_ctx, getState());
  enterRule(_localctx, 120, MavkaParser::RuleType_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1140);
    type_value_item();
    setState(1155);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1149);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
        case 1: {
          setState(1141);
          wss();
          setState(1142);
          match(MavkaParser::OR);
          setState(1143);
          wss();
          break;
        }

        case 2: {
          setState(1145);
          ws();
          setState(1146);
          match(MavkaParser::KW_OR);
          setState(1147);
          ws();
          break;
        }

        default:
          break;
        }
        setState(1151);
        type_value_item(); 
      }
      setState(1157);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_itemContext ------------------------------------------------------------------

MavkaParser::Type_value_itemContext::Type_value_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Type_value_item_simpleContext* MavkaParser::Type_value_itemContext::type_value_item_simple() {
  return getRuleContext<MavkaParser::Type_value_item_simpleContext>(0);
}

MavkaParser::Type_value_item_arrayContext* MavkaParser::Type_value_itemContext::type_value_item_array() {
  return getRuleContext<MavkaParser::Type_value_item_arrayContext>(0);
}


size_t MavkaParser::Type_value_itemContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item;
}

void MavkaParser::Type_value_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item(this);
}

void MavkaParser::Type_value_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item(this);
}


std::any MavkaParser::Type_value_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_itemContext* MavkaParser::type_value_item() {
  Type_value_itemContext *_localctx = _tracker.createInstance<Type_value_itemContext>(_ctx, getState());
  enterRule(_localctx, 122, MavkaParser::RuleType_value_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1160);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(1158);
        type_value_item_simple();
        break;
      }

      case MavkaParser::BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1159);
        type_value_item_array();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_item_simpleContext ------------------------------------------------------------------

MavkaParser::Type_value_item_simpleContext::Type_value_item_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Identifiers_chainContext* MavkaParser::Type_value_item_simpleContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}

std::vector<MavkaParser::WssContext *> MavkaParser::Type_value_item_simpleContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Type_value_item_simpleContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

tree::TerminalNode* MavkaParser::Type_value_item_simpleContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

tree::TerminalNode* MavkaParser::Type_value_item_simpleContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

MavkaParser::Type_value_item_genericsContext* MavkaParser::Type_value_item_simpleContext::type_value_item_generics() {
  return getRuleContext<MavkaParser::Type_value_item_genericsContext>(0);
}


size_t MavkaParser::Type_value_item_simpleContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item_simple;
}

void MavkaParser::Type_value_item_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item_simple(this);
}

void MavkaParser::Type_value_item_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item_simple(this);
}


std::any MavkaParser::Type_value_item_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item_simple(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_item_simpleContext* MavkaParser::type_value_item_simple() {
  Type_value_item_simpleContext *_localctx = _tracker.createInstance<Type_value_item_simpleContext>(_ctx, getState());
  enterRule(_localctx, 124, MavkaParser::RuleType_value_item_simple);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1162);
    antlrcpp::downCast<Type_value_item_simpleContext *>(_localctx)->tvi_value = identifiers_chain(0);
    setState(1170);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
    case 1: {
      setState(1163);
      wss();
      setState(1164);
      match(MavkaParser::LESSER);
      setState(1165);
      wss();
      setState(1166);
      antlrcpp::downCast<Type_value_item_simpleContext *>(_localctx)->tvi_generics = type_value_item_generics();
      setState(1167);
      wss();
      setState(1168);
      match(MavkaParser::GREATER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_item_genericsContext ------------------------------------------------------------------

MavkaParser::Type_value_item_genericsContext::Type_value_item_genericsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Type_valueContext *> MavkaParser::Type_value_item_genericsContext::type_value() {
  return getRuleContexts<MavkaParser::Type_valueContext>();
}

MavkaParser::Type_valueContext* MavkaParser::Type_value_item_genericsContext::type_value(size_t i) {
  return getRuleContext<MavkaParser::Type_valueContext>(i);
}

std::vector<MavkaParser::WssContext *> MavkaParser::Type_value_item_genericsContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Type_value_item_genericsContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Type_value_item_genericsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Type_value_item_genericsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Type_value_item_genericsContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item_generics;
}

void MavkaParser::Type_value_item_genericsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item_generics(this);
}

void MavkaParser::Type_value_item_genericsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item_generics(this);
}


std::any MavkaParser::Type_value_item_genericsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item_generics(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_item_genericsContext* MavkaParser::type_value_item_generics() {
  Type_value_item_genericsContext *_localctx = _tracker.createInstance<Type_value_item_genericsContext>(_ctx, getState());
  enterRule(_localctx, 126, MavkaParser::RuleType_value_item_generics);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1172);
    type_value();
    setState(1180);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1173);
        wss();
        setState(1174);
        match(MavkaParser::COMA);
        setState(1175);
        wss();
        setState(1176);
        type_value(); 
      }
      setState(1182);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_item_arrayContext ------------------------------------------------------------------

MavkaParser::Type_value_item_arrayContext::Type_value_item_arrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Type_value_item_arrayContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Type_value_item_arrayContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::Type_value_itemContext* MavkaParser::Type_value_item_arrayContext::type_value_item() {
  return getRuleContext<MavkaParser::Type_value_itemContext>(0);
}


size_t MavkaParser::Type_value_item_arrayContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item_array;
}

void MavkaParser::Type_value_item_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item_array(this);
}

void MavkaParser::Type_value_item_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item_array(this);
}


std::any MavkaParser::Type_value_item_arrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item_array(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_item_arrayContext* MavkaParser::type_value_item_array() {
  Type_value_item_arrayContext *_localctx = _tracker.createInstance<Type_value_item_arrayContext>(_ctx, getState());
  enterRule(_localctx, 128, MavkaParser::RuleType_value_item_array);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1183);
    match(MavkaParser::BRACKET_OPEN);
    setState(1184);
    match(MavkaParser::BRACKET_CLOSE);
    setState(1185);
    type_value_item();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgsContext ------------------------------------------------------------------

MavkaParser::ArgsContext::ArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::ArgContext *> MavkaParser::ArgsContext::arg() {
  return getRuleContexts<MavkaParser::ArgContext>();
}

MavkaParser::ArgContext* MavkaParser::ArgsContext::arg(size_t i) {
  return getRuleContext<MavkaParser::ArgContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::ArgsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ArgsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::ArgsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::ArgsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::ArgsContext::getRuleIndex() const {
  return MavkaParser::RuleArgs;
}

void MavkaParser::ArgsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgs(this);
}

void MavkaParser::ArgsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgs(this);
}


std::any MavkaParser::ArgsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArgs(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ArgsContext* MavkaParser::args() {
  ArgsContext *_localctx = _tracker.createInstance<ArgsContext>(_ctx, getState());
  enterRule(_localctx, 130, MavkaParser::RuleArgs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1187);
    arg();
    setState(1195);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1188);
        nls();
        setState(1189);
        match(MavkaParser::COMA);
        setState(1190);
        nls();
        setState(1191);
        arg(); 
      }
      setState(1197);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgContext ------------------------------------------------------------------

MavkaParser::ArgContext::ArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ExprContext* MavkaParser::ArgContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::ArgContext::getRuleIndex() const {
  return MavkaParser::RuleArg;
}

void MavkaParser::ArgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArg(this);
}

void MavkaParser::ArgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArg(this);
}


std::any MavkaParser::ArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ArgContext* MavkaParser::arg() {
  ArgContext *_localctx = _tracker.createInstance<ArgContext>(_ctx, getState());
  enterRule(_localctx, 132, MavkaParser::RuleArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1198);
    antlrcpp::downCast<ArgContext *>(_localctx)->a_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argsContext ------------------------------------------------------------------

MavkaParser::Named_argsContext::Named_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Named_argContext *> MavkaParser::Named_argsContext::named_arg() {
  return getRuleContexts<MavkaParser::Named_argContext>();
}

MavkaParser::Named_argContext* MavkaParser::Named_argsContext::named_arg(size_t i) {
  return getRuleContext<MavkaParser::Named_argContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Named_argsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Named_argsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Named_argsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Named_argsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Named_argsContext::getRuleIndex() const {
  return MavkaParser::RuleNamed_args;
}

void MavkaParser::Named_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_args(this);
}

void MavkaParser::Named_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_args(this);
}


std::any MavkaParser::Named_argsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNamed_args(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Named_argsContext* MavkaParser::named_args() {
  Named_argsContext *_localctx = _tracker.createInstance<Named_argsContext>(_ctx, getState());
  enterRule(_localctx, 134, MavkaParser::RuleNamed_args);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1200);
    named_arg();
    setState(1208);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1201);
        nls();
        setState(1202);
        match(MavkaParser::COMA);
        setState(1203);
        nls();
        setState(1204);
        named_arg(); 
      }
      setState(1210);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argContext ------------------------------------------------------------------

MavkaParser::Named_argContext::Named_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::WssContext *> MavkaParser::Named_argContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::Named_argContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

tree::TerminalNode* MavkaParser::Named_argContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Named_argContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Named_argContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Named_argContext::getRuleIndex() const {
  return MavkaParser::RuleNamed_arg;
}

void MavkaParser::Named_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_arg(this);
}

void MavkaParser::Named_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_arg(this);
}


std::any MavkaParser::Named_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNamed_arg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Named_argContext* MavkaParser::named_arg() {
  Named_argContext *_localctx = _tracker.createInstance<Named_argContext>(_ctx, getState());
  enterRule(_localctx, 136, MavkaParser::RuleNamed_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1211);
    antlrcpp::downCast<Named_argContext *>(_localctx)->na_name = identifier();
    setState(1212);
    wss();
    setState(1213);
    match(MavkaParser::EQUAL);
    setState(1214);
    wss();
    setState(1215);
    antlrcpp::downCast<Named_argContext *>(_localctx)->na_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamsContext ------------------------------------------------------------------

MavkaParser::ParamsContext::ParamsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::ParamContext *> MavkaParser::ParamsContext::param() {
  return getRuleContexts<MavkaParser::ParamContext>();
}

MavkaParser::ParamContext* MavkaParser::ParamsContext::param(size_t i) {
  return getRuleContext<MavkaParser::ParamContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::ParamsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ParamsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::ParamsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::ParamsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}

std::vector<tree::TerminalNode *> MavkaParser::ParamsContext::DOT() {
  return getTokens(MavkaParser::DOT);
}

tree::TerminalNode* MavkaParser::ParamsContext::DOT(size_t i) {
  return getToken(MavkaParser::DOT, i);
}

MavkaParser::IdentifierContext* MavkaParser::ParamsContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::WsContext* MavkaParser::ParamsContext::ws() {
  return getRuleContext<MavkaParser::WsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::ParamsContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::ParamsContext::getRuleIndex() const {
  return MavkaParser::RuleParams;
}

void MavkaParser::ParamsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParams(this);
}

void MavkaParser::ParamsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParams(this);
}


std::any MavkaParser::ParamsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParams(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ParamsContext* MavkaParser::params() {
  ParamsContext *_localctx = _tracker.createInstance<ParamsContext>(_ctx, getState());
  enterRule(_localctx, 138, MavkaParser::RuleParams);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1251);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(1217);
        param();
        setState(1225);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1218);
            nls();
            setState(1219);
            match(MavkaParser::COMA);
            setState(1220);
            nls();
            setState(1221);
            param(); 
          }
          setState(1227);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
        }
        setState(1240);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
        case 1: {
          setState(1228);
          nls();
          setState(1229);
          match(MavkaParser::COMA);
          setState(1230);
          nls();
          setState(1231);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic = match(MavkaParser::DOT);
          setState(1232);
          match(MavkaParser::DOT);
          setState(1233);
          match(MavkaParser::DOT);
          setState(1234);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_name = identifier();
          setState(1238);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx)) {
          case 1: {
            setState(1235);
            ws();
            setState(1236);
            antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_type = type_value();
            break;
          }

          default:
            break;
          }
          break;
        }

        default:
          break;
        }
        break;
      }

      case MavkaParser::DOT: {
        enterOuterAlt(_localctx, 2);
        setState(1242);
        antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic = match(MavkaParser::DOT);
        setState(1243);
        match(MavkaParser::DOT);
        setState(1244);
        match(MavkaParser::DOT);
        setState(1245);
        antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_name = identifier();
        setState(1249);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
        case 1: {
          setState(1246);
          ws();
          setState(1247);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_type = type_value();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamContext ------------------------------------------------------------------

MavkaParser::ParamContext::ParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::ParamContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::WsContext* MavkaParser::ParamContext::ws() {
  return getRuleContext<MavkaParser::WsContext>(0);
}

std::vector<MavkaParser::WssContext *> MavkaParser::ParamContext::wss() {
  return getRuleContexts<MavkaParser::WssContext>();
}

MavkaParser::WssContext* MavkaParser::ParamContext::wss(size_t i) {
  return getRuleContext<MavkaParser::WssContext>(i);
}

tree::TerminalNode* MavkaParser::ParamContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

MavkaParser::Type_valueContext* MavkaParser::ParamContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::Param_valueContext* MavkaParser::ParamContext::param_value() {
  return getRuleContext<MavkaParser::Param_valueContext>(0);
}


size_t MavkaParser::ParamContext::getRuleIndex() const {
  return MavkaParser::RuleParam;
}

void MavkaParser::ParamContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam(this);
}

void MavkaParser::ParamContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam(this);
}


std::any MavkaParser::ParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ParamContext* MavkaParser::param() {
  ParamContext *_localctx = _tracker.createInstance<ParamContext>(_ctx, getState());
  enterRule(_localctx, 140, MavkaParser::RuleParam);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1253);
    antlrcpp::downCast<ParamContext *>(_localctx)->p_name = identifier();
    setState(1257);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx)) {
    case 1: {
      setState(1254);
      ws();
      setState(1255);
      antlrcpp::downCast<ParamContext *>(_localctx)->p_type = type_value();
      break;
    }

    default:
      break;
    }
    setState(1264);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
    case 1: {
      setState(1259);
      wss();
      setState(1260);
      match(MavkaParser::EQUAL);
      setState(1261);
      wss();
      setState(1262);
      antlrcpp::downCast<ParamContext *>(_localctx)->p_value = param_value();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_valueContext ------------------------------------------------------------------

MavkaParser::Param_valueContext::Param_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::Param_valueContext::getRuleIndex() const {
  return MavkaParser::RuleParam_value;
}

void MavkaParser::Param_valueContext::copyFrom(Param_valueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Param_value_empty_listContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Param_value_empty_listContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Param_value_empty_listContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::Param_value_empty_listContext::Param_value_empty_listContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_empty_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_empty_list(this);
}
void MavkaParser::Param_value_empty_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_empty_list(this);
}

std::any MavkaParser::Param_value_empty_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_empty_list(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_identifierContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::Param_value_identifierContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Param_value_identifierContext::Param_value_identifierContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_identifier(this);
}
void MavkaParser::Param_value_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_identifier(this);
}

std::any MavkaParser::Param_value_identifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_identifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_empty_dictionaryContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Param_value_empty_dictionaryContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Param_value_empty_dictionaryContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::Param_value_empty_dictionaryContext::Param_value_empty_dictionaryContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_empty_dictionaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_empty_dictionary(this);
}
void MavkaParser::Param_value_empty_dictionaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_empty_dictionary(this);
}

std::any MavkaParser::Param_value_empty_dictionaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_empty_dictionary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_numberContext ------------------------------------------------------------------

MavkaParser::Number_tokenContext* MavkaParser::Param_value_numberContext::number_token() {
  return getRuleContext<MavkaParser::Number_tokenContext>(0);
}

MavkaParser::Param_value_numberContext::Param_value_numberContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_numberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_number(this);
}
void MavkaParser::Param_value_numberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_number(this);
}

std::any MavkaParser::Param_value_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_number(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_stringContext ------------------------------------------------------------------

MavkaParser::StringContext* MavkaParser::Param_value_stringContext::string() {
  return getRuleContext<MavkaParser::StringContext>(0);
}

MavkaParser::Param_value_stringContext::Param_value_stringContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_string(this);
}
void MavkaParser::Param_value_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_string(this);
}

std::any MavkaParser::Param_value_stringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_string(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::Param_valueContext* MavkaParser::param_value() {
  Param_valueContext *_localctx = _tracker.createInstance<Param_valueContext>(_ctx, getState());
  enterRule(_localctx, 142, MavkaParser::RuleParam_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1273);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::INTEGER:
      case MavkaParser::FLOAT:
      case MavkaParser::HEX:
      case MavkaParser::BIN: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_numberContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1266);
        number_token();
        break;
      }

      case MavkaParser::STRING_MULTILINE:
      case MavkaParser::STRING: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_stringContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1267);
        string();
        break;
      }

      case MavkaParser::ID: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_identifierContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(1268);
        identifier();
        break;
      }

      case MavkaParser::PAREN_OPEN: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_empty_dictionaryContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(1269);
        match(MavkaParser::PAREN_OPEN);
        setState(1270);
        match(MavkaParser::PAREN_CLOSE);
        break;
      }

      case MavkaParser::BRACKET_OPEN: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_empty_listContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(1271);
        match(MavkaParser::BRACKET_OPEN);
        setState(1272);
        match(MavkaParser::BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BodyContext ------------------------------------------------------------------

MavkaParser::BodyContext::BodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Body_element_or_returnContext *> MavkaParser::BodyContext::body_element_or_return() {
  return getRuleContexts<MavkaParser::Body_element_or_returnContext>();
}

MavkaParser::Body_element_or_returnContext* MavkaParser::BodyContext::body_element_or_return(size_t i) {
  return getRuleContext<MavkaParser::Body_element_or_returnContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::BodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::BodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::BodyContext::getRuleIndex() const {
  return MavkaParser::RuleBody;
}

void MavkaParser::BodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody(this);
}

void MavkaParser::BodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody(this);
}


std::any MavkaParser::BodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::BodyContext* MavkaParser::body() {
  BodyContext *_localctx = _tracker.createInstance<BodyContext>(_ctx, getState());
  enterRule(_localctx, 144, MavkaParser::RuleBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1275);
    body_element_or_return();
    setState(1281);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1276);
        nl();
        setState(1277);
        body_element_or_return(); 
      }
      setState(1283);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_element_or_returnContext ------------------------------------------------------------------

MavkaParser::Body_element_or_returnContext::Body_element_or_returnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Body_elementContext* MavkaParser::Body_element_or_returnContext::body_element() {
  return getRuleContext<MavkaParser::Body_elementContext>(0);
}

MavkaParser::Return_body_lineContext* MavkaParser::Body_element_or_returnContext::return_body_line() {
  return getRuleContext<MavkaParser::Return_body_lineContext>(0);
}


size_t MavkaParser::Body_element_or_returnContext::getRuleIndex() const {
  return MavkaParser::RuleBody_element_or_return;
}

void MavkaParser::Body_element_or_returnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_element_or_return(this);
}

void MavkaParser::Body_element_or_returnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_element_or_return(this);
}


std::any MavkaParser::Body_element_or_returnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody_element_or_return(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Body_element_or_returnContext* MavkaParser::body_element_or_return() {
  Body_element_or_returnContext *_localctx = _tracker.createInstance<Body_element_or_returnContext>(_ctx, getState());
  enterRule(_localctx, 146, MavkaParser::RuleBody_element_or_return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1286);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::NL:
      case MavkaParser::WS:
      case MavkaParser::KW_DIIA:
      case MavkaParser::KW_FOR:
      case MavkaParser::KW_IF:
      case MavkaParser::KW_WAIT:
      case MavkaParser::KW_ASYNC:
      case MavkaParser::KW_SUBJECT:
      case MavkaParser::KW_TRY:
      case MavkaParser::KW_THROW:
      case MavkaParser::KW_WHILE:
      case MavkaParser::KW_PARENT:
      case MavkaParser::PLUS:
      case MavkaParser::MINUS:
      case MavkaParser::PAREN_OPEN:
      case MavkaParser::BRACKET_OPEN:
      case MavkaParser::TILDA:
      case MavkaParser::EXCLAMATION:
      case MavkaParser::INTEGER:
      case MavkaParser::FLOAT:
      case MavkaParser::HEX:
      case MavkaParser::BIN:
      case MavkaParser::ID:
      case MavkaParser::STRING_MULTILINE:
      case MavkaParser::STRING: {
        enterOuterAlt(_localctx, 1);
        setState(1284);
        body_element();
        break;
      }

      case MavkaParser::KW_RETURN: {
        enterOuterAlt(_localctx, 2);
        setState(1285);
        return_body_line();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_elementContext ------------------------------------------------------------------

MavkaParser::Body_elementContext::Body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IfContext* MavkaParser::Body_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Body_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Body_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Body_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Body_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Body_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Body_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Body_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Body_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleBody_element;
}

void MavkaParser::Body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_element(this);
}

void MavkaParser::Body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_element(this);
}


std::any MavkaParser::Body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Body_elementContext* MavkaParser::body_element() {
  Body_elementContext *_localctx = _tracker.createInstance<Body_elementContext>(_ctx, getState());
  enterRule(_localctx, 148, MavkaParser::RuleBody_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1297);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1288);
      if_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1289);
      each();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1290);
      while_();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1291);
      try_();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1292);
      expr();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1293);
      throw_();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1294);
      wait_assign();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1295);
      assign();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1296);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_body_lineContext ------------------------------------------------------------------

MavkaParser::Return_body_lineContext::Return_body_lineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Return_body_lineContext::KW_RETURN() {
  return getToken(MavkaParser::KW_RETURN, 0);
}

MavkaParser::WsContext* MavkaParser::Return_body_lineContext::ws() {
  return getRuleContext<MavkaParser::WsContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Return_body_lineContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Return_body_lineContext::getRuleIndex() const {
  return MavkaParser::RuleReturn_body_line;
}

void MavkaParser::Return_body_lineContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_body_line(this);
}

void MavkaParser::Return_body_lineContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_body_line(this);
}


std::any MavkaParser::Return_body_lineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitReturn_body_line(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Return_body_lineContext* MavkaParser::return_body_line() {
  Return_body_lineContext *_localctx = _tracker.createInstance<Return_body_lineContext>(_ctx, getState());
  enterRule(_localctx, 150, MavkaParser::RuleReturn_body_line);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1299);
    match(MavkaParser::KW_RETURN);
    setState(1300);
    ws();
    setState(1301);
    antlrcpp::downCast<Return_body_lineContext *>(_localctx)->rbl_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithmetic_op_mulContext ------------------------------------------------------------------

MavkaParser::Arithmetic_op_mulContext::Arithmetic_op_mulContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Arithmetic_op_mulContext::MULTIPLY() {
  return getTokens(MavkaParser::MULTIPLY);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::MULTIPLY(size_t i) {
  return getToken(MavkaParser::MULTIPLY, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Arithmetic_op_mulContext::DIVIDE() {
  return getTokens(MavkaParser::DIVIDE);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::DIVIDE(size_t i) {
  return getToken(MavkaParser::DIVIDE, i);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::MOD() {
  return getToken(MavkaParser::MOD, 0);
}


size_t MavkaParser::Arithmetic_op_mulContext::getRuleIndex() const {
  return MavkaParser::RuleArithmetic_op_mul;
}

void MavkaParser::Arithmetic_op_mulContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_op_mul(this);
}

void MavkaParser::Arithmetic_op_mulContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_op_mul(this);
}


std::any MavkaParser::Arithmetic_op_mulContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_op_mul(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Arithmetic_op_mulContext* MavkaParser::arithmetic_op_mul() {
  Arithmetic_op_mulContext *_localctx = _tracker.createInstance<Arithmetic_op_mulContext>(_ctx, getState());
  enterRule(_localctx, 152, MavkaParser::RuleArithmetic_op_mul);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1310);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1303);
      match(MavkaParser::MULTIPLY);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1304);
      match(MavkaParser::DIVIDE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1305);
      match(MavkaParser::MOD);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1306);
      match(MavkaParser::DIVIDE);
      setState(1307);
      match(MavkaParser::DIVIDE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1308);
      match(MavkaParser::MULTIPLY);
      setState(1309);
      match(MavkaParser::MULTIPLY);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithmetic_op_addContext ------------------------------------------------------------------

MavkaParser::Arithmetic_op_addContext::Arithmetic_op_addContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Arithmetic_op_addContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_addContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}


size_t MavkaParser::Arithmetic_op_addContext::getRuleIndex() const {
  return MavkaParser::RuleArithmetic_op_add;
}

void MavkaParser::Arithmetic_op_addContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_op_add(this);
}

void MavkaParser::Arithmetic_op_addContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_op_add(this);
}


std::any MavkaParser::Arithmetic_op_addContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_op_add(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Arithmetic_op_addContext* MavkaParser::arithmetic_op_add() {
  Arithmetic_op_addContext *_localctx = _tracker.createInstance<Arithmetic_op_addContext>(_ctx, getState());
  enterRule(_localctx, 154, MavkaParser::RuleArithmetic_op_add);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1312);
    _la = _input->LA(1);
    if (!(_la == MavkaParser::PLUS

    || _la == MavkaParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bitwise_opContext ------------------------------------------------------------------

MavkaParser::Bitwise_opContext::Bitwise_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::POWER() {
  return getToken(MavkaParser::POWER, 0);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::OR() {
  return getToken(MavkaParser::OR, 0);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::AND() {
  return getToken(MavkaParser::AND, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Bitwise_opContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Bitwise_opContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}


size_t MavkaParser::Bitwise_opContext::getRuleIndex() const {
  return MavkaParser::RuleBitwise_op;
}

void MavkaParser::Bitwise_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise_op(this);
}

void MavkaParser::Bitwise_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise_op(this);
}


std::any MavkaParser::Bitwise_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Bitwise_opContext* MavkaParser::bitwise_op() {
  Bitwise_opContext *_localctx = _tracker.createInstance<Bitwise_opContext>(_ctx, getState());
  enterRule(_localctx, 156, MavkaParser::RuleBitwise_op);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1321);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::POWER: {
        enterOuterAlt(_localctx, 1);
        setState(1314);
        match(MavkaParser::POWER);
        break;
      }

      case MavkaParser::OR: {
        enterOuterAlt(_localctx, 2);
        setState(1315);
        match(MavkaParser::OR);
        break;
      }

      case MavkaParser::AND: {
        enterOuterAlt(_localctx, 3);
        setState(1316);
        match(MavkaParser::AND);
        break;
      }

      case MavkaParser::LESSER: {
        enterOuterAlt(_localctx, 4);
        setState(1317);
        match(MavkaParser::LESSER);
        setState(1318);
        match(MavkaParser::LESSER);
        break;
      }

      case MavkaParser::GREATER: {
        enterOuterAlt(_localctx, 5);
        setState(1319);
        match(MavkaParser::GREATER);
        setState(1320);
        match(MavkaParser::GREATER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Test_opContext ------------------------------------------------------------------

MavkaParser::Test_opContext::Test_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Test_opContext::KW_AND() {
  return getToken(MavkaParser::KW_AND, 0);
}

tree::TerminalNode* MavkaParser::Test_opContext::KW_OR() {
  return getToken(MavkaParser::KW_OR, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Test_opContext::OR() {
  return getTokens(MavkaParser::OR);
}

tree::TerminalNode* MavkaParser::Test_opContext::OR(size_t i) {
  return getToken(MavkaParser::OR, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Test_opContext::AND() {
  return getTokens(MavkaParser::AND);
}

tree::TerminalNode* MavkaParser::Test_opContext::AND(size_t i) {
  return getToken(MavkaParser::AND, i);
}


size_t MavkaParser::Test_opContext::getRuleIndex() const {
  return MavkaParser::RuleTest_op;
}

void MavkaParser::Test_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTest_op(this);
}

void MavkaParser::Test_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTest_op(this);
}


std::any MavkaParser::Test_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTest_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Test_opContext* MavkaParser::test_op() {
  Test_opContext *_localctx = _tracker.createInstance<Test_opContext>(_ctx, getState());
  enterRule(_localctx, 158, MavkaParser::RuleTest_op);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1329);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::KW_AND: {
        enterOuterAlt(_localctx, 1);
        setState(1323);
        match(MavkaParser::KW_AND);
        break;
      }

      case MavkaParser::KW_OR: {
        enterOuterAlt(_localctx, 2);
        setState(1324);
        match(MavkaParser::KW_OR);
        break;
      }

      case MavkaParser::OR: {
        enterOuterAlt(_localctx, 3);
        setState(1325);
        match(MavkaParser::OR);
        setState(1326);
        match(MavkaParser::OR);
        break;
      }

      case MavkaParser::AND: {
        enterOuterAlt(_localctx, 4);
        setState(1327);
        match(MavkaParser::AND);
        setState(1328);
        match(MavkaParser::AND);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comparison_opContext ------------------------------------------------------------------

MavkaParser::Comparison_opContext::Comparison_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Comparison_opContext::EQUAL() {
  return getTokens(MavkaParser::EQUAL);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::EQUAL(size_t i) {
  return getToken(MavkaParser::EQUAL, i);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::EXCLAMATION() {
  return getToken(MavkaParser::EXCLAMATION, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_IS() {
  return getToken(MavkaParser::KW_IS, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_NOT() {
  return getToken(MavkaParser::KW_NOT, 0);
}

MavkaParser::WsContext* MavkaParser::Comparison_opContext::ws() {
  return getRuleContext<MavkaParser::WsContext>(0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_EQ_WORD() {
  return getToken(MavkaParser::KW_EQ_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_GR_WORD() {
  return getToken(MavkaParser::KW_GR_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_SM_WORD() {
  return getToken(MavkaParser::KW_SM_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_HAS_IS_WORD() {
  return getToken(MavkaParser::KW_HAS_IS_WORD, 0);
}


size_t MavkaParser::Comparison_opContext::getRuleIndex() const {
  return MavkaParser::RuleComparison_op;
}

void MavkaParser::Comparison_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison_op(this);
}

void MavkaParser::Comparison_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison_op(this);
}


std::any MavkaParser::Comparison_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComparison_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Comparison_opContext* MavkaParser::comparison_op() {
  Comparison_opContext *_localctx = _tracker.createInstance<Comparison_opContext>(_ctx, getState());
  enterRule(_localctx, 160, MavkaParser::RuleComparison_op);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1366);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1331);
      match(MavkaParser::EQUAL);
      setState(1332);
      match(MavkaParser::EQUAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1333);
      match(MavkaParser::EXCLAMATION);
      setState(1334);
      match(MavkaParser::EQUAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1335);
      match(MavkaParser::GREATER);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1336);
      match(MavkaParser::LESSER);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1337);
      match(MavkaParser::GREATER);
      setState(1338);
      match(MavkaParser::EQUAL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1339);
      match(MavkaParser::LESSER);
      setState(1340);
      match(MavkaParser::EQUAL);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1341);
      match(MavkaParser::KW_IS);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1342);
      match(MavkaParser::KW_NOT);
      setState(1343);
      ws();
      setState(1344);
      match(MavkaParser::KW_IS);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1346);
      match(MavkaParser::KW_EQ_WORD);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1347);
      match(MavkaParser::KW_NOT);
      setState(1348);
      ws();
      setState(1349);
      match(MavkaParser::KW_EQ_WORD);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1351);
      match(MavkaParser::KW_GR_WORD);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1352);
      match(MavkaParser::KW_NOT);
      setState(1353);
      ws();
      setState(1354);
      match(MavkaParser::KW_GR_WORD);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1356);
      match(MavkaParser::KW_SM_WORD);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1357);
      match(MavkaParser::KW_NOT);
      setState(1358);
      ws();
      setState(1359);
      match(MavkaParser::KW_SM_WORD);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1361);
      match(MavkaParser::KW_HAS_IS_WORD);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1362);
      match(MavkaParser::KW_NOT);
      setState(1363);
      ws();
      setState(1364);
      match(MavkaParser::KW_HAS_IS_WORD);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comp_inst_block_programContext ------------------------------------------------------------------

MavkaParser::Comp_inst_block_programContext::Comp_inst_block_programContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Comp_inst_block_programContext::COMP_INST_START() {
  return getToken(MavkaParser::COMP_INST_START, 0);
}

MavkaParser::WssContext* MavkaParser::Comp_inst_block_programContext::wss() {
  return getRuleContext<MavkaParser::WssContext>(0);
}

MavkaParser::WsContext* MavkaParser::Comp_inst_block_programContext::ws() {
  return getRuleContext<MavkaParser::WsContext>(0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Comp_inst_block_programContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Comp_inst_block_programContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::Comp_inst_block_programContext::COMP_INST_END() {
  return getToken(MavkaParser::COMP_INST_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Comp_inst_block_programContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Comp_inst_block_programContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

MavkaParser::ProgramContext* MavkaParser::Comp_inst_block_programContext::program() {
  return getRuleContext<MavkaParser::ProgramContext>(0);
}


size_t MavkaParser::Comp_inst_block_programContext::getRuleIndex() const {
  return MavkaParser::RuleComp_inst_block_program;
}

void MavkaParser::Comp_inst_block_programContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComp_inst_block_program(this);
}

void MavkaParser::Comp_inst_block_programContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComp_inst_block_program(this);
}


std::any MavkaParser::Comp_inst_block_programContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComp_inst_block_program(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Comp_inst_block_programContext* MavkaParser::comp_inst_block_program() {
  Comp_inst_block_programContext *_localctx = _tracker.createInstance<Comp_inst_block_programContext>(_ctx, getState());
  enterRule(_localctx, 162, MavkaParser::RuleComp_inst_block_program);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1368);
    match(MavkaParser::COMP_INST_START);
    setState(1369);
    wss();
    setState(1370);
    antlrcpp::downCast<Comp_inst_block_programContext *>(_localctx)->cibp_name = identifier();
    setState(1371);
    ws();
    setState(1372);
    antlrcpp::downCast<Comp_inst_block_programContext *>(_localctx)->cibp_value = match(MavkaParser::STRING);
    setState(1373);
    nl();
    setState(1374);
    antlrcpp::downCast<Comp_inst_block_programContext *>(_localctx)->cibp_program = program();
    setState(1375);
    nl();
    setState(1376);
    match(MavkaParser::COMP_INST_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comp_inst_assignContext ------------------------------------------------------------------

MavkaParser::Comp_inst_assignContext::Comp_inst_assignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Comp_inst_assignContext::COMP_INST_ASSIGN() {
  return getToken(MavkaParser::COMP_INST_ASSIGN, 0);
}

MavkaParser::WssContext* MavkaParser::Comp_inst_assignContext::wss() {
  return getRuleContext<MavkaParser::WssContext>(0);
}

MavkaParser::WsContext* MavkaParser::Comp_inst_assignContext::ws() {
  return getRuleContext<MavkaParser::WsContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::Comp_inst_assignContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Comp_inst_assignContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}


size_t MavkaParser::Comp_inst_assignContext::getRuleIndex() const {
  return MavkaParser::RuleComp_inst_assign;
}

void MavkaParser::Comp_inst_assignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComp_inst_assign(this);
}

void MavkaParser::Comp_inst_assignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComp_inst_assign(this);
}


std::any MavkaParser::Comp_inst_assignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComp_inst_assign(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Comp_inst_assignContext* MavkaParser::comp_inst_assign() {
  Comp_inst_assignContext *_localctx = _tracker.createInstance<Comp_inst_assignContext>(_ctx, getState());
  enterRule(_localctx, 164, MavkaParser::RuleComp_inst_assign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1378);
    match(MavkaParser::COMP_INST_ASSIGN);
    setState(1379);
    wss();
    setState(1380);
    antlrcpp::downCast<Comp_inst_assignContext *>(_localctx)->cia_name = identifier();
    setState(1381);
    ws();
    setState(1382);
    antlrcpp::downCast<Comp_inst_assignContext *>(_localctx)->cia_value = match(MavkaParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool MavkaParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 43: return atomSempred(antlrcpp::downCast<AtomContext *>(context), predicateIndex);
    case 44: return valueSempred(antlrcpp::downCast<ValueContext *>(context), predicateIndex);
    case 58: return identifiers_chainSempred(antlrcpp::downCast<Identifiers_chainContext *>(context), predicateIndex);
    case 59: return super_identifiers_chainSempred(antlrcpp::downCast<Super_identifiers_chainContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool MavkaParser::atomSempred(AtomContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 14);
    case 1: return precpred(_ctx, 13);
    case 2: return precpred(_ctx, 12);
    case 3: return precpred(_ctx, 5);
    case 4: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

bool MavkaParser::valueSempred(ValueContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 5: return precpred(_ctx, 5);
    case 6: return precpred(_ctx, 4);
    case 7: return precpred(_ctx, 3);
    case 8: return precpred(_ctx, 2);
    case 9: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool MavkaParser::identifiers_chainSempred(Identifiers_chainContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool MavkaParser::super_identifiers_chainSempred(Super_identifiers_chainContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 2);
    case 12: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void MavkaParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  mavkaparserParserInitialize();
#else
  ::antlr4::internal::call_once(mavkaparserParserOnceFlag, mavkaparserParserInitialize);
#endif
}
