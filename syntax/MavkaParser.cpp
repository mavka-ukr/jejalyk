
// Generated from MavkaParser.g4 by ANTLR 4.13.0


#include "MavkaParserListener.h"
#include "MavkaParserVisitor.h"

#include "MavkaParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct MavkaParserStaticData final {
  MavkaParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MavkaParserStaticData(const MavkaParserStaticData&) = delete;
  MavkaParserStaticData(MavkaParserStaticData&&) = delete;
  MavkaParserStaticData& operator=(const MavkaParserStaticData&) = delete;
  MavkaParserStaticData& operator=(MavkaParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag mavkaparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
MavkaParserStaticData *mavkaparserParserStaticData = nullptr;

void mavkaparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (mavkaparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(mavkaparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MavkaParserStaticData>(
    std::vector<std::string>{
      "nl", "nls", "number_token", "string", "identifier", "file", "program", 
      "program_element", "module", "module_body", "module_body_element", 
      "structure", "structure_elements", "structure_element", "structure_param", 
      "generics", "mockup", "mockup_module", "mockup_module_body", "mockup_structure", 
      "mockup_structure_body", "mockup_structure_body_element", "mockup_diia", 
      "mockup_subject", "diia", "if", "each", "fromto", "fromto_simple", 
      "fromto_complex", "fromto_value", "fromto_middle_symbol", "fromto_to_symbol", 
      "while", "try", "eval", "take", "take_module_elements", "take_module_element", 
      "give", "give_element", "mrm", "mrm_element", "mrm_element_closed", 
      "mrm_args", "mrm_arg", "mrm_content", "mrm_chardata", "mrm_diia", 
      "atom", "value", "call_generics", "array_elements", "array_element", 
      "dictionary_args", "dictionary_arg", "expr", "throw", "assign", "assign_simple", 
      "assign_by_identifier", "assign_by_element", "assign_symbol", "wait_assign", 
      "identifiers_chain", "super_identifiers_chain", "type_value", "type_value_item", 
      "type_value_item_simple", "type_value_item_generics", "type_value_item_array", 
      "args", "arg", "named_args", "named_arg", "params", "param", "param_value", 
      "body", "body_element_or_return", "body_element", "return_body_line", 
      "arithmetic_op_mul", "arithmetic_op_add", "bitwise_op", "test_op", 
      "comparison_op", "comp_inst_block_program", "comp_inst_assign"
    },
    std::vector<std::string>{
      "", "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", "'\\u0434\\u0456\\u044F'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'\\u043F\\u0435\\u0440\\u0435\\u0431\\u0440\\u0430\\u0442\\u0438'", 
      "'\\u044F\\u043A\\u0449\\u043E'", "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", 
      "'\\u0432\\u0437\\u044F\\u0442\\u0438'", "'\\u0434\\u0430\\u0442\\u0438'", 
      "'\\u044F\\u043A'", "'\\u0442\\u0430'", "'\\u0454'", "'\\u0441\\u043F\\u0435\\u0446'", 
      "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", "'\\u0442\\u0440\\u0438\\u0432\\u0430\\u043B\\u0430'", 
      "'\\u0441\\u0443\\u0431\\u02BC\\u0454\\u043A\\u0442'", "'\\u0456'", 
      "'\\u0430\\u0431\\u043E'", "'\\u0441\\u043F\\u0440\\u043E\\u0431\\u0443\\u0432\\u0430\\u0442\\u0438'", 
      "'\\u0437\\u043B\\u043E\\u0432\\u0438\\u0442\\u0438'", "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", 
      "'\\u0432\\u043F\\u0430\\u0441\\u0442\\u0438'", "'\\u043F\\u043E\\u043A\\u0438'", 
      "'\\u043C\\u043E\\u0434\\u0443\\u043B\\u044C'", "'\\u0440\\u0456\\u0432\\u043D\\u043E'", 
      "'\\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", "'\\u043C\\u0435\\u043D\\u0448\\u0435'", 
      "'\\u043C\\u0456\\u0441\\u0442\\u0438\\u0442\\u044C'", "'\\u043C\\u0430\\u043A\\u0435\\u0442'", 
      "'\\u043D\\u0435'", "'js'", "'\\u043F\\u0440\\u0435\\u0434\\u043E\\u043A'", 
      "'\\u0446\\u0435'", "'='", "'>'", "'<'", "'.'", "'+'", "'-'", "'*'", 
      "'/'", "'%'", "'^'", "'&'", "'|'", "'('", "')'", "'['", "']'", "'\\u003F'", 
      "':'", "'~'", "'''", "'\"'", "'!'", "','"
    },
    std::vector<std::string>{
      "", "KW_END", "KW_DIIA", "KW_STRUCTURE", "KW_FOR", "KW_IF", "KW_WAIT", 
      "KW_TAKE", "KW_GIVE", "KW_AS", "KW_TA", "KW_IS", "KW_SPEC", "KW_RETURN", 
      "KW_ASYNC", "KW_SUBJECT", "KW_AND", "KW_OR", "KW_TRY", "KW_CATCH", 
      "KW_ELSE", "KW_THROW", "KW_WHILE", "KW_MODULE", "KW_EQ_WORD", "KW_GR_WORD", 
      "KW_SM_WORD", "KW_HAS_IS_WORD", "KW_MOCKUP", "KW_NOT", "KW_JS", "KW_PARENT", 
      "KW_TSE", "EQUAL", "GREATER", "LESSER", "DOT", "PLUS", "MINUS", "MULTIPLY", 
      "DIVIDE", "MOD", "POWER", "AND", "OR", "PAREN_OPEN", "PAREN_CLOSE", 
      "BRACKET_OPEN", "BRACKET_CLOSE", "QUESTION", "COLON", "TILDA", "QUOTE", 
      "DOUBLE_QUOTE", "EXCLAMATION", "COMA", "INTEGER", "FLOAT", "HEX", 
      "BIN", "NUMBER", "ID", "KWID", "STRING_MULTILINE", "STRING", "COMP_INST_START", 
      "COMP_INST_END", "COMP_INST_ASSIGN", "COMMENT", "LINE_COMMENT", "MRM_DIIA", 
      "NL", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,72,1276,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
  	63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
  	70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
  	77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
  	84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,1,0,4,0,180,8,0,11,0,12,0,
  	181,1,1,5,1,185,8,1,10,1,12,1,188,9,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,
  	1,5,1,6,1,6,1,6,1,6,5,6,203,8,6,10,6,12,6,206,9,6,1,7,1,7,1,7,1,7,1,7,
  	1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,226,8,7,1,8,1,
  	8,3,8,230,8,8,1,8,1,8,1,8,1,8,3,8,236,8,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,
  	244,8,9,10,9,12,9,247,9,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,10,3,10,264,8,10,1,11,1,11,1,11,1,11,1,11,
  	1,11,3,11,272,8,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,280,8,11,3,11,282,
  	8,11,1,11,1,11,1,11,1,11,3,11,288,8,11,1,11,1,11,1,11,1,12,1,12,1,12,
  	1,12,5,12,297,8,12,10,12,12,12,300,9,12,1,13,1,13,1,14,3,14,305,8,14,
  	1,14,1,14,3,14,309,8,14,1,14,1,14,3,14,313,8,14,1,15,1,15,1,15,5,15,318,
  	8,15,10,15,12,15,321,9,15,1,16,1,16,1,16,1,16,3,16,327,8,16,1,17,1,17,
  	1,17,1,17,1,17,1,17,1,17,3,17,336,8,17,1,17,1,17,1,18,1,18,1,18,1,18,
  	5,18,344,8,18,10,18,12,18,347,9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	3,19,356,8,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,364,8,19,3,19,366,8,
  	19,1,19,1,19,1,19,1,19,3,19,372,8,19,1,19,1,19,1,20,1,20,1,20,1,20,5,
  	20,380,8,20,10,20,12,20,383,9,20,1,21,1,21,1,22,1,22,3,22,389,8,22,1,
  	22,3,22,392,8,22,1,22,1,22,1,22,1,22,3,22,398,8,22,1,22,1,22,1,22,1,22,
  	1,22,3,22,405,8,22,1,22,1,22,1,22,3,22,410,8,22,1,22,1,22,1,22,3,22,415,
  	8,22,1,23,1,23,1,23,1,23,1,23,1,24,3,24,423,8,24,1,24,3,24,426,8,24,1,
  	24,1,24,1,24,1,24,3,24,432,8,24,1,24,1,24,1,24,1,24,1,24,3,24,439,8,24,
  	1,24,1,24,1,24,3,24,444,8,24,1,24,1,24,1,24,3,24,449,8,24,1,24,1,24,1,
  	24,1,24,3,24,455,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,465,
  	8,25,1,25,1,25,1,25,1,25,1,25,3,25,472,8,25,1,25,1,25,1,25,3,25,477,8,
  	25,1,26,1,26,1,26,3,26,482,8,26,1,26,1,26,1,26,1,26,3,26,488,8,26,1,26,
  	3,26,491,8,26,1,26,1,26,1,26,1,26,3,26,497,8,26,1,26,1,26,1,27,1,27,3,
  	27,503,8,27,1,28,1,28,1,28,1,28,3,28,509,8,28,1,28,1,28,1,29,1,29,1,29,
  	1,29,3,29,517,8,29,1,29,1,29,1,29,1,29,3,29,523,8,29,1,29,1,29,1,30,1,
  	30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,535,8,30,1,31,1,31,1,31,1,31,1,
  	31,1,31,1,31,1,31,1,31,3,31,546,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,3,32,558,8,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,566,
  	8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,3,34,575,8,34,1,34,1,34,3,34,
  	579,8,34,1,34,1,34,1,34,1,34,3,34,585,8,34,1,34,1,34,1,35,1,35,1,35,1,
  	36,1,36,3,36,594,8,36,1,36,1,36,1,36,1,36,3,36,600,8,36,1,36,1,36,1,36,
  	1,36,1,36,1,36,3,36,608,8,36,3,36,610,8,36,1,37,1,37,1,37,1,37,5,37,616,
  	8,37,10,37,12,37,619,9,37,1,37,1,37,1,38,1,38,1,38,3,38,626,8,38,1,39,
  	1,39,1,39,1,39,1,39,1,39,1,39,5,39,635,8,39,10,39,12,39,638,9,39,1,40,
  	1,40,1,40,3,40,643,8,40,1,41,1,41,1,41,3,41,648,8,41,1,42,1,42,1,42,1,
  	42,1,42,3,42,655,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
  	42,1,43,1,43,1,43,1,43,1,43,3,43,672,8,43,1,43,1,43,1,43,1,43,1,44,1,
  	44,1,44,1,44,5,44,682,8,44,10,44,12,44,685,9,44,1,45,1,45,1,45,1,45,1,
  	46,3,46,692,8,46,1,46,1,46,3,46,696,8,46,5,46,698,8,46,10,46,12,46,701,
  	9,46,1,47,4,47,704,8,47,11,47,12,47,705,1,48,1,48,1,49,1,49,1,49,1,49,
  	1,49,1,49,1,49,3,49,717,8,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,725,8,
  	49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
  	49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,750,8,49,1,49,1,
  	49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,763,8,49,1,49,1,
  	49,1,49,1,49,3,49,769,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
  	49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,787,8,49,10,49,12,49,790,9,
  	49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
  	50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
  	50,1,50,1,50,1,50,1,50,1,50,5,50,825,8,50,10,50,12,50,828,9,50,1,51,1,
  	51,1,51,5,51,833,8,51,10,51,12,51,836,9,51,1,52,1,52,1,52,1,52,1,52,1,
  	52,5,52,844,8,52,10,52,12,52,847,9,52,1,53,1,53,1,54,1,54,1,54,1,54,1,
  	54,1,54,5,54,857,8,54,10,54,12,54,860,9,54,1,55,1,55,3,55,864,8,55,1,
  	55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,878,8,
  	56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
  	56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,4,56,901,8,56,11,56,12,56,902,1,
  	56,1,56,1,56,3,56,908,8,56,1,56,1,56,1,56,3,56,913,8,56,1,56,1,56,1,56,
  	3,56,918,8,56,1,56,1,56,1,56,1,56,1,56,3,56,925,8,56,1,56,1,56,1,56,1,
  	56,1,56,1,56,1,56,1,56,3,56,935,8,56,1,56,1,56,1,56,3,56,940,8,56,1,56,
  	1,56,1,56,3,56,945,8,56,1,56,1,56,1,56,1,56,3,56,951,8,56,1,56,1,56,1,
  	56,3,56,956,8,56,1,57,1,57,1,57,1,58,1,58,1,58,3,58,964,8,58,1,59,3,59,
  	967,8,59,1,59,1,59,3,59,971,8,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,
  	60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,
  	62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
  	62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
  	62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1034,8,
  	62,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,1048,
  	8,64,10,64,12,64,1051,9,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
  	65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,5,65,1069,8,65,10,65,12,65,1072,
  	9,65,1,66,1,66,1,66,5,66,1077,8,66,10,66,12,66,1080,9,66,1,67,1,67,3,
  	67,1084,8,67,1,68,1,68,1,68,1,68,1,68,3,68,1091,8,68,1,69,1,69,1,69,5,
  	69,1096,8,69,10,69,12,69,1099,9,69,1,70,1,70,1,70,1,70,1,71,1,71,1,71,
  	1,71,1,71,1,71,5,71,1111,8,71,10,71,12,71,1114,9,71,1,72,1,72,1,73,1,
  	73,1,73,1,73,1,73,1,73,5,73,1124,8,73,10,73,12,73,1127,9,73,1,74,1,74,
  	1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,5,75,1139,8,75,10,75,12,75,1142,
  	9,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1152,8,75,3,75,1154,
  	8,75,1,75,1,75,1,75,1,75,1,75,3,75,1161,8,75,3,75,1163,8,75,1,76,1,76,
  	3,76,1167,8,76,1,76,1,76,3,76,1171,8,76,1,77,1,77,1,77,1,77,1,77,1,77,
  	1,77,3,77,1180,8,77,1,78,1,78,1,78,1,78,5,78,1186,8,78,10,78,12,78,1189,
  	9,78,1,79,1,79,3,79,1193,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
  	1,80,3,80,1204,8,80,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
  	3,82,1216,8,82,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1227,
  	8,84,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1235,8,85,1,86,1,86,1,86,1,86,
  	1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
  	1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1262,8,86,1,87,1,87,1,87,1,87,
  	1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,0,4,98,100,128,130,89,0,
  	2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
  	52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
  	98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
  	134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
  	170,172,174,176,0,5,1,0,56,59,1,0,63,64,2,0,35,35,70,70,2,0,17,17,44,
  	44,1,0,37,38,1427,0,179,1,0,0,0,2,186,1,0,0,0,4,189,1,0,0,0,6,191,1,0,
  	0,0,8,193,1,0,0,0,10,195,1,0,0,0,12,198,1,0,0,0,14,225,1,0,0,0,16,227,
  	1,0,0,0,18,239,1,0,0,0,20,263,1,0,0,0,22,265,1,0,0,0,24,292,1,0,0,0,26,
  	301,1,0,0,0,28,304,1,0,0,0,30,314,1,0,0,0,32,326,1,0,0,0,34,328,1,0,0,
  	0,36,339,1,0,0,0,38,348,1,0,0,0,40,375,1,0,0,0,42,384,1,0,0,0,44,386,
  	1,0,0,0,46,416,1,0,0,0,48,422,1,0,0,0,50,458,1,0,0,0,52,478,1,0,0,0,54,
  	502,1,0,0,0,56,504,1,0,0,0,58,512,1,0,0,0,60,534,1,0,0,0,62,545,1,0,0,
  	0,64,557,1,0,0,0,66,559,1,0,0,0,68,569,1,0,0,0,70,588,1,0,0,0,72,609,
  	1,0,0,0,74,611,1,0,0,0,76,622,1,0,0,0,78,627,1,0,0,0,80,639,1,0,0,0,82,
  	647,1,0,0,0,84,649,1,0,0,0,86,666,1,0,0,0,88,677,1,0,0,0,90,686,1,0,0,
  	0,92,691,1,0,0,0,94,703,1,0,0,0,96,707,1,0,0,0,98,749,1,0,0,0,100,791,
  	1,0,0,0,102,829,1,0,0,0,104,837,1,0,0,0,106,848,1,0,0,0,108,850,1,0,0,
  	0,110,863,1,0,0,0,112,955,1,0,0,0,114,957,1,0,0,0,116,963,1,0,0,0,118,
  	966,1,0,0,0,120,975,1,0,0,0,122,983,1,0,0,0,124,1033,1,0,0,0,126,1035,
  	1,0,0,0,128,1038,1,0,0,0,130,1052,1,0,0,0,132,1073,1,0,0,0,134,1083,1,
  	0,0,0,136,1085,1,0,0,0,138,1092,1,0,0,0,140,1100,1,0,0,0,142,1104,1,0,
  	0,0,144,1115,1,0,0,0,146,1117,1,0,0,0,148,1128,1,0,0,0,150,1162,1,0,0,
  	0,152,1164,1,0,0,0,154,1179,1,0,0,0,156,1181,1,0,0,0,158,1192,1,0,0,0,
  	160,1203,1,0,0,0,162,1205,1,0,0,0,164,1215,1,0,0,0,166,1217,1,0,0,0,168,
  	1226,1,0,0,0,170,1234,1,0,0,0,172,1261,1,0,0,0,174,1263,1,0,0,0,176,1271,
  	1,0,0,0,178,180,5,71,0,0,179,178,1,0,0,0,180,181,1,0,0,0,181,179,1,0,
  	0,0,181,182,1,0,0,0,182,1,1,0,0,0,183,185,5,71,0,0,184,183,1,0,0,0,185,
  	188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,3,1,0,0,0,188,186,1,0,
  	0,0,189,190,7,0,0,0,190,5,1,0,0,0,191,192,7,1,0,0,192,7,1,0,0,0,193,194,
  	5,61,0,0,194,9,1,0,0,0,195,196,3,12,6,0,196,197,5,0,0,1,197,11,1,0,0,
  	0,198,204,3,14,7,0,199,200,3,0,0,0,200,201,3,14,7,0,201,203,1,0,0,0,202,
  	199,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,13,1,
  	0,0,0,206,204,1,0,0,0,207,226,3,16,8,0,208,226,3,22,11,0,209,226,3,32,
  	16,0,210,226,3,48,24,0,211,226,3,50,25,0,212,226,3,52,26,0,213,226,3,
  	66,33,0,214,226,3,68,34,0,215,226,3,112,56,0,216,226,3,114,57,0,217,226,
  	3,70,35,0,218,226,3,126,63,0,219,226,3,116,58,0,220,226,3,72,36,0,221,
  	226,3,78,39,0,222,226,3,174,87,0,223,226,3,176,88,0,224,226,3,2,1,0,225,
  	207,1,0,0,0,225,208,1,0,0,0,225,209,1,0,0,0,225,210,1,0,0,0,225,211,1,
  	0,0,0,225,212,1,0,0,0,225,213,1,0,0,0,225,214,1,0,0,0,225,215,1,0,0,0,
  	225,216,1,0,0,0,225,217,1,0,0,0,225,218,1,0,0,0,225,219,1,0,0,0,225,220,
  	1,0,0,0,225,221,1,0,0,0,225,222,1,0,0,0,225,223,1,0,0,0,225,224,1,0,0,
  	0,226,15,1,0,0,0,227,229,5,23,0,0,228,230,3,8,4,0,229,228,1,0,0,0,229,
  	230,1,0,0,0,230,231,1,0,0,0,231,235,3,0,0,0,232,233,3,18,9,0,233,234,
  	3,0,0,0,234,236,1,0,0,0,235,232,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,
  	0,237,238,5,1,0,0,238,17,1,0,0,0,239,245,3,20,10,0,240,241,3,0,0,0,241,
  	242,3,20,10,0,242,244,1,0,0,0,243,240,1,0,0,0,244,247,1,0,0,0,245,243,
  	1,0,0,0,245,246,1,0,0,0,246,19,1,0,0,0,247,245,1,0,0,0,248,264,3,16,8,
  	0,249,264,3,22,11,0,250,264,3,32,16,0,251,264,3,48,24,0,252,264,3,50,
  	25,0,253,264,3,52,26,0,254,264,3,66,33,0,255,264,3,68,34,0,256,264,3,
  	112,56,0,257,264,3,114,57,0,258,264,3,70,35,0,259,264,3,126,63,0,260,
  	264,3,116,58,0,261,264,3,78,39,0,262,264,3,2,1,0,263,248,1,0,0,0,263,
  	249,1,0,0,0,263,250,1,0,0,0,263,251,1,0,0,0,263,252,1,0,0,0,263,253,1,
  	0,0,0,263,254,1,0,0,0,263,255,1,0,0,0,263,256,1,0,0,0,263,257,1,0,0,0,
  	263,258,1,0,0,0,263,259,1,0,0,0,263,260,1,0,0,0,263,261,1,0,0,0,263,262,
  	1,0,0,0,264,21,1,0,0,0,265,266,5,3,0,0,266,271,3,8,4,0,267,268,5,35,0,
  	0,268,269,3,30,15,0,269,270,5,34,0,0,270,272,1,0,0,0,271,267,1,0,0,0,
  	271,272,1,0,0,0,272,281,1,0,0,0,273,274,5,11,0,0,274,279,3,130,65,0,275,
  	276,5,35,0,0,276,277,3,30,15,0,277,278,5,34,0,0,278,280,1,0,0,0,279,275,
  	1,0,0,0,279,280,1,0,0,0,280,282,1,0,0,0,281,273,1,0,0,0,281,282,1,0,0,
  	0,282,283,1,0,0,0,283,287,3,0,0,0,284,285,3,24,12,0,285,286,3,0,0,0,286,
  	288,1,0,0,0,287,284,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,290,3,
  	2,1,0,290,291,5,1,0,0,291,23,1,0,0,0,292,298,3,26,13,0,293,294,3,0,0,
  	0,294,295,3,26,13,0,295,297,1,0,0,0,296,293,1,0,0,0,297,300,1,0,0,0,298,
  	296,1,0,0,0,298,299,1,0,0,0,299,25,1,0,0,0,300,298,1,0,0,0,301,302,3,
  	28,14,0,302,27,1,0,0,0,303,305,5,12,0,0,304,303,1,0,0,0,304,305,1,0,0,
  	0,305,306,1,0,0,0,306,308,3,8,4,0,307,309,3,132,66,0,308,307,1,0,0,0,
  	308,309,1,0,0,0,309,312,1,0,0,0,310,311,5,33,0,0,311,313,3,154,77,0,312,
  	310,1,0,0,0,312,313,1,0,0,0,313,29,1,0,0,0,314,319,3,8,4,0,315,316,5,
  	55,0,0,316,318,3,8,4,0,317,315,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,
  	0,319,320,1,0,0,0,320,31,1,0,0,0,321,319,1,0,0,0,322,327,3,34,17,0,323,
  	327,3,38,19,0,324,327,3,44,22,0,325,327,3,46,23,0,326,322,1,0,0,0,326,
  	323,1,0,0,0,326,324,1,0,0,0,326,325,1,0,0,0,327,33,1,0,0,0,328,329,5,
  	28,0,0,329,330,5,23,0,0,330,331,3,8,4,0,331,335,3,0,0,0,332,333,3,36,
  	18,0,333,334,3,0,0,0,334,336,1,0,0,0,335,332,1,0,0,0,335,336,1,0,0,0,
  	336,337,1,0,0,0,337,338,5,1,0,0,338,35,1,0,0,0,339,345,3,32,16,0,340,
  	341,3,0,0,0,341,342,3,32,16,0,342,344,1,0,0,0,343,340,1,0,0,0,344,347,
  	1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,37,1,0,0,0,347,345,1,0,0,
  	0,348,349,5,28,0,0,349,350,5,3,0,0,350,355,3,8,4,0,351,352,5,35,0,0,352,
  	353,3,30,15,0,353,354,5,34,0,0,354,356,1,0,0,0,355,351,1,0,0,0,355,356,
  	1,0,0,0,356,365,1,0,0,0,357,358,5,11,0,0,358,363,3,130,65,0,359,360,5,
  	35,0,0,360,361,3,30,15,0,361,362,5,34,0,0,362,364,1,0,0,0,363,359,1,0,
  	0,0,363,364,1,0,0,0,364,366,1,0,0,0,365,357,1,0,0,0,365,366,1,0,0,0,366,
  	367,1,0,0,0,367,371,3,0,0,0,368,369,3,40,20,0,369,370,3,0,0,0,370,372,
  	1,0,0,0,371,368,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,374,5,1,0,
  	0,374,39,1,0,0,0,375,381,3,42,21,0,376,377,3,0,0,0,377,378,3,42,21,0,
  	378,380,1,0,0,0,379,376,1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,
  	1,0,0,0,382,41,1,0,0,0,383,381,1,0,0,0,384,385,3,28,14,0,385,43,1,0,0,
  	0,386,388,5,28,0,0,387,389,5,14,0,0,388,387,1,0,0,0,388,389,1,0,0,0,389,
  	391,1,0,0,0,390,392,5,12,0,0,391,390,1,0,0,0,391,392,1,0,0,0,392,393,
  	1,0,0,0,393,397,5,2,0,0,394,395,3,8,4,0,395,396,5,36,0,0,396,398,1,0,
  	0,0,397,394,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,404,3,8,4,0,400,
  	401,5,35,0,0,401,402,3,30,15,0,402,403,5,34,0,0,403,405,1,0,0,0,404,400,
  	1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,407,5,45,0,0,407,409,3,2,
  	1,0,408,410,3,150,75,0,409,408,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,
  	0,411,412,3,2,1,0,412,414,5,46,0,0,413,415,3,132,66,0,414,413,1,0,0,0,
  	414,415,1,0,0,0,415,45,1,0,0,0,416,417,5,28,0,0,417,418,5,15,0,0,418,
  	419,3,8,4,0,419,420,3,132,66,0,420,47,1,0,0,0,421,423,5,14,0,0,422,421,
  	1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,426,5,12,0,0,425,424,1,0,
  	0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,431,5,2,0,0,428,429,3,8,4,0,429,
  	430,5,36,0,0,430,432,1,0,0,0,431,428,1,0,0,0,431,432,1,0,0,0,432,433,
  	1,0,0,0,433,438,3,8,4,0,434,435,5,35,0,0,435,436,3,30,15,0,436,437,5,
  	34,0,0,437,439,1,0,0,0,438,434,1,0,0,0,438,439,1,0,0,0,439,440,1,0,0,
  	0,440,441,5,45,0,0,441,443,3,2,1,0,442,444,3,150,75,0,443,442,1,0,0,0,
  	443,444,1,0,0,0,444,445,1,0,0,0,445,446,3,2,1,0,446,448,5,46,0,0,447,
  	449,3,132,66,0,448,447,1,0,0,0,448,449,1,0,0,0,449,450,1,0,0,0,450,454,
  	3,0,0,0,451,452,3,156,78,0,452,453,3,0,0,0,453,455,1,0,0,0,454,451,1,
  	0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,457,5,1,0,0,457,49,1,0,0,0,
  	458,459,5,5,0,0,459,460,3,112,56,0,460,464,3,0,0,0,461,462,3,156,78,0,
  	462,463,3,0,0,0,463,465,1,0,0,0,464,461,1,0,0,0,464,465,1,0,0,0,465,476,
  	1,0,0,0,466,467,5,20,0,0,467,468,3,0,0,0,468,469,3,156,78,0,469,470,3,
  	0,0,0,470,472,1,0,0,0,471,466,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,
  	473,477,5,1,0,0,474,475,5,20,0,0,475,477,3,50,25,0,476,471,1,0,0,0,476,
  	474,1,0,0,0,477,51,1,0,0,0,478,481,5,4,0,0,479,482,3,98,49,0,480,482,
  	3,54,27,0,481,479,1,0,0,0,481,480,1,0,0,0,482,483,1,0,0,0,483,487,5,9,
  	0,0,484,485,3,8,4,0,485,486,5,55,0,0,486,488,1,0,0,0,487,484,1,0,0,0,
  	487,488,1,0,0,0,488,490,1,0,0,0,489,491,3,8,4,0,490,489,1,0,0,0,490,491,
  	1,0,0,0,491,492,1,0,0,0,492,496,3,0,0,0,493,494,3,156,78,0,494,495,3,
  	0,0,0,495,497,1,0,0,0,496,493,1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,
  	498,499,5,1,0,0,499,53,1,0,0,0,500,503,3,56,28,0,501,503,3,58,29,0,502,
  	500,1,0,0,0,502,501,1,0,0,0,503,55,1,0,0,0,504,505,3,60,30,0,505,506,
  	5,36,0,0,506,508,5,36,0,0,507,509,3,64,32,0,508,507,1,0,0,0,508,509,1,
  	0,0,0,509,510,1,0,0,0,510,511,3,60,30,0,511,57,1,0,0,0,512,513,3,60,30,
  	0,513,514,5,36,0,0,514,516,5,36,0,0,515,517,3,62,31,0,516,515,1,0,0,0,
  	516,517,1,0,0,0,517,518,1,0,0,0,518,519,3,60,30,0,519,520,5,36,0,0,520,
  	522,5,36,0,0,521,523,3,64,32,0,522,521,1,0,0,0,522,523,1,0,0,0,523,524,
  	1,0,0,0,524,525,3,60,30,0,525,59,1,0,0,0,526,535,3,4,2,0,527,535,3,8,
  	4,0,528,529,5,45,0,0,529,530,3,2,1,0,530,531,3,112,56,0,531,532,3,2,1,
  	0,532,533,5,46,0,0,533,535,1,0,0,0,534,526,1,0,0,0,534,527,1,0,0,0,534,
  	528,1,0,0,0,535,61,1,0,0,0,536,546,5,37,0,0,537,546,5,38,0,0,538,546,
  	5,39,0,0,539,546,5,40,0,0,540,546,5,41,0,0,541,542,5,40,0,0,542,546,5,
  	40,0,0,543,544,5,39,0,0,544,546,5,39,0,0,545,536,1,0,0,0,545,537,1,0,
  	0,0,545,538,1,0,0,0,545,539,1,0,0,0,545,540,1,0,0,0,545,541,1,0,0,0,545,
  	543,1,0,0,0,546,63,1,0,0,0,547,548,5,54,0,0,548,558,5,33,0,0,549,550,
  	5,33,0,0,550,558,5,33,0,0,551,558,5,34,0,0,552,558,5,35,0,0,553,554,5,
  	34,0,0,554,558,5,33,0,0,555,556,5,35,0,0,556,558,5,33,0,0,557,547,1,0,
  	0,0,557,549,1,0,0,0,557,551,1,0,0,0,557,552,1,0,0,0,557,553,1,0,0,0,557,
  	555,1,0,0,0,558,65,1,0,0,0,559,560,5,22,0,0,560,561,3,112,56,0,561,565,
  	3,0,0,0,562,563,3,156,78,0,563,564,3,0,0,0,564,566,1,0,0,0,565,562,1,
  	0,0,0,565,566,1,0,0,0,566,567,1,0,0,0,567,568,5,1,0,0,568,67,1,0,0,0,
  	569,570,5,18,0,0,570,574,3,0,0,0,571,572,3,156,78,0,572,573,3,0,0,0,573,
  	575,1,0,0,0,574,571,1,0,0,0,574,575,1,0,0,0,575,576,1,0,0,0,576,578,5,
  	19,0,0,577,579,3,8,4,0,578,577,1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,
  	0,580,584,3,0,0,0,581,582,3,156,78,0,582,583,3,0,0,0,583,585,1,0,0,0,
  	584,581,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,587,5,1,0,0,587,69,
  	1,0,0,0,588,589,5,30,0,0,589,590,3,6,3,0,590,71,1,0,0,0,591,593,5,7,0,
  	0,592,594,5,36,0,0,593,592,1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,0,595,
  	599,3,128,64,0,596,600,3,74,37,0,597,598,5,9,0,0,598,600,3,8,4,0,599,
  	596,1,0,0,0,599,597,1,0,0,0,599,600,1,0,0,0,600,610,1,0,0,0,601,602,5,
  	7,0,0,602,603,3,8,4,0,603,604,5,64,0,0,604,607,5,64,0,0,605,606,5,9,0,
  	0,606,608,3,8,4,0,607,605,1,0,0,0,607,608,1,0,0,0,608,610,1,0,0,0,609,
  	591,1,0,0,0,609,601,1,0,0,0,610,73,1,0,0,0,611,612,5,47,0,0,612,617,3,
  	76,38,0,613,614,5,55,0,0,614,616,3,76,38,0,615,613,1,0,0,0,616,619,1,
  	0,0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,620,1,0,0,0,619,617,1,0,0,0,
  	620,621,5,48,0,0,621,75,1,0,0,0,622,625,3,8,4,0,623,624,5,9,0,0,624,626,
  	3,8,4,0,625,623,1,0,0,0,625,626,1,0,0,0,626,77,1,0,0,0,627,628,5,8,0,
  	0,628,636,3,80,40,0,629,630,3,2,1,0,630,631,5,55,0,0,631,632,3,2,1,0,
  	632,633,3,80,40,0,633,635,1,0,0,0,634,629,1,0,0,0,635,638,1,0,0,0,636,
  	634,1,0,0,0,636,637,1,0,0,0,637,79,1,0,0,0,638,636,1,0,0,0,639,642,3,
  	8,4,0,640,641,5,9,0,0,641,643,3,8,4,0,642,640,1,0,0,0,642,643,1,0,0,0,
  	643,81,1,0,0,0,644,648,3,84,42,0,645,648,3,86,43,0,646,648,3,96,48,0,
  	647,644,1,0,0,0,647,645,1,0,0,0,647,646,1,0,0,0,648,83,1,0,0,0,649,650,
  	5,35,0,0,650,651,3,2,1,0,651,652,3,128,64,0,652,654,3,2,1,0,653,655,3,
  	88,44,0,654,653,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,657,3,2,1,
  	0,657,658,5,34,0,0,658,659,3,92,46,0,659,660,5,35,0,0,660,661,5,40,0,
  	0,661,662,3,2,1,0,662,663,3,128,64,0,663,664,3,2,1,0,664,665,5,34,0,0,
  	665,85,1,0,0,0,666,667,5,35,0,0,667,668,3,2,1,0,668,669,3,128,64,0,669,
  	671,3,2,1,0,670,672,3,88,44,0,671,670,1,0,0,0,671,672,1,0,0,0,672,673,
  	1,0,0,0,673,674,3,2,1,0,674,675,5,40,0,0,675,676,5,34,0,0,676,87,1,0,
  	0,0,677,683,3,90,45,0,678,679,3,2,1,0,679,680,3,90,45,0,680,682,1,0,0,
  	0,681,678,1,0,0,0,682,685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,
  	89,1,0,0,0,685,683,1,0,0,0,686,687,3,8,4,0,687,688,5,33,0,0,688,689,3,
  	98,49,0,689,91,1,0,0,0,690,692,3,94,47,0,691,690,1,0,0,0,691,692,1,0,
  	0,0,692,699,1,0,0,0,693,695,3,82,41,0,694,696,3,94,47,0,695,694,1,0,0,
  	0,695,696,1,0,0,0,696,698,1,0,0,0,697,693,1,0,0,0,698,701,1,0,0,0,699,
  	697,1,0,0,0,699,700,1,0,0,0,700,93,1,0,0,0,701,699,1,0,0,0,702,704,8,
  	2,0,0,703,702,1,0,0,0,704,705,1,0,0,0,705,703,1,0,0,0,705,706,1,0,0,0,
  	706,95,1,0,0,0,707,708,5,70,0,0,708,97,1,0,0,0,709,710,6,49,-1,0,710,
  	750,3,4,2,0,711,750,3,6,3,0,712,750,3,8,4,0,713,714,5,47,0,0,714,716,
  	3,2,1,0,715,717,3,104,52,0,716,715,1,0,0,0,716,717,1,0,0,0,717,718,1,
  	0,0,0,718,719,3,2,1,0,719,720,5,48,0,0,720,750,1,0,0,0,721,722,5,45,0,
  	0,722,724,3,2,1,0,723,725,3,108,54,0,724,723,1,0,0,0,724,725,1,0,0,0,
  	725,726,1,0,0,0,726,727,3,2,1,0,727,728,5,46,0,0,728,750,1,0,0,0,729,
  	730,5,37,0,0,730,750,3,98,49,9,731,732,5,38,0,0,732,750,3,98,49,8,733,
  	734,5,38,0,0,734,735,5,38,0,0,735,750,3,98,49,7,736,737,5,37,0,0,737,
  	738,5,37,0,0,738,750,3,98,49,6,739,740,5,54,0,0,740,750,3,98,49,3,741,
  	742,5,51,0,0,742,750,3,98,49,2,743,744,5,45,0,0,744,745,3,2,1,0,745,746,
  	3,112,56,0,746,747,3,2,1,0,747,748,5,46,0,0,748,750,1,0,0,0,749,709,1,
  	0,0,0,749,711,1,0,0,0,749,712,1,0,0,0,749,713,1,0,0,0,749,721,1,0,0,0,
  	749,729,1,0,0,0,749,731,1,0,0,0,749,733,1,0,0,0,749,736,1,0,0,0,749,739,
  	1,0,0,0,749,741,1,0,0,0,749,743,1,0,0,0,750,788,1,0,0,0,751,752,10,14,
  	0,0,752,753,3,2,1,0,753,754,5,36,0,0,754,755,3,2,1,0,755,756,3,8,4,0,
  	756,787,1,0,0,0,757,762,10,13,0,0,758,759,5,35,0,0,759,760,3,102,51,0,
  	760,761,5,34,0,0,761,763,1,0,0,0,762,758,1,0,0,0,762,763,1,0,0,0,763,
  	764,1,0,0,0,764,765,5,45,0,0,765,768,3,2,1,0,766,769,3,142,71,0,767,769,
  	3,146,73,0,768,766,1,0,0,0,768,767,1,0,0,0,768,769,1,0,0,0,769,770,1,
  	0,0,0,770,771,3,2,1,0,771,772,5,46,0,0,772,787,1,0,0,0,773,774,10,12,
  	0,0,774,775,5,47,0,0,775,776,3,2,1,0,776,777,3,112,56,0,777,778,3,2,1,
  	0,778,779,5,48,0,0,779,787,1,0,0,0,780,781,10,5,0,0,781,782,5,38,0,0,
  	782,787,5,38,0,0,783,784,10,4,0,0,784,785,5,37,0,0,785,787,5,37,0,0,786,
  	751,1,0,0,0,786,757,1,0,0,0,786,773,1,0,0,0,786,780,1,0,0,0,786,783,1,
  	0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,99,1,0,0,0,
  	790,788,1,0,0,0,791,792,6,50,-1,0,792,793,3,98,49,0,793,826,1,0,0,0,794,
  	795,10,5,0,0,795,796,3,2,1,0,796,797,3,164,82,0,797,798,3,2,1,0,798,799,
  	3,100,50,6,799,825,1,0,0,0,800,801,10,4,0,0,801,802,3,2,1,0,802,803,3,
  	166,83,0,803,804,3,2,1,0,804,805,3,100,50,5,805,825,1,0,0,0,806,807,10,
  	3,0,0,807,808,3,2,1,0,808,809,3,168,84,0,809,810,3,2,1,0,810,811,3,100,
  	50,4,811,825,1,0,0,0,812,813,10,2,0,0,813,814,3,2,1,0,814,815,3,172,86,
  	0,815,816,3,2,1,0,816,817,3,100,50,3,817,825,1,0,0,0,818,819,10,1,0,0,
  	819,820,3,2,1,0,820,821,3,170,85,0,821,822,3,2,1,0,822,823,3,100,50,2,
  	823,825,1,0,0,0,824,794,1,0,0,0,824,800,1,0,0,0,824,806,1,0,0,0,824,812,
  	1,0,0,0,824,818,1,0,0,0,825,828,1,0,0,0,826,824,1,0,0,0,826,827,1,0,0,
  	0,827,101,1,0,0,0,828,826,1,0,0,0,829,834,3,132,66,0,830,831,5,55,0,0,
  	831,833,3,132,66,0,832,830,1,0,0,0,833,836,1,0,0,0,834,832,1,0,0,0,834,
  	835,1,0,0,0,835,103,1,0,0,0,836,834,1,0,0,0,837,845,3,106,53,0,838,839,
  	3,2,1,0,839,840,5,55,0,0,840,841,3,2,1,0,841,842,3,106,53,0,842,844,1,
  	0,0,0,843,838,1,0,0,0,844,847,1,0,0,0,845,843,1,0,0,0,845,846,1,0,0,0,
  	846,105,1,0,0,0,847,845,1,0,0,0,848,849,3,112,56,0,849,107,1,0,0,0,850,
  	858,3,110,55,0,851,852,3,2,1,0,852,853,5,55,0,0,853,854,3,2,1,0,854,855,
  	3,110,55,0,855,857,1,0,0,0,856,851,1,0,0,0,857,860,1,0,0,0,858,856,1,
  	0,0,0,858,859,1,0,0,0,859,109,1,0,0,0,860,858,1,0,0,0,861,864,3,8,4,0,
  	862,864,5,64,0,0,863,861,1,0,0,0,863,862,1,0,0,0,864,865,1,0,0,0,865,
  	866,5,33,0,0,866,867,3,112,56,0,867,111,1,0,0,0,868,869,5,31,0,0,869,
  	870,3,2,1,0,870,871,5,36,0,0,871,872,3,2,1,0,872,873,3,8,4,0,873,874,
  	5,45,0,0,874,877,3,2,1,0,875,878,3,142,71,0,876,878,3,146,73,0,877,875,
  	1,0,0,0,877,876,1,0,0,0,877,878,1,0,0,0,878,879,1,0,0,0,879,880,3,2,1,
  	0,880,881,5,46,0,0,881,956,1,0,0,0,882,956,3,100,50,0,883,884,3,98,49,
  	0,884,885,5,9,0,0,885,886,3,134,67,0,886,956,1,0,0,0,887,888,3,100,50,
  	0,888,889,3,2,1,0,889,890,5,49,0,0,890,891,3,2,1,0,891,892,3,112,56,0,
  	892,893,3,2,1,0,893,894,5,50,0,0,894,895,3,2,1,0,895,896,3,112,56,0,896,
  	956,1,0,0,0,897,900,3,98,49,0,898,899,5,10,0,0,899,901,3,98,49,0,900,
  	898,1,0,0,0,901,902,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,956,1,
  	0,0,0,904,905,5,6,0,0,905,956,3,100,50,0,906,908,5,14,0,0,907,906,1,0,
  	0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,910,5,45,0,0,910,912,3,2,1,0,
  	911,913,3,150,75,0,912,911,1,0,0,0,912,913,1,0,0,0,913,914,1,0,0,0,914,
  	915,3,2,1,0,915,917,5,46,0,0,916,918,3,132,66,0,917,916,1,0,0,0,917,918,
  	1,0,0,0,918,919,1,0,0,0,919,920,5,50,0,0,920,921,3,2,1,0,921,922,3,112,
  	56,0,922,956,1,0,0,0,923,925,5,14,0,0,924,923,1,0,0,0,924,925,1,0,0,0,
  	925,926,1,0,0,0,926,934,5,2,0,0,927,928,3,2,1,0,928,929,5,35,0,0,929,
  	930,3,2,1,0,930,931,3,30,15,0,931,932,3,2,1,0,932,933,5,34,0,0,933,935,
  	1,0,0,0,934,927,1,0,0,0,934,935,1,0,0,0,935,936,1,0,0,0,936,937,5,45,
  	0,0,937,939,3,2,1,0,938,940,3,150,75,0,939,938,1,0,0,0,939,940,1,0,0,
  	0,940,941,1,0,0,0,941,942,3,2,1,0,942,944,5,46,0,0,943,945,3,132,66,0,
  	944,943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,950,3,0,0,0,947,948,
  	3,156,78,0,948,949,3,0,0,0,949,951,1,0,0,0,950,947,1,0,0,0,950,951,1,
  	0,0,0,951,952,1,0,0,0,952,953,5,1,0,0,953,956,1,0,0,0,954,956,3,82,41,
  	0,955,868,1,0,0,0,955,882,1,0,0,0,955,883,1,0,0,0,955,887,1,0,0,0,955,
  	897,1,0,0,0,955,904,1,0,0,0,955,907,1,0,0,0,955,924,1,0,0,0,955,954,1,
  	0,0,0,956,113,1,0,0,0,957,958,5,21,0,0,958,959,3,112,56,0,959,115,1,0,
  	0,0,960,964,3,118,59,0,961,964,3,120,60,0,962,964,3,122,61,0,963,960,
  	1,0,0,0,963,961,1,0,0,0,963,962,1,0,0,0,964,117,1,0,0,0,965,967,5,15,
  	0,0,966,965,1,0,0,0,966,967,1,0,0,0,967,968,1,0,0,0,968,970,3,8,4,0,969,
  	971,3,132,66,0,970,969,1,0,0,0,970,971,1,0,0,0,971,972,1,0,0,0,972,973,
  	3,124,62,0,973,974,3,112,56,0,974,119,1,0,0,0,975,976,3,130,65,0,976,
  	977,3,2,1,0,977,978,5,36,0,0,978,979,3,2,1,0,979,980,3,8,4,0,980,981,
  	3,124,62,0,981,982,3,112,56,0,982,121,1,0,0,0,983,984,3,130,65,0,984,
  	985,5,47,0,0,985,986,3,2,1,0,986,987,3,112,56,0,987,988,3,2,1,0,988,989,
  	5,48,0,0,989,990,3,124,62,0,990,991,3,112,56,0,991,123,1,0,0,0,992,1034,
  	5,32,0,0,993,1034,5,33,0,0,994,995,5,50,0,0,995,1034,5,33,0,0,996,997,
  	5,37,0,0,997,1034,5,33,0,0,998,999,5,38,0,0,999,1034,5,33,0,0,1000,1001,
  	5,39,0,0,1001,1034,5,33,0,0,1002,1003,5,40,0,0,1003,1034,5,33,0,0,1004,
  	1005,5,40,0,0,1005,1006,5,40,0,0,1006,1034,5,33,0,0,1007,1008,5,41,0,
  	0,1008,1034,5,33,0,0,1009,1010,5,39,0,0,1010,1011,5,39,0,0,1011,1034,
  	5,33,0,0,1012,1013,5,43,0,0,1013,1034,5,33,0,0,1014,1015,5,44,0,0,1015,
  	1034,5,33,0,0,1016,1017,5,35,0,0,1017,1018,5,35,0,0,1018,1034,5,33,0,
  	0,1019,1020,5,34,0,0,1020,1021,5,34,0,0,1021,1034,5,33,0,0,1022,1023,
  	5,42,0,0,1023,1034,5,33,0,0,1024,1025,5,43,0,0,1025,1026,5,43,0,0,1026,
  	1034,5,33,0,0,1027,1028,5,44,0,0,1028,1029,5,44,0,0,1029,1034,5,33,0,
  	0,1030,1031,5,49,0,0,1031,1032,5,49,0,0,1032,1034,5,33,0,0,1033,992,1,
  	0,0,0,1033,993,1,0,0,0,1033,994,1,0,0,0,1033,996,1,0,0,0,1033,998,1,0,
  	0,0,1033,1000,1,0,0,0,1033,1002,1,0,0,0,1033,1004,1,0,0,0,1033,1007,1,
  	0,0,0,1033,1009,1,0,0,0,1033,1012,1,0,0,0,1033,1014,1,0,0,0,1033,1016,
  	1,0,0,0,1033,1019,1,0,0,0,1033,1022,1,0,0,0,1033,1024,1,0,0,0,1033,1027,
  	1,0,0,0,1033,1030,1,0,0,0,1034,125,1,0,0,0,1035,1036,5,6,0,0,1036,1037,
  	3,116,58,0,1037,127,1,0,0,0,1038,1039,6,64,-1,0,1039,1040,3,8,4,0,1040,
  	1049,1,0,0,0,1041,1042,10,1,0,0,1042,1043,3,2,1,0,1043,1044,5,36,0,0,
  	1044,1045,3,2,1,0,1045,1046,3,8,4,0,1046,1048,1,0,0,0,1047,1041,1,0,0,
  	0,1048,1051,1,0,0,0,1049,1047,1,0,0,0,1049,1050,1,0,0,0,1050,129,1,0,
  	0,0,1051,1049,1,0,0,0,1052,1053,6,65,-1,0,1053,1054,3,8,4,0,1054,1070,
  	1,0,0,0,1055,1056,10,2,0,0,1056,1057,3,2,1,0,1057,1058,5,36,0,0,1058,
  	1059,3,2,1,0,1059,1060,3,8,4,0,1060,1069,1,0,0,0,1061,1062,10,1,0,0,1062,
  	1063,5,47,0,0,1063,1064,3,2,1,0,1064,1065,3,112,56,0,1065,1066,3,2,1,
  	0,1066,1067,5,48,0,0,1067,1069,1,0,0,0,1068,1055,1,0,0,0,1068,1061,1,
  	0,0,0,1069,1072,1,0,0,0,1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,131,
  	1,0,0,0,1072,1070,1,0,0,0,1073,1078,3,134,67,0,1074,1075,7,3,0,0,1075,
  	1077,3,134,67,0,1076,1074,1,0,0,0,1077,1080,1,0,0,0,1078,1076,1,0,0,0,
  	1078,1079,1,0,0,0,1079,133,1,0,0,0,1080,1078,1,0,0,0,1081,1084,3,136,
  	68,0,1082,1084,3,140,70,0,1083,1081,1,0,0,0,1083,1082,1,0,0,0,1084,135,
  	1,0,0,0,1085,1090,3,128,64,0,1086,1087,5,35,0,0,1087,1088,3,138,69,0,
  	1088,1089,5,34,0,0,1089,1091,1,0,0,0,1090,1086,1,0,0,0,1090,1091,1,0,
  	0,0,1091,137,1,0,0,0,1092,1097,3,132,66,0,1093,1094,5,55,0,0,1094,1096,
  	3,132,66,0,1095,1093,1,0,0,0,1096,1099,1,0,0,0,1097,1095,1,0,0,0,1097,
  	1098,1,0,0,0,1098,139,1,0,0,0,1099,1097,1,0,0,0,1100,1101,5,47,0,0,1101,
  	1102,5,48,0,0,1102,1103,3,134,67,0,1103,141,1,0,0,0,1104,1112,3,144,72,
  	0,1105,1106,3,2,1,0,1106,1107,5,55,0,0,1107,1108,3,2,1,0,1108,1109,3,
  	144,72,0,1109,1111,1,0,0,0,1110,1105,1,0,0,0,1111,1114,1,0,0,0,1112,1110,
  	1,0,0,0,1112,1113,1,0,0,0,1113,143,1,0,0,0,1114,1112,1,0,0,0,1115,1116,
  	3,112,56,0,1116,145,1,0,0,0,1117,1125,3,148,74,0,1118,1119,3,2,1,0,1119,
  	1120,5,55,0,0,1120,1121,3,2,1,0,1121,1122,3,148,74,0,1122,1124,1,0,0,
  	0,1123,1118,1,0,0,0,1124,1127,1,0,0,0,1125,1123,1,0,0,0,1125,1126,1,0,
  	0,0,1126,147,1,0,0,0,1127,1125,1,0,0,0,1128,1129,3,8,4,0,1129,1130,5,
  	33,0,0,1130,1131,3,112,56,0,1131,149,1,0,0,0,1132,1140,3,152,76,0,1133,
  	1134,3,2,1,0,1134,1135,5,55,0,0,1135,1136,3,2,1,0,1136,1137,3,152,76,
  	0,1137,1139,1,0,0,0,1138,1133,1,0,0,0,1139,1142,1,0,0,0,1140,1138,1,0,
  	0,0,1140,1141,1,0,0,0,1141,1153,1,0,0,0,1142,1140,1,0,0,0,1143,1144,3,
  	2,1,0,1144,1145,5,55,0,0,1145,1146,3,2,1,0,1146,1147,5,36,0,0,1147,1148,
  	5,36,0,0,1148,1149,5,36,0,0,1149,1151,3,8,4,0,1150,1152,3,132,66,0,1151,
  	1150,1,0,0,0,1151,1152,1,0,0,0,1152,1154,1,0,0,0,1153,1143,1,0,0,0,1153,
  	1154,1,0,0,0,1154,1163,1,0,0,0,1155,1156,5,36,0,0,1156,1157,5,36,0,0,
  	1157,1158,5,36,0,0,1158,1160,3,8,4,0,1159,1161,3,132,66,0,1160,1159,1,
  	0,0,0,1160,1161,1,0,0,0,1161,1163,1,0,0,0,1162,1132,1,0,0,0,1162,1155,
  	1,0,0,0,1163,151,1,0,0,0,1164,1166,3,8,4,0,1165,1167,3,132,66,0,1166,
  	1165,1,0,0,0,1166,1167,1,0,0,0,1167,1170,1,0,0,0,1168,1169,5,33,0,0,1169,
  	1171,3,154,77,0,1170,1168,1,0,0,0,1170,1171,1,0,0,0,1171,153,1,0,0,0,
  	1172,1180,3,4,2,0,1173,1180,3,6,3,0,1174,1180,3,8,4,0,1175,1176,5,45,
  	0,0,1176,1180,5,46,0,0,1177,1178,5,47,0,0,1178,1180,5,48,0,0,1179,1172,
  	1,0,0,0,1179,1173,1,0,0,0,1179,1174,1,0,0,0,1179,1175,1,0,0,0,1179,1177,
  	1,0,0,0,1180,155,1,0,0,0,1181,1187,3,158,79,0,1182,1183,3,0,0,0,1183,
  	1184,3,158,79,0,1184,1186,1,0,0,0,1185,1182,1,0,0,0,1186,1189,1,0,0,0,
  	1187,1185,1,0,0,0,1187,1188,1,0,0,0,1188,157,1,0,0,0,1189,1187,1,0,0,
  	0,1190,1193,3,160,80,0,1191,1193,3,162,81,0,1192,1190,1,0,0,0,1192,1191,
  	1,0,0,0,1193,159,1,0,0,0,1194,1204,3,50,25,0,1195,1204,3,52,26,0,1196,
  	1204,3,66,33,0,1197,1204,3,68,34,0,1198,1204,3,112,56,0,1199,1204,3,114,
  	57,0,1200,1204,3,126,63,0,1201,1204,3,116,58,0,1202,1204,3,2,1,0,1203,
  	1194,1,0,0,0,1203,1195,1,0,0,0,1203,1196,1,0,0,0,1203,1197,1,0,0,0,1203,
  	1198,1,0,0,0,1203,1199,1,0,0,0,1203,1200,1,0,0,0,1203,1201,1,0,0,0,1203,
  	1202,1,0,0,0,1204,161,1,0,0,0,1205,1206,5,13,0,0,1206,1207,3,112,56,0,
  	1207,163,1,0,0,0,1208,1216,5,39,0,0,1209,1216,5,40,0,0,1210,1216,5,41,
  	0,0,1211,1212,5,40,0,0,1212,1216,5,40,0,0,1213,1214,5,39,0,0,1214,1216,
  	5,39,0,0,1215,1208,1,0,0,0,1215,1209,1,0,0,0,1215,1210,1,0,0,0,1215,1211,
  	1,0,0,0,1215,1213,1,0,0,0,1216,165,1,0,0,0,1217,1218,7,4,0,0,1218,167,
  	1,0,0,0,1219,1227,5,42,0,0,1220,1227,5,44,0,0,1221,1227,5,43,0,0,1222,
  	1223,5,35,0,0,1223,1227,5,35,0,0,1224,1225,5,34,0,0,1225,1227,5,34,0,
  	0,1226,1219,1,0,0,0,1226,1220,1,0,0,0,1226,1221,1,0,0,0,1226,1222,1,0,
  	0,0,1226,1224,1,0,0,0,1227,169,1,0,0,0,1228,1235,5,16,0,0,1229,1235,5,
  	17,0,0,1230,1231,5,44,0,0,1231,1235,5,44,0,0,1232,1233,5,43,0,0,1233,
  	1235,5,43,0,0,1234,1228,1,0,0,0,1234,1229,1,0,0,0,1234,1230,1,0,0,0,1234,
  	1232,1,0,0,0,1235,171,1,0,0,0,1236,1237,5,33,0,0,1237,1262,5,33,0,0,1238,
  	1239,5,54,0,0,1239,1262,5,33,0,0,1240,1262,5,34,0,0,1241,1262,5,35,0,
  	0,1242,1243,5,34,0,0,1243,1262,5,33,0,0,1244,1245,5,35,0,0,1245,1262,
  	5,33,0,0,1246,1262,5,11,0,0,1247,1248,5,29,0,0,1248,1262,5,11,0,0,1249,
  	1262,5,24,0,0,1250,1251,5,29,0,0,1251,1262,5,24,0,0,1252,1262,5,25,0,
  	0,1253,1254,5,29,0,0,1254,1262,5,25,0,0,1255,1262,5,26,0,0,1256,1257,
  	5,29,0,0,1257,1262,5,26,0,0,1258,1262,5,27,0,0,1259,1260,5,29,0,0,1260,
  	1262,5,27,0,0,1261,1236,1,0,0,0,1261,1238,1,0,0,0,1261,1240,1,0,0,0,1261,
  	1241,1,0,0,0,1261,1242,1,0,0,0,1261,1244,1,0,0,0,1261,1246,1,0,0,0,1261,
  	1247,1,0,0,0,1261,1249,1,0,0,0,1261,1250,1,0,0,0,1261,1252,1,0,0,0,1261,
  	1253,1,0,0,0,1261,1255,1,0,0,0,1261,1256,1,0,0,0,1261,1258,1,0,0,0,1261,
  	1259,1,0,0,0,1262,173,1,0,0,0,1263,1264,5,65,0,0,1264,1265,3,8,4,0,1265,
  	1266,5,64,0,0,1266,1267,3,0,0,0,1267,1268,3,12,6,0,1268,1269,3,0,0,0,
  	1269,1270,5,66,0,0,1270,175,1,0,0,0,1271,1272,5,67,0,0,1272,1273,3,8,
  	4,0,1273,1274,5,64,0,0,1274,177,1,0,0,0,124,181,186,204,225,229,235,245,
  	263,271,279,281,287,298,304,308,312,319,326,335,345,355,363,365,371,381,
  	388,391,397,404,409,414,422,425,431,438,443,448,454,464,471,476,481,487,
  	490,496,502,508,516,522,534,545,557,565,574,578,584,593,599,607,609,617,
  	625,636,642,647,654,671,683,691,695,699,705,716,724,749,762,768,786,788,
  	824,826,834,845,858,863,877,902,907,912,917,924,934,939,944,950,955,963,
  	966,970,1033,1049,1068,1070,1078,1083,1090,1097,1112,1125,1140,1151,1153,
  	1160,1162,1166,1170,1179,1187,1192,1203,1215,1226,1234,1261
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  mavkaparserParserStaticData = staticData.release();
}

}

MavkaParser::MavkaParser(TokenStream *input) : MavkaParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

MavkaParser::MavkaParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  MavkaParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *mavkaparserParserStaticData->atn, mavkaparserParserStaticData->decisionToDFA, mavkaparserParserStaticData->sharedContextCache, options);
}

MavkaParser::~MavkaParser() {
  delete _interpreter;
}

const atn::ATN& MavkaParser::getATN() const {
  return *mavkaparserParserStaticData->atn;
}

std::string MavkaParser::getGrammarFileName() const {
  return "MavkaParser.g4";
}

const std::vector<std::string>& MavkaParser::getRuleNames() const {
  return mavkaparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& MavkaParser::getVocabulary() const {
  return mavkaparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MavkaParser::getSerializedATN() const {
  return mavkaparserParserStaticData->serializedATN;
}


//----------------- NlContext ------------------------------------------------------------------

MavkaParser::NlContext::NlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::NlContext::NL() {
  return getTokens(MavkaParser::NL);
}

tree::TerminalNode* MavkaParser::NlContext::NL(size_t i) {
  return getToken(MavkaParser::NL, i);
}


size_t MavkaParser::NlContext::getRuleIndex() const {
  return MavkaParser::RuleNl;
}

void MavkaParser::NlContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNl(this);
}

void MavkaParser::NlContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNl(this);
}


std::any MavkaParser::NlContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNl(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::NlContext* MavkaParser::nl() {
  NlContext *_localctx = _tracker.createInstance<NlContext>(_ctx, getState());
  enterRule(_localctx, 0, MavkaParser::RuleNl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(179); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(178);
              match(MavkaParser::NL);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(181); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NlsContext ------------------------------------------------------------------

MavkaParser::NlsContext::NlsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::NlsContext::NL() {
  return getTokens(MavkaParser::NL);
}

tree::TerminalNode* MavkaParser::NlsContext::NL(size_t i) {
  return getToken(MavkaParser::NL, i);
}


size_t MavkaParser::NlsContext::getRuleIndex() const {
  return MavkaParser::RuleNls;
}

void MavkaParser::NlsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNls(this);
}

void MavkaParser::NlsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNls(this);
}


std::any MavkaParser::NlsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNls(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::NlsContext* MavkaParser::nls() {
  NlsContext *_localctx = _tracker.createInstance<NlsContext>(_ctx, getState());
  enterRule(_localctx, 2, MavkaParser::RuleNls);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(186);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(183);
        match(MavkaParser::NL); 
      }
      setState(188);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Number_tokenContext ------------------------------------------------------------------

MavkaParser::Number_tokenContext::Number_tokenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Number_tokenContext::INTEGER() {
  return getToken(MavkaParser::INTEGER, 0);
}

tree::TerminalNode* MavkaParser::Number_tokenContext::FLOAT() {
  return getToken(MavkaParser::FLOAT, 0);
}

tree::TerminalNode* MavkaParser::Number_tokenContext::HEX() {
  return getToken(MavkaParser::HEX, 0);
}

tree::TerminalNode* MavkaParser::Number_tokenContext::BIN() {
  return getToken(MavkaParser::BIN, 0);
}


size_t MavkaParser::Number_tokenContext::getRuleIndex() const {
  return MavkaParser::RuleNumber_token;
}

void MavkaParser::Number_tokenContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumber_token(this);
}

void MavkaParser::Number_tokenContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumber_token(this);
}


std::any MavkaParser::Number_tokenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNumber_token(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Number_tokenContext* MavkaParser::number_token() {
  Number_tokenContext *_localctx = _tracker.createInstance<Number_tokenContext>(_ctx, getState());
  enterRule(_localctx, 4, MavkaParser::RuleNumber_token);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(189);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1080863910568919040) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

MavkaParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::StringContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

tree::TerminalNode* MavkaParser::StringContext::STRING_MULTILINE() {
  return getToken(MavkaParser::STRING_MULTILINE, 0);
}


size_t MavkaParser::StringContext::getRuleIndex() const {
  return MavkaParser::RuleString;
}

void MavkaParser::StringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString(this);
}

void MavkaParser::StringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString(this);
}


std::any MavkaParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::StringContext* MavkaParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 6, MavkaParser::RuleString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(191);
    _la = _input->LA(1);
    if (!(_la == MavkaParser::STRING_MULTILINE

    || _la == MavkaParser::STRING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

MavkaParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::IdentifierContext::ID() {
  return getToken(MavkaParser::ID, 0);
}


size_t MavkaParser::IdentifierContext::getRuleIndex() const {
  return MavkaParser::RuleIdentifier;
}

void MavkaParser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void MavkaParser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}


std::any MavkaParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::IdentifierContext* MavkaParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 8, MavkaParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(193);
    match(MavkaParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileContext ------------------------------------------------------------------

MavkaParser::FileContext::FileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::FileContext::EOF() {
  return getToken(MavkaParser::EOF, 0);
}

MavkaParser::ProgramContext* MavkaParser::FileContext::program() {
  return getRuleContext<MavkaParser::ProgramContext>(0);
}


size_t MavkaParser::FileContext::getRuleIndex() const {
  return MavkaParser::RuleFile;
}

void MavkaParser::FileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile(this);
}

void MavkaParser::FileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile(this);
}


std::any MavkaParser::FileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFile(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::FileContext* MavkaParser::file() {
  FileContext *_localctx = _tracker.createInstance<FileContext>(_ctx, getState());
  enterRule(_localctx, 10, MavkaParser::RuleFile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(195);
    antlrcpp::downCast<FileContext *>(_localctx)->f_program = program();
    setState(196);
    match(MavkaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

MavkaParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Program_elementContext *> MavkaParser::ProgramContext::program_element() {
  return getRuleContexts<MavkaParser::Program_elementContext>();
}

MavkaParser::Program_elementContext* MavkaParser::ProgramContext::program_element(size_t i) {
  return getRuleContext<MavkaParser::Program_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::ProgramContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::ProgramContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::ProgramContext::getRuleIndex() const {
  return MavkaParser::RuleProgram;
}

void MavkaParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void MavkaParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}


std::any MavkaParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ProgramContext* MavkaParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 12, MavkaParser::RuleProgram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(198);
    program_element();
    setState(204);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(199);
        nl();
        setState(200);
        program_element(); 
      }
      setState(206);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Program_elementContext ------------------------------------------------------------------

MavkaParser::Program_elementContext::Program_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ModuleContext* MavkaParser::Program_elementContext::module() {
  return getRuleContext<MavkaParser::ModuleContext>(0);
}

MavkaParser::StructureContext* MavkaParser::Program_elementContext::structure() {
  return getRuleContext<MavkaParser::StructureContext>(0);
}

MavkaParser::MockupContext* MavkaParser::Program_elementContext::mockup() {
  return getRuleContext<MavkaParser::MockupContext>(0);
}

MavkaParser::DiiaContext* MavkaParser::Program_elementContext::diia() {
  return getRuleContext<MavkaParser::DiiaContext>(0);
}

MavkaParser::IfContext* MavkaParser::Program_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Program_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Program_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Program_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Program_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Program_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::EvalContext* MavkaParser::Program_elementContext::eval() {
  return getRuleContext<MavkaParser::EvalContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Program_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Program_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::TakeContext* MavkaParser::Program_elementContext::take() {
  return getRuleContext<MavkaParser::TakeContext>(0);
}

MavkaParser::GiveContext* MavkaParser::Program_elementContext::give() {
  return getRuleContext<MavkaParser::GiveContext>(0);
}

MavkaParser::Comp_inst_block_programContext* MavkaParser::Program_elementContext::comp_inst_block_program() {
  return getRuleContext<MavkaParser::Comp_inst_block_programContext>(0);
}

MavkaParser::Comp_inst_assignContext* MavkaParser::Program_elementContext::comp_inst_assign() {
  return getRuleContext<MavkaParser::Comp_inst_assignContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Program_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Program_elementContext::getRuleIndex() const {
  return MavkaParser::RuleProgram_element;
}

void MavkaParser::Program_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram_element(this);
}

void MavkaParser::Program_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram_element(this);
}


std::any MavkaParser::Program_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitProgram_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Program_elementContext* MavkaParser::program_element() {
  Program_elementContext *_localctx = _tracker.createInstance<Program_elementContext>(_ctx, getState());
  enterRule(_localctx, 14, MavkaParser::RuleProgram_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(225);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(207);
      module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(208);
      structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(209);
      mockup();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(210);
      diia();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(211);
      if_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(212);
      each();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(213);
      while_();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(214);
      try_();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(215);
      expr();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(216);
      throw_();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(217);
      eval();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(218);
      wait_assign();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(219);
      assign();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(220);
      take();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(221);
      give();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(222);
      comp_inst_block_program();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(223);
      comp_inst_assign();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(224);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleContext ------------------------------------------------------------------

MavkaParser::ModuleContext::ModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::ModuleContext::KW_MODULE() {
  return getToken(MavkaParser::KW_MODULE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::ModuleContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::ModuleContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::ModuleContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::ModuleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Module_bodyContext* MavkaParser::ModuleContext::module_body() {
  return getRuleContext<MavkaParser::Module_bodyContext>(0);
}


size_t MavkaParser::ModuleContext::getRuleIndex() const {
  return MavkaParser::RuleModule;
}

void MavkaParser::ModuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule(this);
}

void MavkaParser::ModuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule(this);
}


std::any MavkaParser::ModuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ModuleContext* MavkaParser::module() {
  ModuleContext *_localctx = _tracker.createInstance<ModuleContext>(_ctx, getState());
  enterRule(_localctx, 16, MavkaParser::RuleModule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(227);
    match(MavkaParser::KW_MODULE);
    setState(229);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(228);
      antlrcpp::downCast<ModuleContext *>(_localctx)->m_name = identifier();
    }
    setState(231);
    nl();
    setState(235);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5816222546707295876) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 193) != 0)) {
      setState(232);
      antlrcpp::downCast<ModuleContext *>(_localctx)->m_body = module_body();
      setState(233);
      nl();
    }
    setState(237);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_bodyContext ------------------------------------------------------------------

MavkaParser::Module_bodyContext::Module_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Module_body_elementContext *> MavkaParser::Module_bodyContext::module_body_element() {
  return getRuleContexts<MavkaParser::Module_body_elementContext>();
}

MavkaParser::Module_body_elementContext* MavkaParser::Module_bodyContext::module_body_element(size_t i) {
  return getRuleContext<MavkaParser::Module_body_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Module_bodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Module_bodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Module_bodyContext::getRuleIndex() const {
  return MavkaParser::RuleModule_body;
}

void MavkaParser::Module_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_body(this);
}

void MavkaParser::Module_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_body(this);
}


std::any MavkaParser::Module_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule_body(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Module_bodyContext* MavkaParser::module_body() {
  Module_bodyContext *_localctx = _tracker.createInstance<Module_bodyContext>(_ctx, getState());
  enterRule(_localctx, 18, MavkaParser::RuleModule_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(239);
    module_body_element();
    setState(245);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(240);
        nl();
        setState(241);
        module_body_element(); 
      }
      setState(247);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_body_elementContext ------------------------------------------------------------------

MavkaParser::Module_body_elementContext::Module_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ModuleContext* MavkaParser::Module_body_elementContext::module() {
  return getRuleContext<MavkaParser::ModuleContext>(0);
}

MavkaParser::StructureContext* MavkaParser::Module_body_elementContext::structure() {
  return getRuleContext<MavkaParser::StructureContext>(0);
}

MavkaParser::MockupContext* MavkaParser::Module_body_elementContext::mockup() {
  return getRuleContext<MavkaParser::MockupContext>(0);
}

MavkaParser::DiiaContext* MavkaParser::Module_body_elementContext::diia() {
  return getRuleContext<MavkaParser::DiiaContext>(0);
}

MavkaParser::IfContext* MavkaParser::Module_body_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Module_body_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Module_body_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Module_body_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Module_body_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Module_body_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::EvalContext* MavkaParser::Module_body_elementContext::eval() {
  return getRuleContext<MavkaParser::EvalContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Module_body_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Module_body_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::GiveContext* MavkaParser::Module_body_elementContext::give() {
  return getRuleContext<MavkaParser::GiveContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Module_body_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Module_body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleModule_body_element;
}

void MavkaParser::Module_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_body_element(this);
}

void MavkaParser::Module_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_body_element(this);
}


std::any MavkaParser::Module_body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule_body_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Module_body_elementContext* MavkaParser::module_body_element() {
  Module_body_elementContext *_localctx = _tracker.createInstance<Module_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 20, MavkaParser::RuleModule_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(263);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(248);
      module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(249);
      structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(250);
      mockup();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(251);
      diia();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(252);
      if_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(253);
      each();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(254);
      while_();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(255);
      try_();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(256);
      expr();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(257);
      throw_();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(258);
      eval();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(259);
      wait_assign();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(260);
      assign();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(261);
      give();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(262);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureContext ------------------------------------------------------------------

MavkaParser::StructureContext::StructureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::StructureContext::KW_STRUCTURE() {
  return getToken(MavkaParser::KW_STRUCTURE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::StructureContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::StructureContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

MavkaParser::NlsContext* MavkaParser::StructureContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}

tree::TerminalNode* MavkaParser::StructureContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::StructureContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> MavkaParser::StructureContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::StructureContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::StructureContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::StructureContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}

tree::TerminalNode* MavkaParser::StructureContext::KW_IS() {
  return getToken(MavkaParser::KW_IS, 0);
}

std::vector<MavkaParser::GenericsContext *> MavkaParser::StructureContext::generics() {
  return getRuleContexts<MavkaParser::GenericsContext>();
}

MavkaParser::GenericsContext* MavkaParser::StructureContext::generics(size_t i) {
  return getRuleContext<MavkaParser::GenericsContext>(i);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::StructureContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::Structure_elementsContext* MavkaParser::StructureContext::structure_elements() {
  return getRuleContext<MavkaParser::Structure_elementsContext>(0);
}


size_t MavkaParser::StructureContext::getRuleIndex() const {
  return MavkaParser::RuleStructure;
}

void MavkaParser::StructureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure(this);
}

void MavkaParser::StructureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure(this);
}


std::any MavkaParser::StructureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::StructureContext* MavkaParser::structure() {
  StructureContext *_localctx = _tracker.createInstance<StructureContext>(_ctx, getState());
  enterRule(_localctx, 22, MavkaParser::RuleStructure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(265);
    match(MavkaParser::KW_STRUCTURE);
    setState(266);
    antlrcpp::downCast<StructureContext *>(_localctx)->s_name = identifier();
    setState(271);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::LESSER) {
      setState(267);
      match(MavkaParser::LESSER);
      setState(268);
      antlrcpp::downCast<StructureContext *>(_localctx)->s_generics = generics();
      setState(269);
      match(MavkaParser::GREATER);
    }
    setState(281);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_IS) {
      setState(273);
      match(MavkaParser::KW_IS);
      setState(274);
      antlrcpp::downCast<StructureContext *>(_localctx)->s_parent = super_identifiers_chain(0);
      setState(279);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::LESSER) {
        setState(275);
        match(MavkaParser::LESSER);
        setState(276);
        antlrcpp::downCast<StructureContext *>(_localctx)->s_parent_generics = generics();
        setState(277);
        match(MavkaParser::GREATER);
      }
    }
    setState(283);
    nl();
    setState(287);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SPEC

    || _la == MavkaParser::ID) {
      setState(284);
      antlrcpp::downCast<StructureContext *>(_localctx)->s_elements = structure_elements();
      setState(285);
      nl();
    }
    setState(289);
    nls();
    setState(290);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_elementsContext ------------------------------------------------------------------

MavkaParser::Structure_elementsContext::Structure_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Structure_elementContext *> MavkaParser::Structure_elementsContext::structure_element() {
  return getRuleContexts<MavkaParser::Structure_elementContext>();
}

MavkaParser::Structure_elementContext* MavkaParser::Structure_elementsContext::structure_element(size_t i) {
  return getRuleContext<MavkaParser::Structure_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Structure_elementsContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Structure_elementsContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Structure_elementsContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_elements;
}

void MavkaParser::Structure_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_elements(this);
}

void MavkaParser::Structure_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_elements(this);
}


std::any MavkaParser::Structure_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_elements(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_elementsContext* MavkaParser::structure_elements() {
  Structure_elementsContext *_localctx = _tracker.createInstance<Structure_elementsContext>(_ctx, getState());
  enterRule(_localctx, 24, MavkaParser::RuleStructure_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(292);
    structure_element();
    setState(298);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(293);
        nl();
        setState(294);
        structure_element(); 
      }
      setState(300);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_elementContext ------------------------------------------------------------------

MavkaParser::Structure_elementContext::Structure_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Structure_paramContext* MavkaParser::Structure_elementContext::structure_param() {
  return getRuleContext<MavkaParser::Structure_paramContext>(0);
}


size_t MavkaParser::Structure_elementContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_element;
}

void MavkaParser::Structure_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_element(this);
}

void MavkaParser::Structure_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_element(this);
}


std::any MavkaParser::Structure_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_elementContext* MavkaParser::structure_element() {
  Structure_elementContext *_localctx = _tracker.createInstance<Structure_elementContext>(_ctx, getState());
  enterRule(_localctx, 26, MavkaParser::RuleStructure_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(301);
    structure_param();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_paramContext ------------------------------------------------------------------

MavkaParser::Structure_paramContext::Structure_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Structure_paramContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Structure_paramContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

tree::TerminalNode* MavkaParser::Structure_paramContext::KW_SPEC() {
  return getToken(MavkaParser::KW_SPEC, 0);
}

MavkaParser::Type_valueContext* MavkaParser::Structure_paramContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::Param_valueContext* MavkaParser::Structure_paramContext::param_value() {
  return getRuleContext<MavkaParser::Param_valueContext>(0);
}


size_t MavkaParser::Structure_paramContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_param;
}

void MavkaParser::Structure_paramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_param(this);
}

void MavkaParser::Structure_paramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_param(this);
}


std::any MavkaParser::Structure_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_param(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_paramContext* MavkaParser::structure_param() {
  Structure_paramContext *_localctx = _tracker.createInstance<Structure_paramContext>(_ctx, getState());
  enterRule(_localctx, 28, MavkaParser::RuleStructure_param);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(304);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SPEC) {
      setState(303);
      antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_static = match(MavkaParser::KW_SPEC);
    }
    setState(306);
    antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_name = identifier();
    setState(308);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::BRACKET_OPEN

    || _la == MavkaParser::ID) {
      setState(307);
      antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_type = type_value();
    }
    setState(312);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::EQUAL) {
      setState(310);
      match(MavkaParser::EQUAL);
      setState(311);
      antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_value = param_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericsContext ------------------------------------------------------------------

MavkaParser::GenericsContext::GenericsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::GenericsContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::GenericsContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::GenericsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::GenericsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::GenericsContext::getRuleIndex() const {
  return MavkaParser::RuleGenerics;
}

void MavkaParser::GenericsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenerics(this);
}

void MavkaParser::GenericsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenerics(this);
}


std::any MavkaParser::GenericsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGenerics(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::GenericsContext* MavkaParser::generics() {
  GenericsContext *_localctx = _tracker.createInstance<GenericsContext>(_ctx, getState());
  enterRule(_localctx, 30, MavkaParser::RuleGenerics);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(314);
    identifier();
    setState(319);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMA) {
      setState(315);
      match(MavkaParser::COMA);
      setState(316);
      identifier();
      setState(321);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MockupContext ------------------------------------------------------------------

MavkaParser::MockupContext::MockupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Mockup_moduleContext* MavkaParser::MockupContext::mockup_module() {
  return getRuleContext<MavkaParser::Mockup_moduleContext>(0);
}

MavkaParser::Mockup_structureContext* MavkaParser::MockupContext::mockup_structure() {
  return getRuleContext<MavkaParser::Mockup_structureContext>(0);
}

MavkaParser::Mockup_diiaContext* MavkaParser::MockupContext::mockup_diia() {
  return getRuleContext<MavkaParser::Mockup_diiaContext>(0);
}

MavkaParser::Mockup_subjectContext* MavkaParser::MockupContext::mockup_subject() {
  return getRuleContext<MavkaParser::Mockup_subjectContext>(0);
}


size_t MavkaParser::MockupContext::getRuleIndex() const {
  return MavkaParser::RuleMockup;
}

void MavkaParser::MockupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup(this);
}

void MavkaParser::MockupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup(this);
}


std::any MavkaParser::MockupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::MockupContext* MavkaParser::mockup() {
  MockupContext *_localctx = _tracker.createInstance<MockupContext>(_ctx, getState());
  enterRule(_localctx, 32, MavkaParser::RuleMockup);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(326);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(322);
      mockup_module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(323);
      mockup_structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(324);
      mockup_diia();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(325);
      mockup_subject();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_moduleContext ------------------------------------------------------------------

MavkaParser::Mockup_moduleContext::Mockup_moduleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::KW_MOCKUP() {
  return getToken(MavkaParser::KW_MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::KW_MODULE() {
  return getToken(MavkaParser::KW_MODULE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_moduleContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_moduleContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_moduleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Mockup_module_bodyContext* MavkaParser::Mockup_moduleContext::mockup_module_body() {
  return getRuleContext<MavkaParser::Mockup_module_bodyContext>(0);
}


size_t MavkaParser::Mockup_moduleContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_module;
}

void MavkaParser::Mockup_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_module(this);
}

void MavkaParser::Mockup_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_module(this);
}


std::any MavkaParser::Mockup_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_module(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_moduleContext* MavkaParser::mockup_module() {
  Mockup_moduleContext *_localctx = _tracker.createInstance<Mockup_moduleContext>(_ctx, getState());
  enterRule(_localctx, 34, MavkaParser::RuleMockup_module);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(328);
    match(MavkaParser::KW_MOCKUP);
    setState(329);
    match(MavkaParser::KW_MODULE);
    setState(330);
    antlrcpp::downCast<Mockup_moduleContext *>(_localctx)->mm_name = identifier();
    setState(331);
    nl();
    setState(335);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_MOCKUP) {
      setState(332);
      antlrcpp::downCast<Mockup_moduleContext *>(_localctx)->mm_elements = mockup_module_body();
      setState(333);
      nl();
    }
    setState(337);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_module_bodyContext ------------------------------------------------------------------

MavkaParser::Mockup_module_bodyContext::Mockup_module_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::MockupContext *> MavkaParser::Mockup_module_bodyContext::mockup() {
  return getRuleContexts<MavkaParser::MockupContext>();
}

MavkaParser::MockupContext* MavkaParser::Mockup_module_bodyContext::mockup(size_t i) {
  return getRuleContext<MavkaParser::MockupContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_module_bodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_module_bodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Mockup_module_bodyContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_module_body;
}

void MavkaParser::Mockup_module_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_module_body(this);
}

void MavkaParser::Mockup_module_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_module_body(this);
}


std::any MavkaParser::Mockup_module_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_module_body(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_module_bodyContext* MavkaParser::mockup_module_body() {
  Mockup_module_bodyContext *_localctx = _tracker.createInstance<Mockup_module_bodyContext>(_ctx, getState());
  enterRule(_localctx, 36, MavkaParser::RuleMockup_module_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(339);
    mockup();
    setState(345);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(340);
        nl();
        setState(341);
        mockup(); 
      }
      setState(347);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_structureContext ------------------------------------------------------------------

MavkaParser::Mockup_structureContext::Mockup_structureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::KW_MOCKUP() {
  return getToken(MavkaParser::KW_MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::KW_STRUCTURE() {
  return getToken(MavkaParser::KW_STRUCTURE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_structureContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_structureContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_structureContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> MavkaParser::Mockup_structureContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Mockup_structureContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::KW_IS() {
  return getToken(MavkaParser::KW_IS, 0);
}

std::vector<MavkaParser::GenericsContext *> MavkaParser::Mockup_structureContext::generics() {
  return getRuleContexts<MavkaParser::GenericsContext>();
}

MavkaParser::GenericsContext* MavkaParser::Mockup_structureContext::generics(size_t i) {
  return getRuleContext<MavkaParser::GenericsContext>(i);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Mockup_structureContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::Mockup_structure_bodyContext* MavkaParser::Mockup_structureContext::mockup_structure_body() {
  return getRuleContext<MavkaParser::Mockup_structure_bodyContext>(0);
}


size_t MavkaParser::Mockup_structureContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_structure;
}

void MavkaParser::Mockup_structureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_structure(this);
}

void MavkaParser::Mockup_structureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_structure(this);
}


std::any MavkaParser::Mockup_structureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_structure(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_structureContext* MavkaParser::mockup_structure() {
  Mockup_structureContext *_localctx = _tracker.createInstance<Mockup_structureContext>(_ctx, getState());
  enterRule(_localctx, 38, MavkaParser::RuleMockup_structure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(348);
    match(MavkaParser::KW_MOCKUP);
    setState(349);
    match(MavkaParser::KW_STRUCTURE);
    setState(350);
    antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_name = identifier();
    setState(355);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::LESSER) {
      setState(351);
      match(MavkaParser::LESSER);
      setState(352);
      antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_generics = generics();
      setState(353);
      match(MavkaParser::GREATER);
    }
    setState(365);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_IS) {
      setState(357);
      match(MavkaParser::KW_IS);
      setState(358);
      antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_parent = super_identifiers_chain(0);
      setState(363);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::LESSER) {
        setState(359);
        match(MavkaParser::LESSER);
        setState(360);
        antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_parent_generics = generics();
        setState(361);
        match(MavkaParser::GREATER);
      }
    }
    setState(367);
    nl();
    setState(371);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SPEC

    || _la == MavkaParser::ID) {
      setState(368);
      antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_elements = mockup_structure_body();
      setState(369);
      nl();
    }
    setState(373);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_structure_bodyContext ------------------------------------------------------------------

MavkaParser::Mockup_structure_bodyContext::Mockup_structure_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Mockup_structure_body_elementContext *> MavkaParser::Mockup_structure_bodyContext::mockup_structure_body_element() {
  return getRuleContexts<MavkaParser::Mockup_structure_body_elementContext>();
}

MavkaParser::Mockup_structure_body_elementContext* MavkaParser::Mockup_structure_bodyContext::mockup_structure_body_element(size_t i) {
  return getRuleContext<MavkaParser::Mockup_structure_body_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_structure_bodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_structure_bodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Mockup_structure_bodyContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_structure_body;
}

void MavkaParser::Mockup_structure_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_structure_body(this);
}

void MavkaParser::Mockup_structure_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_structure_body(this);
}


std::any MavkaParser::Mockup_structure_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_structure_body(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_structure_bodyContext* MavkaParser::mockup_structure_body() {
  Mockup_structure_bodyContext *_localctx = _tracker.createInstance<Mockup_structure_bodyContext>(_ctx, getState());
  enterRule(_localctx, 40, MavkaParser::RuleMockup_structure_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(375);
    mockup_structure_body_element();
    setState(381);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(376);
        nl();
        setState(377);
        mockup_structure_body_element(); 
      }
      setState(383);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_structure_body_elementContext ------------------------------------------------------------------

MavkaParser::Mockup_structure_body_elementContext::Mockup_structure_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Structure_paramContext* MavkaParser::Mockup_structure_body_elementContext::structure_param() {
  return getRuleContext<MavkaParser::Structure_paramContext>(0);
}


size_t MavkaParser::Mockup_structure_body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_structure_body_element;
}

void MavkaParser::Mockup_structure_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_structure_body_element(this);
}

void MavkaParser::Mockup_structure_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_structure_body_element(this);
}


std::any MavkaParser::Mockup_structure_body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_structure_body_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_structure_body_elementContext* MavkaParser::mockup_structure_body_element() {
  Mockup_structure_body_elementContext *_localctx = _tracker.createInstance<Mockup_structure_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 42, MavkaParser::RuleMockup_structure_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(384);
    structure_param();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_diiaContext ------------------------------------------------------------------

MavkaParser::Mockup_diiaContext::Mockup_diiaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::KW_MOCKUP() {
  return getToken(MavkaParser::KW_MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::KW_DIIA() {
  return getToken(MavkaParser::KW_DIIA, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mockup_diiaContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mockup_diiaContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::Mockup_diiaContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_diiaContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::KW_ASYNC() {
  return getToken(MavkaParser::KW_ASYNC, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::KW_SPEC() {
  return getToken(MavkaParser::KW_SPEC, 0);
}

MavkaParser::GenericsContext* MavkaParser::Mockup_diiaContext::generics() {
  return getRuleContext<MavkaParser::GenericsContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::Mockup_diiaContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::Mockup_diiaContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::Mockup_diiaContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_diia;
}

void MavkaParser::Mockup_diiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_diia(this);
}

void MavkaParser::Mockup_diiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_diia(this);
}


std::any MavkaParser::Mockup_diiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_diia(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_diiaContext* MavkaParser::mockup_diia() {
  Mockup_diiaContext *_localctx = _tracker.createInstance<Mockup_diiaContext>(_ctx, getState());
  enterRule(_localctx, 44, MavkaParser::RuleMockup_diia);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(386);
    match(MavkaParser::KW_MOCKUP);
    setState(388);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_ASYNC) {
      setState(387);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_async = match(MavkaParser::KW_ASYNC);
    }
    setState(391);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SPEC) {
      setState(390);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_static = match(MavkaParser::KW_SPEC);
    }
    setState(393);
    match(MavkaParser::KW_DIIA);
    setState(397);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      setState(394);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_structure = identifier();
      setState(395);
      match(MavkaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(399);
    antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_name = identifier();
    setState(404);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::LESSER) {
      setState(400);
      match(MavkaParser::LESSER);
      setState(401);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_generics = generics();
      setState(402);
      match(MavkaParser::GREATER);
    }
    setState(406);
    match(MavkaParser::PAREN_OPEN);
    setState(407);
    nls();
    setState(409);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::DOT

    || _la == MavkaParser::ID) {
      setState(408);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_params = params();
    }
    setState(411);
    nls();
    setState(412);
    match(MavkaParser::PAREN_CLOSE);
    setState(414);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::BRACKET_OPEN

    || _la == MavkaParser::ID) {
      setState(413);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_type = type_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_subjectContext ------------------------------------------------------------------

MavkaParser::Mockup_subjectContext::Mockup_subjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_subjectContext::KW_MOCKUP() {
  return getToken(MavkaParser::KW_MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_subjectContext::KW_SUBJECT() {
  return getToken(MavkaParser::KW_SUBJECT, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_subjectContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::Mockup_subjectContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::Mockup_subjectContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_subject;
}

void MavkaParser::Mockup_subjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_subject(this);
}

void MavkaParser::Mockup_subjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_subject(this);
}


std::any MavkaParser::Mockup_subjectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_subject(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_subjectContext* MavkaParser::mockup_subject() {
  Mockup_subjectContext *_localctx = _tracker.createInstance<Mockup_subjectContext>(_ctx, getState());
  enterRule(_localctx, 46, MavkaParser::RuleMockup_subject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(416);
    match(MavkaParser::KW_MOCKUP);
    setState(417);
    match(MavkaParser::KW_SUBJECT);
    setState(418);
    antlrcpp::downCast<Mockup_subjectContext *>(_localctx)->ms_name = identifier();
    setState(419);
    antlrcpp::downCast<Mockup_subjectContext *>(_localctx)->ms_type = type_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiiaContext ------------------------------------------------------------------

MavkaParser::DiiaContext::DiiaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::DiiaContext::KW_DIIA() {
  return getToken(MavkaParser::KW_DIIA, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::DiiaContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::DiiaContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::DiiaContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::DiiaContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::DiiaContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::DiiaContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::DiiaContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::DiiaContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

tree::TerminalNode* MavkaParser::DiiaContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::KW_ASYNC() {
  return getToken(MavkaParser::KW_ASYNC, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::KW_SPEC() {
  return getToken(MavkaParser::KW_SPEC, 0);
}

MavkaParser::GenericsContext* MavkaParser::DiiaContext::generics() {
  return getRuleContext<MavkaParser::GenericsContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::DiiaContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::DiiaContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::BodyContext* MavkaParser::DiiaContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}


size_t MavkaParser::DiiaContext::getRuleIndex() const {
  return MavkaParser::RuleDiia;
}

void MavkaParser::DiiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiia(this);
}

void MavkaParser::DiiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiia(this);
}


std::any MavkaParser::DiiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDiia(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::DiiaContext* MavkaParser::diia() {
  DiiaContext *_localctx = _tracker.createInstance<DiiaContext>(_ctx, getState());
  enterRule(_localctx, 48, MavkaParser::RuleDiia);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(422);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_ASYNC) {
      setState(421);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_async = match(MavkaParser::KW_ASYNC);
    }
    setState(425);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SPEC) {
      setState(424);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_static = match(MavkaParser::KW_SPEC);
    }
    setState(427);
    match(MavkaParser::KW_DIIA);
    setState(431);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(428);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_structure = identifier();
      setState(429);
      match(MavkaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(433);
    antlrcpp::downCast<DiiaContext *>(_localctx)->d_name = identifier();
    setState(438);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::LESSER) {
      setState(434);
      match(MavkaParser::LESSER);
      setState(435);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_generics = generics();
      setState(436);
      match(MavkaParser::GREATER);
    }
    setState(440);
    match(MavkaParser::PAREN_OPEN);
    setState(441);
    nls();
    setState(443);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::DOT

    || _la == MavkaParser::ID) {
      setState(442);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_params = params();
    }
    setState(445);
    nls();
    setState(446);
    match(MavkaParser::PAREN_CLOSE);
    setState(448);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::BRACKET_OPEN

    || _la == MavkaParser::ID) {
      setState(447);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_type = type_value();
    }
    setState(450);
    nl();
    setState(454);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5816222548057857932) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 193) != 0)) {
      setState(451);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_body = body();
      setState(452);
      nl();
    }
    setState(456);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfContext ------------------------------------------------------------------

MavkaParser::IfContext::IfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::IfContext::KW_IF() {
  return getToken(MavkaParser::KW_IF, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::IfContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::IfContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

MavkaParser::ExprContext* MavkaParser::IfContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

std::vector<MavkaParser::BodyContext *> MavkaParser::IfContext::body() {
  return getRuleContexts<MavkaParser::BodyContext>();
}

MavkaParser::BodyContext* MavkaParser::IfContext::body(size_t i) {
  return getRuleContext<MavkaParser::BodyContext>(i);
}

tree::TerminalNode* MavkaParser::IfContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

tree::TerminalNode* MavkaParser::IfContext::KW_ELSE() {
  return getToken(MavkaParser::KW_ELSE, 0);
}

MavkaParser::IfContext* MavkaParser::IfContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}


size_t MavkaParser::IfContext::getRuleIndex() const {
  return MavkaParser::RuleIf;
}

void MavkaParser::IfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf(this);
}

void MavkaParser::IfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf(this);
}


std::any MavkaParser::IfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIf(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::IfContext* MavkaParser::if_() {
  IfContext *_localctx = _tracker.createInstance<IfContext>(_ctx, getState());
  enterRule(_localctx, 50, MavkaParser::RuleIf);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(458);
    match(MavkaParser::KW_IF);
    setState(459);
    antlrcpp::downCast<IfContext *>(_localctx)->i_value = expr();
    setState(460);
    nl();
    setState(464);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5816222548057857932) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 193) != 0)) {
      setState(461);
      antlrcpp::downCast<IfContext *>(_localctx)->i_body = body();
      setState(462);
      nl();
    }
    setState(476);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      setState(471);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::KW_ELSE) {
        setState(466);
        match(MavkaParser::KW_ELSE);
        setState(467);
        nl();
        setState(468);
        antlrcpp::downCast<IfContext *>(_localctx)->i_else_body = body();
        setState(469);
        nl();
      }
      setState(473);
      match(MavkaParser::KW_END);
      break;
    }

    case 2: {
      setState(474);
      match(MavkaParser::KW_ELSE);
      setState(475);
      antlrcpp::downCast<IfContext *>(_localctx)->i_else_if = if_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EachContext ------------------------------------------------------------------

MavkaParser::EachContext::EachContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::EachContext::KW_FOR() {
  return getToken(MavkaParser::KW_FOR, 0);
}

tree::TerminalNode* MavkaParser::EachContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::EachContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::EachContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::EachContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::AtomContext* MavkaParser::EachContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::FromtoContext* MavkaParser::EachContext::fromto() {
  return getRuleContext<MavkaParser::FromtoContext>(0);
}

tree::TerminalNode* MavkaParser::EachContext::COMA() {
  return getToken(MavkaParser::COMA, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::EachContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::EachContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

MavkaParser::BodyContext* MavkaParser::EachContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}


size_t MavkaParser::EachContext::getRuleIndex() const {
  return MavkaParser::RuleEach;
}

void MavkaParser::EachContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEach(this);
}

void MavkaParser::EachContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEach(this);
}


std::any MavkaParser::EachContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitEach(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::EachContext* MavkaParser::each() {
  EachContext *_localctx = _tracker.createInstance<EachContext>(_ctx, getState());
  enterRule(_localctx, 52, MavkaParser::RuleEach);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(478);
    match(MavkaParser::KW_FOR);
    setState(481);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      setState(479);
      antlrcpp::downCast<EachContext *>(_localctx)->e_iterator = atom(0);
      break;
    }

    case 2: {
      setState(480);
      antlrcpp::downCast<EachContext *>(_localctx)->e_fromto = fromto();
      break;
    }

    default:
      break;
    }
    setState(483);
    match(MavkaParser::KW_AS);
    setState(487);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      setState(484);
      antlrcpp::downCast<EachContext *>(_localctx)->e_key_name = identifier();
      setState(485);
      match(MavkaParser::COMA);
      break;
    }

    default:
      break;
    }
    setState(490);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(489);
      antlrcpp::downCast<EachContext *>(_localctx)->e_name = identifier();
    }
    setState(492);
    nl();
    setState(496);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5816222548057857932) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 193) != 0)) {
      setState(493);
      antlrcpp::downCast<EachContext *>(_localctx)->e_body = body();
      setState(494);
      nl();
    }
    setState(498);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromtoContext ------------------------------------------------------------------

MavkaParser::FromtoContext::FromtoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Fromto_simpleContext* MavkaParser::FromtoContext::fromto_simple() {
  return getRuleContext<MavkaParser::Fromto_simpleContext>(0);
}

MavkaParser::Fromto_complexContext* MavkaParser::FromtoContext::fromto_complex() {
  return getRuleContext<MavkaParser::Fromto_complexContext>(0);
}


size_t MavkaParser::FromtoContext::getRuleIndex() const {
  return MavkaParser::RuleFromto;
}

void MavkaParser::FromtoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto(this);
}

void MavkaParser::FromtoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto(this);
}


std::any MavkaParser::FromtoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::FromtoContext* MavkaParser::fromto() {
  FromtoContext *_localctx = _tracker.createInstance<FromtoContext>(_ctx, getState());
  enterRule(_localctx, 54, MavkaParser::RuleFromto);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(502);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(500);
      fromto_simple();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(501);
      fromto_complex();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_simpleContext ------------------------------------------------------------------

MavkaParser::Fromto_simpleContext::Fromto_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_simpleContext::DOT() {
  return getTokens(MavkaParser::DOT);
}

tree::TerminalNode* MavkaParser::Fromto_simpleContext::DOT(size_t i) {
  return getToken(MavkaParser::DOT, i);
}

std::vector<MavkaParser::Fromto_valueContext *> MavkaParser::Fromto_simpleContext::fromto_value() {
  return getRuleContexts<MavkaParser::Fromto_valueContext>();
}

MavkaParser::Fromto_valueContext* MavkaParser::Fromto_simpleContext::fromto_value(size_t i) {
  return getRuleContext<MavkaParser::Fromto_valueContext>(i);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::Fromto_simpleContext::fromto_to_symbol() {
  return getRuleContext<MavkaParser::Fromto_to_symbolContext>(0);
}


size_t MavkaParser::Fromto_simpleContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_simple;
}

void MavkaParser::Fromto_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_simple(this);
}

void MavkaParser::Fromto_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_simple(this);
}


std::any MavkaParser::Fromto_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_simple(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_simpleContext* MavkaParser::fromto_simple() {
  Fromto_simpleContext *_localctx = _tracker.createInstance<Fromto_simpleContext>(_ctx, getState());
  enterRule(_localctx, 56, MavkaParser::RuleFromto_simple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(504);
    antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_from = fromto_value();
    setState(505);
    match(MavkaParser::DOT);
    setState(506);
    match(MavkaParser::DOT);
    setState(508);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18014458639024128) != 0)) {
      setState(507);
      antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_to_symbol = fromto_to_symbol();
    }
    setState(510);
    antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_to = fromto_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_complexContext ------------------------------------------------------------------

MavkaParser::Fromto_complexContext::Fromto_complexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_complexContext::DOT() {
  return getTokens(MavkaParser::DOT);
}

tree::TerminalNode* MavkaParser::Fromto_complexContext::DOT(size_t i) {
  return getToken(MavkaParser::DOT, i);
}

std::vector<MavkaParser::Fromto_valueContext *> MavkaParser::Fromto_complexContext::fromto_value() {
  return getRuleContexts<MavkaParser::Fromto_valueContext>();
}

MavkaParser::Fromto_valueContext* MavkaParser::Fromto_complexContext::fromto_value(size_t i) {
  return getRuleContext<MavkaParser::Fromto_valueContext>(i);
}

MavkaParser::Fromto_middle_symbolContext* MavkaParser::Fromto_complexContext::fromto_middle_symbol() {
  return getRuleContext<MavkaParser::Fromto_middle_symbolContext>(0);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::Fromto_complexContext::fromto_to_symbol() {
  return getRuleContext<MavkaParser::Fromto_to_symbolContext>(0);
}


size_t MavkaParser::Fromto_complexContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_complex;
}

void MavkaParser::Fromto_complexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_complex(this);
}

void MavkaParser::Fromto_complexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_complex(this);
}


std::any MavkaParser::Fromto_complexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_complex(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_complexContext* MavkaParser::fromto_complex() {
  Fromto_complexContext *_localctx = _tracker.createInstance<Fromto_complexContext>(_ctx, getState());
  enterRule(_localctx, 58, MavkaParser::RuleFromto_complex);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(512);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_from = fromto_value();
    setState(513);
    match(MavkaParser::DOT);
    setState(514);
    match(MavkaParser::DOT);
    setState(516);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4260607557632) != 0)) {
      setState(515);
      antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_middle_symbol = fromto_middle_symbol();
    }
    setState(518);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_middle = fromto_value();
    setState(519);
    match(MavkaParser::DOT);
    setState(520);
    match(MavkaParser::DOT);
    setState(522);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18014458639024128) != 0)) {
      setState(521);
      antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_to_symbol = fromto_to_symbol();
    }
    setState(524);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_to = fromto_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_valueContext ------------------------------------------------------------------

MavkaParser::Fromto_valueContext::Fromto_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::Fromto_valueContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_value;
}

void MavkaParser::Fromto_valueContext::copyFrom(Fromto_valueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Fromto_idContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::Fromto_idContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Fromto_idContext::Fromto_idContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_idContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_id(this);
}
void MavkaParser::Fromto_idContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_id(this);
}

std::any MavkaParser::Fromto_idContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_id(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Fromto_numberContext ------------------------------------------------------------------

MavkaParser::Number_tokenContext* MavkaParser::Fromto_numberContext::number_token() {
  return getRuleContext<MavkaParser::Number_tokenContext>(0);
}

MavkaParser::Fromto_numberContext::Fromto_numberContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_numberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_number(this);
}
void MavkaParser::Fromto_numberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_number(this);
}

std::any MavkaParser::Fromto_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_number(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Fromto_nestedContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Fromto_nestedContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Fromto_nestedContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Fromto_nestedContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Fromto_nestedContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::ExprContext* MavkaParser::Fromto_nestedContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::Fromto_nestedContext::Fromto_nestedContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_nestedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_nested(this);
}
void MavkaParser::Fromto_nestedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_nested(this);
}

std::any MavkaParser::Fromto_nestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_nested(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::Fromto_valueContext* MavkaParser::fromto_value() {
  Fromto_valueContext *_localctx = _tracker.createInstance<Fromto_valueContext>(_ctx, getState());
  enterRule(_localctx, 60, MavkaParser::RuleFromto_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(534);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::INTEGER:
      case MavkaParser::FLOAT:
      case MavkaParser::HEX:
      case MavkaParser::BIN: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_numberContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(526);
        number_token();
        break;
      }

      case MavkaParser::ID: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_idContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(527);
        identifier();
        break;
      }

      case MavkaParser::PAREN_OPEN: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_nestedContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(528);
        match(MavkaParser::PAREN_OPEN);
        setState(529);
        nls();
        setState(530);
        antlrcpp::downCast<Fromto_nestedContext *>(_localctx)->fn_value = expr();
        setState(531);
        nls();
        setState(532);
        match(MavkaParser::PAREN_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_middle_symbolContext ------------------------------------------------------------------

MavkaParser::Fromto_middle_symbolContext::Fromto_middle_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_middle_symbolContext::MULTIPLY() {
  return getTokens(MavkaParser::MULTIPLY);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::MULTIPLY(size_t i) {
  return getToken(MavkaParser::MULTIPLY, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_middle_symbolContext::DIVIDE() {
  return getTokens(MavkaParser::DIVIDE);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::DIVIDE(size_t i) {
  return getToken(MavkaParser::DIVIDE, i);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::MOD() {
  return getToken(MavkaParser::MOD, 0);
}


size_t MavkaParser::Fromto_middle_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_middle_symbol;
}

void MavkaParser::Fromto_middle_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_middle_symbol(this);
}

void MavkaParser::Fromto_middle_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_middle_symbol(this);
}


std::any MavkaParser::Fromto_middle_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_middle_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_middle_symbolContext* MavkaParser::fromto_middle_symbol() {
  Fromto_middle_symbolContext *_localctx = _tracker.createInstance<Fromto_middle_symbolContext>(_ctx, getState());
  enterRule(_localctx, 62, MavkaParser::RuleFromto_middle_symbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(545);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(536);
      match(MavkaParser::PLUS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(537);
      match(MavkaParser::MINUS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(538);
      match(MavkaParser::MULTIPLY);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(539);
      match(MavkaParser::DIVIDE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(540);
      match(MavkaParser::MOD);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(541);
      match(MavkaParser::DIVIDE);
      setState(542);
      match(MavkaParser::DIVIDE);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(543);
      match(MavkaParser::MULTIPLY);
      setState(544);
      match(MavkaParser::MULTIPLY);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_to_symbolContext ------------------------------------------------------------------

MavkaParser::Fromto_to_symbolContext::Fromto_to_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::EXCLAMATION() {
  return getToken(MavkaParser::EXCLAMATION, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_to_symbolContext::EQUAL() {
  return getTokens(MavkaParser::EQUAL);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::EQUAL(size_t i) {
  return getToken(MavkaParser::EQUAL, i);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}


size_t MavkaParser::Fromto_to_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_to_symbol;
}

void MavkaParser::Fromto_to_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_to_symbol(this);
}

void MavkaParser::Fromto_to_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_to_symbol(this);
}


std::any MavkaParser::Fromto_to_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_to_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::fromto_to_symbol() {
  Fromto_to_symbolContext *_localctx = _tracker.createInstance<Fromto_to_symbolContext>(_ctx, getState());
  enterRule(_localctx, 64, MavkaParser::RuleFromto_to_symbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(557);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(547);
      match(MavkaParser::EXCLAMATION);
      setState(548);
      match(MavkaParser::EQUAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(549);
      match(MavkaParser::EQUAL);
      setState(550);
      match(MavkaParser::EQUAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(551);
      match(MavkaParser::GREATER);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(552);
      match(MavkaParser::LESSER);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(553);
      match(MavkaParser::GREATER);
      setState(554);
      match(MavkaParser::EQUAL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(555);
      match(MavkaParser::LESSER);
      setState(556);
      match(MavkaParser::EQUAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileContext ------------------------------------------------------------------

MavkaParser::WhileContext::WhileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::WhileContext::KW_WHILE() {
  return getToken(MavkaParser::KW_WHILE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::WhileContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::WhileContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::WhileContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::ExprContext* MavkaParser::WhileContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::BodyContext* MavkaParser::WhileContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}


size_t MavkaParser::WhileContext::getRuleIndex() const {
  return MavkaParser::RuleWhile;
}

void MavkaParser::WhileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhile(this);
}

void MavkaParser::WhileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhile(this);
}


std::any MavkaParser::WhileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWhile(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::WhileContext* MavkaParser::while_() {
  WhileContext *_localctx = _tracker.createInstance<WhileContext>(_ctx, getState());
  enterRule(_localctx, 66, MavkaParser::RuleWhile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(559);
    match(MavkaParser::KW_WHILE);
    setState(560);
    antlrcpp::downCast<WhileContext *>(_localctx)->w_value = expr();
    setState(561);
    nl();
    setState(565);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5816222548057857932) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 193) != 0)) {
      setState(562);
      antlrcpp::downCast<WhileContext *>(_localctx)->w_body = body();
      setState(563);
      nl();
    }
    setState(567);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryContext ------------------------------------------------------------------

MavkaParser::TryContext::TryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::TryContext::KW_TRY() {
  return getToken(MavkaParser::KW_TRY, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::TryContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::TryContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::TryContext::KW_CATCH() {
  return getToken(MavkaParser::KW_CATCH, 0);
}

tree::TerminalNode* MavkaParser::TryContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

std::vector<MavkaParser::BodyContext *> MavkaParser::TryContext::body() {
  return getRuleContexts<MavkaParser::BodyContext>();
}

MavkaParser::BodyContext* MavkaParser::TryContext::body(size_t i) {
  return getRuleContext<MavkaParser::BodyContext>(i);
}

MavkaParser::IdentifierContext* MavkaParser::TryContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}


size_t MavkaParser::TryContext::getRuleIndex() const {
  return MavkaParser::RuleTry;
}

void MavkaParser::TryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry(this);
}

void MavkaParser::TryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry(this);
}


std::any MavkaParser::TryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTry(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::TryContext* MavkaParser::try_() {
  TryContext *_localctx = _tracker.createInstance<TryContext>(_ctx, getState());
  enterRule(_localctx, 68, MavkaParser::RuleTry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(569);
    match(MavkaParser::KW_TRY);
    setState(570);
    nl();
    setState(574);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5816222548057857932) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 193) != 0)) {
      setState(571);
      antlrcpp::downCast<TryContext *>(_localctx)->t_body = body();
      setState(572);
      nl();
    }
    setState(576);
    match(MavkaParser::KW_CATCH);
    setState(578);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(577);
      antlrcpp::downCast<TryContext *>(_localctx)->tc_name = identifier();
    }
    setState(580);
    nl();
    setState(584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5816222548057857932) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 193) != 0)) {
      setState(581);
      antlrcpp::downCast<TryContext *>(_localctx)->tc_body = body();
      setState(582);
      nl();
    }
    setState(586);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvalContext ------------------------------------------------------------------

MavkaParser::EvalContext::EvalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::EvalContext::KW_JS() {
  return getToken(MavkaParser::KW_JS, 0);
}

MavkaParser::StringContext* MavkaParser::EvalContext::string() {
  return getRuleContext<MavkaParser::StringContext>(0);
}


size_t MavkaParser::EvalContext::getRuleIndex() const {
  return MavkaParser::RuleEval;
}

void MavkaParser::EvalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEval(this);
}

void MavkaParser::EvalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEval(this);
}


std::any MavkaParser::EvalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitEval(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::EvalContext* MavkaParser::eval() {
  EvalContext *_localctx = _tracker.createInstance<EvalContext>(_ctx, getState());
  enterRule(_localctx, 70, MavkaParser::RuleEval);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(588);
    match(MavkaParser::KW_JS);
    setState(589);
    antlrcpp::downCast<EvalContext *>(_localctx)->e_value = string();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TakeContext ------------------------------------------------------------------

MavkaParser::TakeContext::TakeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::TakeContext::getRuleIndex() const {
  return MavkaParser::RuleTake;
}

void MavkaParser::TakeContext::copyFrom(TakeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Take_moduleContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Take_moduleContext::KW_TAKE() {
  return getToken(MavkaParser::KW_TAKE, 0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::Take_moduleContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}

tree::TerminalNode* MavkaParser::Take_moduleContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Take_module_elementsContext* MavkaParser::Take_moduleContext::take_module_elements() {
  return getRuleContext<MavkaParser::Take_module_elementsContext>(0);
}

tree::TerminalNode* MavkaParser::Take_moduleContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Take_moduleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Take_moduleContext::Take_moduleContext(TakeContext *ctx) { copyFrom(ctx); }

void MavkaParser::Take_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_module(this);
}
void MavkaParser::Take_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_module(this);
}

std::any MavkaParser::Take_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_module(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Take_remoteContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Take_remoteContext::KW_TAKE() {
  return getToken(MavkaParser::KW_TAKE, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::Take_remoteContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::Take_remoteContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Take_remoteContext::STRING() {
  return getTokens(MavkaParser::STRING);
}

tree::TerminalNode* MavkaParser::Take_remoteContext::STRING(size_t i) {
  return getToken(MavkaParser::STRING, i);
}

tree::TerminalNode* MavkaParser::Take_remoteContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}

MavkaParser::Take_remoteContext::Take_remoteContext(TakeContext *ctx) { copyFrom(ctx); }

void MavkaParser::Take_remoteContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_remote(this);
}
void MavkaParser::Take_remoteContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_remote(this);
}

std::any MavkaParser::Take_remoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_remote(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::TakeContext* MavkaParser::take() {
  TakeContext *_localctx = _tracker.createInstance<TakeContext>(_ctx, getState());
  enterRule(_localctx, 72, MavkaParser::RuleTake);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(609);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<MavkaParser::Take_moduleContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(591);
      match(MavkaParser::KW_TAKE);
      setState(593);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::DOT) {
        setState(592);
        antlrcpp::downCast<Take_moduleContext *>(_localctx)->tm_relative = match(MavkaParser::DOT);
      }
      setState(595);
      antlrcpp::downCast<Take_moduleContext *>(_localctx)->tm_name_chain = identifiers_chain(0);
      setState(599);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MavkaParser::BRACKET_OPEN: {
          setState(596);
          antlrcpp::downCast<Take_moduleContext *>(_localctx)->tm_elements = take_module_elements();
          break;
        }

        case MavkaParser::KW_AS: {
          setState(597);
          match(MavkaParser::KW_AS);
          setState(598);
          antlrcpp::downCast<Take_moduleContext *>(_localctx)->tm_as = identifier();
          break;
        }

        case MavkaParser::EOF:
        case MavkaParser::NL: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<MavkaParser::Take_remoteContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(601);
      match(MavkaParser::KW_TAKE);
      setState(602);
      identifier();
      setState(603);
      antlrcpp::downCast<Take_remoteContext *>(_localctx)->tr_url = match(MavkaParser::STRING);
      setState(604);
      antlrcpp::downCast<Take_remoteContext *>(_localctx)->tr_version = match(MavkaParser::STRING);
      setState(607);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::KW_AS) {
        setState(605);
        match(MavkaParser::KW_AS);
        setState(606);
        antlrcpp::downCast<Take_remoteContext *>(_localctx)->tr_as = identifier();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Take_module_elementsContext ------------------------------------------------------------------

MavkaParser::Take_module_elementsContext::Take_module_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Take_module_elementsContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

std::vector<MavkaParser::Take_module_elementContext *> MavkaParser::Take_module_elementsContext::take_module_element() {
  return getRuleContexts<MavkaParser::Take_module_elementContext>();
}

MavkaParser::Take_module_elementContext* MavkaParser::Take_module_elementsContext::take_module_element(size_t i) {
  return getRuleContext<MavkaParser::Take_module_elementContext>(i);
}

tree::TerminalNode* MavkaParser::Take_module_elementsContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Take_module_elementsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Take_module_elementsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Take_module_elementsContext::getRuleIndex() const {
  return MavkaParser::RuleTake_module_elements;
}

void MavkaParser::Take_module_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_module_elements(this);
}

void MavkaParser::Take_module_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_module_elements(this);
}


std::any MavkaParser::Take_module_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_module_elements(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Take_module_elementsContext* MavkaParser::take_module_elements() {
  Take_module_elementsContext *_localctx = _tracker.createInstance<Take_module_elementsContext>(_ctx, getState());
  enterRule(_localctx, 74, MavkaParser::RuleTake_module_elements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(611);
    match(MavkaParser::BRACKET_OPEN);
    setState(612);
    take_module_element();
    setState(617);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMA) {
      setState(613);
      match(MavkaParser::COMA);
      setState(614);
      take_module_element();
      setState(619);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(620);
    match(MavkaParser::BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Take_module_elementContext ------------------------------------------------------------------

MavkaParser::Take_module_elementContext::Take_module_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::Take_module_elementContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::Take_module_elementContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

tree::TerminalNode* MavkaParser::Take_module_elementContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}


size_t MavkaParser::Take_module_elementContext::getRuleIndex() const {
  return MavkaParser::RuleTake_module_element;
}

void MavkaParser::Take_module_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_module_element(this);
}

void MavkaParser::Take_module_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_module_element(this);
}


std::any MavkaParser::Take_module_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_module_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Take_module_elementContext* MavkaParser::take_module_element() {
  Take_module_elementContext *_localctx = _tracker.createInstance<Take_module_elementContext>(_ctx, getState());
  enterRule(_localctx, 76, MavkaParser::RuleTake_module_element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(622);
    antlrcpp::downCast<Take_module_elementContext *>(_localctx)->tme_name = identifier();
    setState(625);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_AS) {
      setState(623);
      match(MavkaParser::KW_AS);
      setState(624);
      antlrcpp::downCast<Take_module_elementContext *>(_localctx)->tme_as = identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GiveContext ------------------------------------------------------------------

MavkaParser::GiveContext::GiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::GiveContext::KW_GIVE() {
  return getToken(MavkaParser::KW_GIVE, 0);
}

std::vector<MavkaParser::Give_elementContext *> MavkaParser::GiveContext::give_element() {
  return getRuleContexts<MavkaParser::Give_elementContext>();
}

MavkaParser::Give_elementContext* MavkaParser::GiveContext::give_element(size_t i) {
  return getRuleContext<MavkaParser::Give_elementContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::GiveContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::GiveContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::GiveContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::GiveContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::GiveContext::getRuleIndex() const {
  return MavkaParser::RuleGive;
}

void MavkaParser::GiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGive(this);
}

void MavkaParser::GiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGive(this);
}


std::any MavkaParser::GiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGive(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::GiveContext* MavkaParser::give() {
  GiveContext *_localctx = _tracker.createInstance<GiveContext>(_ctx, getState());
  enterRule(_localctx, 78, MavkaParser::RuleGive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(627);
    match(MavkaParser::KW_GIVE);
    setState(628);
    give_element();
    setState(636);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(629);
        nls();
        setState(630);
        match(MavkaParser::COMA);
        setState(631);
        nls();
        setState(632);
        give_element(); 
      }
      setState(638);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Give_elementContext ------------------------------------------------------------------

MavkaParser::Give_elementContext::Give_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::Give_elementContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::Give_elementContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

tree::TerminalNode* MavkaParser::Give_elementContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}


size_t MavkaParser::Give_elementContext::getRuleIndex() const {
  return MavkaParser::RuleGive_element;
}

void MavkaParser::Give_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGive_element(this);
}

void MavkaParser::Give_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGive_element(this);
}


std::any MavkaParser::Give_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGive_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Give_elementContext* MavkaParser::give_element() {
  Give_elementContext *_localctx = _tracker.createInstance<Give_elementContext>(_ctx, getState());
  enterRule(_localctx, 80, MavkaParser::RuleGive_element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(639);
    antlrcpp::downCast<Give_elementContext *>(_localctx)->ge_name = identifier();
    setState(642);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_AS) {
      setState(640);
      match(MavkaParser::KW_AS);
      setState(641);
      antlrcpp::downCast<Give_elementContext *>(_localctx)->ge_as = identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MrmContext ------------------------------------------------------------------

MavkaParser::MrmContext::MrmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Mrm_elementContext* MavkaParser::MrmContext::mrm_element() {
  return getRuleContext<MavkaParser::Mrm_elementContext>(0);
}

MavkaParser::Mrm_element_closedContext* MavkaParser::MrmContext::mrm_element_closed() {
  return getRuleContext<MavkaParser::Mrm_element_closedContext>(0);
}

MavkaParser::Mrm_diiaContext* MavkaParser::MrmContext::mrm_diia() {
  return getRuleContext<MavkaParser::Mrm_diiaContext>(0);
}


size_t MavkaParser::MrmContext::getRuleIndex() const {
  return MavkaParser::RuleMrm;
}

void MavkaParser::MrmContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm(this);
}

void MavkaParser::MrmContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm(this);
}


std::any MavkaParser::MrmContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::MrmContext* MavkaParser::mrm() {
  MrmContext *_localctx = _tracker.createInstance<MrmContext>(_ctx, getState());
  enterRule(_localctx, 82, MavkaParser::RuleMrm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(647);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(644);
      mrm_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(645);
      mrm_element_closed();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(646);
      mrm_diia();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mrm_elementContext ------------------------------------------------------------------

MavkaParser::Mrm_elementContext::Mrm_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Mrm_elementContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::Mrm_elementContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mrm_elementContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mrm_elementContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Mrm_elementContext::DIVIDE() {
  return getToken(MavkaParser::DIVIDE, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Mrm_elementContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::Mrm_elementContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}

std::vector<MavkaParser::Identifiers_chainContext *> MavkaParser::Mrm_elementContext::identifiers_chain() {
  return getRuleContexts<MavkaParser::Identifiers_chainContext>();
}

MavkaParser::Identifiers_chainContext* MavkaParser::Mrm_elementContext::identifiers_chain(size_t i) {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(i);
}

MavkaParser::Mrm_contentContext* MavkaParser::Mrm_elementContext::mrm_content() {
  return getRuleContext<MavkaParser::Mrm_contentContext>(0);
}

MavkaParser::Mrm_argsContext* MavkaParser::Mrm_elementContext::mrm_args() {
  return getRuleContext<MavkaParser::Mrm_argsContext>(0);
}


size_t MavkaParser::Mrm_elementContext::getRuleIndex() const {
  return MavkaParser::RuleMrm_element;
}

void MavkaParser::Mrm_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm_element(this);
}

void MavkaParser::Mrm_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm_element(this);
}


std::any MavkaParser::Mrm_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mrm_elementContext* MavkaParser::mrm_element() {
  Mrm_elementContext *_localctx = _tracker.createInstance<Mrm_elementContext>(_ctx, getState());
  enterRule(_localctx, 84, MavkaParser::RuleMrm_element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(649);
    match(MavkaParser::LESSER);
    setState(650);
    nls();
    setState(651);
    antlrcpp::downCast<Mrm_elementContext *>(_localctx)->me_name = identifiers_chain(0);
    setState(652);
    nls();
    setState(654);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(653);
      antlrcpp::downCast<Mrm_elementContext *>(_localctx)->me_args = mrm_args();
    }
    setState(656);
    nls();
    setState(657);
    antlrcpp::downCast<Mrm_elementContext *>(_localctx)->me_me = match(MavkaParser::GREATER);
    setState(658);
    antlrcpp::downCast<Mrm_elementContext *>(_localctx)->me_content = mrm_content();
    setState(659);
    match(MavkaParser::LESSER);
    setState(660);
    match(MavkaParser::DIVIDE);
    setState(661);
    nls();
    setState(662);
    antlrcpp::downCast<Mrm_elementContext *>(_localctx)->me_end_name = identifiers_chain(0);
    setState(663);
    nls();
    setState(664);
    match(MavkaParser::GREATER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mrm_element_closedContext ------------------------------------------------------------------

MavkaParser::Mrm_element_closedContext::Mrm_element_closedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mrm_element_closedContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mrm_element_closedContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mrm_element_closedContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Mrm_element_closedContext::DIVIDE() {
  return getToken(MavkaParser::DIVIDE, 0);
}

tree::TerminalNode* MavkaParser::Mrm_element_closedContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::Mrm_element_closedContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}

MavkaParser::Mrm_argsContext* MavkaParser::Mrm_element_closedContext::mrm_args() {
  return getRuleContext<MavkaParser::Mrm_argsContext>(0);
}


size_t MavkaParser::Mrm_element_closedContext::getRuleIndex() const {
  return MavkaParser::RuleMrm_element_closed;
}

void MavkaParser::Mrm_element_closedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm_element_closed(this);
}

void MavkaParser::Mrm_element_closedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm_element_closed(this);
}


std::any MavkaParser::Mrm_element_closedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm_element_closed(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mrm_element_closedContext* MavkaParser::mrm_element_closed() {
  Mrm_element_closedContext *_localctx = _tracker.createInstance<Mrm_element_closedContext>(_ctx, getState());
  enterRule(_localctx, 86, MavkaParser::RuleMrm_element_closed);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(666);
    match(MavkaParser::LESSER);
    setState(667);
    nls();
    setState(668);
    antlrcpp::downCast<Mrm_element_closedContext *>(_localctx)->me_name = identifiers_chain(0);
    setState(669);
    nls();
    setState(671);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(670);
      antlrcpp::downCast<Mrm_element_closedContext *>(_localctx)->me_args = mrm_args();
    }
    setState(673);
    nls();
    setState(674);
    match(MavkaParser::DIVIDE);
    setState(675);
    match(MavkaParser::GREATER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mrm_argsContext ------------------------------------------------------------------

MavkaParser::Mrm_argsContext::Mrm_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Mrm_argContext *> MavkaParser::Mrm_argsContext::mrm_arg() {
  return getRuleContexts<MavkaParser::Mrm_argContext>();
}

MavkaParser::Mrm_argContext* MavkaParser::Mrm_argsContext::mrm_arg(size_t i) {
  return getRuleContext<MavkaParser::Mrm_argContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mrm_argsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mrm_argsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}


size_t MavkaParser::Mrm_argsContext::getRuleIndex() const {
  return MavkaParser::RuleMrm_args;
}

void MavkaParser::Mrm_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm_args(this);
}

void MavkaParser::Mrm_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm_args(this);
}


std::any MavkaParser::Mrm_argsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm_args(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mrm_argsContext* MavkaParser::mrm_args() {
  Mrm_argsContext *_localctx = _tracker.createInstance<Mrm_argsContext>(_ctx, getState());
  enterRule(_localctx, 88, MavkaParser::RuleMrm_args);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(677);
    mrm_arg();
    setState(683);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(678);
        nls();
        setState(679);
        mrm_arg(); 
      }
      setState(685);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mrm_argContext ------------------------------------------------------------------

MavkaParser::Mrm_argContext::Mrm_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mrm_argContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mrm_argContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::AtomContext* MavkaParser::Mrm_argContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}


size_t MavkaParser::Mrm_argContext::getRuleIndex() const {
  return MavkaParser::RuleMrm_arg;
}

void MavkaParser::Mrm_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm_arg(this);
}

void MavkaParser::Mrm_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm_arg(this);
}


std::any MavkaParser::Mrm_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm_arg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mrm_argContext* MavkaParser::mrm_arg() {
  Mrm_argContext *_localctx = _tracker.createInstance<Mrm_argContext>(_ctx, getState());
  enterRule(_localctx, 90, MavkaParser::RuleMrm_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(686);
    antlrcpp::downCast<Mrm_argContext *>(_localctx)->ma_name = identifier();
    setState(687);
    match(MavkaParser::EQUAL);
    setState(688);
    antlrcpp::downCast<Mrm_argContext *>(_localctx)->ma_value = atom(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mrm_contentContext ------------------------------------------------------------------

MavkaParser::Mrm_contentContext::Mrm_contentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Mrm_chardataContext *> MavkaParser::Mrm_contentContext::mrm_chardata() {
  return getRuleContexts<MavkaParser::Mrm_chardataContext>();
}

MavkaParser::Mrm_chardataContext* MavkaParser::Mrm_contentContext::mrm_chardata(size_t i) {
  return getRuleContext<MavkaParser::Mrm_chardataContext>(i);
}

std::vector<MavkaParser::MrmContext *> MavkaParser::Mrm_contentContext::mrm() {
  return getRuleContexts<MavkaParser::MrmContext>();
}

MavkaParser::MrmContext* MavkaParser::Mrm_contentContext::mrm(size_t i) {
  return getRuleContext<MavkaParser::MrmContext>(i);
}


size_t MavkaParser::Mrm_contentContext::getRuleIndex() const {
  return MavkaParser::RuleMrm_content;
}

void MavkaParser::Mrm_contentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm_content(this);
}

void MavkaParser::Mrm_contentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm_content(this);
}


std::any MavkaParser::Mrm_contentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm_content(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mrm_contentContext* MavkaParser::mrm_content() {
  Mrm_contentContext *_localctx = _tracker.createInstance<Mrm_contentContext>(_ctx, getState());
  enterRule(_localctx, 92, MavkaParser::RuleMrm_content);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(691);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -34359738370) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 447) != 0)) {
      setState(690);
      mrm_chardata();
    }
    setState(699);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(693);
        mrm();
        setState(695);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -34359738370) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 447) != 0)) {
          setState(694);
          mrm_chardata();
        } 
      }
      setState(701);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mrm_chardataContext ------------------------------------------------------------------

MavkaParser::Mrm_chardataContext::Mrm_chardataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Mrm_chardataContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::Mrm_chardataContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Mrm_chardataContext::MRM_DIIA() {
  return getTokens(MavkaParser::MRM_DIIA);
}

tree::TerminalNode* MavkaParser::Mrm_chardataContext::MRM_DIIA(size_t i) {
  return getToken(MavkaParser::MRM_DIIA, i);
}


size_t MavkaParser::Mrm_chardataContext::getRuleIndex() const {
  return MavkaParser::RuleMrm_chardata;
}

void MavkaParser::Mrm_chardataContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm_chardata(this);
}

void MavkaParser::Mrm_chardataContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm_chardata(this);
}


std::any MavkaParser::Mrm_chardataContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm_chardata(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mrm_chardataContext* MavkaParser::mrm_chardata() {
  Mrm_chardataContext *_localctx = _tracker.createInstance<Mrm_chardataContext>(_ctx, getState());
  enterRule(_localctx, 94, MavkaParser::RuleMrm_chardata);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(703); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(702);
      _la = _input->LA(1);
      if (_la == 0 || _la == Token::EOF || (_la == MavkaParser::LESSER

      || _la == MavkaParser::MRM_DIIA)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(705); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -34359738370) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 447) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mrm_diiaContext ------------------------------------------------------------------

MavkaParser::Mrm_diiaContext::Mrm_diiaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mrm_diiaContext::MRM_DIIA() {
  return getToken(MavkaParser::MRM_DIIA, 0);
}


size_t MavkaParser::Mrm_diiaContext::getRuleIndex() const {
  return MavkaParser::RuleMrm_diia;
}

void MavkaParser::Mrm_diiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm_diia(this);
}

void MavkaParser::Mrm_diiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm_diia(this);
}


std::any MavkaParser::Mrm_diiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm_diia(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mrm_diiaContext* MavkaParser::mrm_diia() {
  Mrm_diiaContext *_localctx = _tracker.createInstance<Mrm_diiaContext>(_ctx, getState());
  enterRule(_localctx, 96, MavkaParser::RuleMrm_diia);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(707);
    match(MavkaParser::MRM_DIIA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

MavkaParser::AtomContext::AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::AtomContext::getRuleIndex() const {
  return MavkaParser::RuleAtom;
}

void MavkaParser::AtomContext::copyFrom(AtomContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Get_elementContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Get_elementContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Get_elementContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Get_elementContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Get_elementContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::AtomContext* MavkaParser::Get_elementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Get_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::Get_elementContext::Get_elementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Get_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGet_element(this);
}
void MavkaParser::Get_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGet_element(this);
}

std::any MavkaParser::Get_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGet_element(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ChainContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::ChainContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ChainContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::ChainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::AtomContext* MavkaParser::ChainContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::ChainContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::ChainContext::ChainContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::ChainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChain(this);
}
void MavkaParser::ChainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChain(this);
}

std::any MavkaParser::ChainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitChain(this);
  else
    return visitor->visitChildren(this);
}
//----------------- String_valueContext ------------------------------------------------------------------

MavkaParser::StringContext* MavkaParser::String_valueContext::string() {
  return getRuleContext<MavkaParser::StringContext>(0);
}

MavkaParser::String_valueContext::String_valueContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::String_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString_value(this);
}
void MavkaParser::String_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString_value(this);
}

std::any MavkaParser::String_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitString_value(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Pre_incrementContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MavkaParser::Pre_incrementContext::PLUS() {
  return getTokens(MavkaParser::PLUS);
}

tree::TerminalNode* MavkaParser::Pre_incrementContext::PLUS(size_t i) {
  return getToken(MavkaParser::PLUS, i);
}

MavkaParser::AtomContext* MavkaParser::Pre_incrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Pre_incrementContext::Pre_incrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Pre_incrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPre_increment(this);
}
void MavkaParser::Pre_incrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPre_increment(this);
}

std::any MavkaParser::Pre_incrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPre_increment(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Bitwise_notContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Bitwise_notContext::TILDA() {
  return getToken(MavkaParser::TILDA, 0);
}

MavkaParser::AtomContext* MavkaParser::Bitwise_notContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Bitwise_notContext::Bitwise_notContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Bitwise_notContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise_not(this);
}
void MavkaParser::Bitwise_notContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise_not(this);
}

std::any MavkaParser::Bitwise_notContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_not(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Typeless_dictionaryContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Typeless_dictionaryContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Typeless_dictionaryContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Typeless_dictionaryContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Typeless_dictionaryContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::Dictionary_argsContext* MavkaParser::Typeless_dictionaryContext::dictionary_args() {
  return getRuleContext<MavkaParser::Dictionary_argsContext>(0);
}

MavkaParser::Typeless_dictionaryContext::Typeless_dictionaryContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Typeless_dictionaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeless_dictionary(this);
}
void MavkaParser::Typeless_dictionaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeless_dictionary(this);
}

std::any MavkaParser::Typeless_dictionaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTypeless_dictionary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PositiveContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::PositiveContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

MavkaParser::AtomContext* MavkaParser::PositiveContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::PositiveContext::PositiveContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::PositiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositive(this);
}
void MavkaParser::PositiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositive(this);
}

std::any MavkaParser::PositiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPositive(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NestedContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NestedContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::NestedContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::NestedContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::NestedContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::ExprContext* MavkaParser::NestedContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::NestedContext::NestedContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NestedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNested(this);
}
void MavkaParser::NestedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNested(this);
}

std::any MavkaParser::NestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNested(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CallContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::CallContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::CallContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::CallContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::CallContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::AtomContext* MavkaParser::CallContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

tree::TerminalNode* MavkaParser::CallContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

MavkaParser::Call_genericsContext* MavkaParser::CallContext::call_generics() {
  return getRuleContext<MavkaParser::Call_genericsContext>(0);
}

tree::TerminalNode* MavkaParser::CallContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

MavkaParser::ArgsContext* MavkaParser::CallContext::args() {
  return getRuleContext<MavkaParser::ArgsContext>(0);
}

MavkaParser::Named_argsContext* MavkaParser::CallContext::named_args() {
  return getRuleContext<MavkaParser::Named_argsContext>(0);
}

MavkaParser::CallContext::CallContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::CallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall(this);
}
void MavkaParser::CallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall(this);
}

std::any MavkaParser::CallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NumberContext ------------------------------------------------------------------

MavkaParser::Number_tokenContext* MavkaParser::NumberContext::number_token() {
  return getRuleContext<MavkaParser::Number_tokenContext>(0);
}

MavkaParser::NumberContext::NumberContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NumberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumber(this);
}
void MavkaParser::NumberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumber(this);
}

std::any MavkaParser::NumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNumber(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NegativeContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NegativeContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}

MavkaParser::AtomContext* MavkaParser::NegativeContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::NegativeContext::NegativeContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NegativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNegative(this);
}
void MavkaParser::NegativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNegative(this);
}

std::any MavkaParser::NegativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNegative(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NotContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NotContext::EXCLAMATION() {
  return getToken(MavkaParser::EXCLAMATION, 0);
}

MavkaParser::AtomContext* MavkaParser::NotContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::NotContext::NotContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NotContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNot(this);
}
void MavkaParser::NotContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNot(this);
}

std::any MavkaParser::NotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNot(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Typeless_arrayContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Typeless_arrayContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Typeless_arrayContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Typeless_arrayContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Typeless_arrayContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::Array_elementsContext* MavkaParser::Typeless_arrayContext::array_elements() {
  return getRuleContext<MavkaParser::Array_elementsContext>(0);
}

MavkaParser::Typeless_arrayContext::Typeless_arrayContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Typeless_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeless_array(this);
}
void MavkaParser::Typeless_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeless_array(this);
}

std::any MavkaParser::Typeless_arrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTypeless_array(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Pre_decrementContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MavkaParser::Pre_decrementContext::MINUS() {
  return getTokens(MavkaParser::MINUS);
}

tree::TerminalNode* MavkaParser::Pre_decrementContext::MINUS(size_t i) {
  return getToken(MavkaParser::MINUS, i);
}

MavkaParser::AtomContext* MavkaParser::Pre_decrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Pre_decrementContext::Pre_decrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Pre_decrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPre_decrement(this);
}
void MavkaParser::Pre_decrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPre_decrement(this);
}

std::any MavkaParser::Pre_decrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPre_decrement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Post_decrementContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MavkaParser::Post_decrementContext::MINUS() {
  return getTokens(MavkaParser::MINUS);
}

tree::TerminalNode* MavkaParser::Post_decrementContext::MINUS(size_t i) {
  return getToken(MavkaParser::MINUS, i);
}

MavkaParser::AtomContext* MavkaParser::Post_decrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Post_decrementContext::Post_decrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Post_decrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPost_decrement(this);
}
void MavkaParser::Post_decrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPost_decrement(this);
}

std::any MavkaParser::Post_decrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPost_decrement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IdContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::IdContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::IdContext::IdContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::IdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterId(this);
}
void MavkaParser::IdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitId(this);
}

std::any MavkaParser::IdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitId(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Post_incrementContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MavkaParser::Post_incrementContext::PLUS() {
  return getTokens(MavkaParser::PLUS);
}

tree::TerminalNode* MavkaParser::Post_incrementContext::PLUS(size_t i) {
  return getToken(MavkaParser::PLUS, i);
}

MavkaParser::AtomContext* MavkaParser::Post_incrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Post_incrementContext::Post_incrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Post_incrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPost_increment(this);
}
void MavkaParser::Post_incrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPost_increment(this);
}

std::any MavkaParser::Post_incrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPost_increment(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::AtomContext* MavkaParser::atom() {
   return atom(0);
}

MavkaParser::AtomContext* MavkaParser::atom(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::AtomContext *_localctx = _tracker.createInstance<AtomContext>(_ctx, parentState);
  MavkaParser::AtomContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 98;
  enterRecursionRule(_localctx, 98, MavkaParser::RuleAtom, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(749);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<NumberContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(710);
      number_token();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<String_valueContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(711);
      string();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<IdContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(712);
      identifier();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<Typeless_arrayContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(713);
      match(MavkaParser::BRACKET_OPEN);
      setState(714);
      nls();
      setState(716);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5816222548064452540) != 0) || _la == MavkaParser::STRING

      || _la == MavkaParser::MRM_DIIA) {
        setState(715);
        antlrcpp::downCast<Typeless_arrayContext *>(_localctx)->a_elements = array_elements();
      }
      setState(718);
      nls();
      setState(719);
      match(MavkaParser::BRACKET_CLOSE);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<Typeless_dictionaryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(721);
      match(MavkaParser::PAREN_OPEN);
      setState(722);
      nls();
      setState(724);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::ID

      || _la == MavkaParser::STRING) {
        setState(723);
        antlrcpp::downCast<Typeless_dictionaryContext *>(_localctx)->d_args = dictionary_args();
      }
      setState(726);
      nls();
      setState(727);
      match(MavkaParser::PAREN_CLOSE);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<PositiveContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(729);
      match(MavkaParser::PLUS);
      setState(730);
      antlrcpp::downCast<PositiveContext *>(_localctx)->p_value = atom(9);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<NegativeContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(731);
      match(MavkaParser::MINUS);
      setState(732);
      antlrcpp::downCast<NegativeContext *>(_localctx)->n_value = atom(8);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<Pre_decrementContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(733);
      match(MavkaParser::MINUS);
      setState(734);
      match(MavkaParser::MINUS);
      setState(735);
      antlrcpp::downCast<Pre_decrementContext *>(_localctx)->pd_value = atom(7);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<Pre_incrementContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(736);
      match(MavkaParser::PLUS);
      setState(737);
      match(MavkaParser::PLUS);
      setState(738);
      antlrcpp::downCast<Pre_incrementContext *>(_localctx)->pi_value = atom(6);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<NotContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(739);
      match(MavkaParser::EXCLAMATION);
      setState(740);
      antlrcpp::downCast<NotContext *>(_localctx)->n_value = atom(3);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<Bitwise_notContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(741);
      match(MavkaParser::TILDA);
      setState(742);
      antlrcpp::downCast<Bitwise_notContext *>(_localctx)->bn_value = atom(2);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<NestedContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(743);
      match(MavkaParser::PAREN_OPEN);
      setState(744);
      nls();
      setState(745);
      antlrcpp::downCast<NestedContext *>(_localctx)->n_value = expr();
      setState(746);
      nls();
      setState(747);
      match(MavkaParser::PAREN_CLOSE);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(788);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(786);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ChainContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(751);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(752);
          nls();
          setState(753);
          match(MavkaParser::DOT);
          setState(754);
          nls();
          setState(755);
          antlrcpp::downCast<ChainContext *>(_localctx)->c_right = identifier();
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<CallContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(757);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(762);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MavkaParser::LESSER) {
            setState(758);
            match(MavkaParser::LESSER);
            setState(759);
            call_generics();
            setState(760);
            match(MavkaParser::GREATER);
          }
          setState(764);
          match(MavkaParser::PAREN_OPEN);
          setState(765);
          nls();
          setState(768);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
          case 1: {
            setState(766);
            antlrcpp::downCast<CallContext *>(_localctx)->c_args = args();
            break;
          }

          case 2: {
            setState(767);
            antlrcpp::downCast<CallContext *>(_localctx)->c_named_args = named_args();
            break;
          }

          default:
            break;
          }
          setState(770);
          nls();
          setState(771);
          match(MavkaParser::PAREN_CLOSE);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<Get_elementContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->ge_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(773);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(774);
          match(MavkaParser::BRACKET_OPEN);
          setState(775);
          nls();
          setState(776);
          antlrcpp::downCast<Get_elementContext *>(_localctx)->ge_element = expr();
          setState(777);
          nls();
          setState(778);
          match(MavkaParser::BRACKET_CLOSE);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<Post_decrementContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->pd_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(780);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(781);
          match(MavkaParser::MINUS);
          setState(782);
          match(MavkaParser::MINUS);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<Post_incrementContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->pi_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(783);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(784);
          match(MavkaParser::PLUS);
          setState(785);
          match(MavkaParser::PLUS);
          break;
        }

        default:
          break;
        } 
      }
      setState(790);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ValueContext ------------------------------------------------------------------

MavkaParser::ValueContext::ValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::ValueContext::getRuleIndex() const {
  return MavkaParser::RuleValue;
}

void MavkaParser::ValueContext::copyFrom(ValueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Arithmetic_mulContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::Arithmetic_mulContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Arithmetic_mulContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::Arithmetic_mulContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::Arithmetic_mulContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Arithmetic_op_mulContext* MavkaParser::Arithmetic_mulContext::arithmetic_op_mul() {
  return getRuleContext<MavkaParser::Arithmetic_op_mulContext>(0);
}

MavkaParser::Arithmetic_mulContext::Arithmetic_mulContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Arithmetic_mulContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_mul(this);
}
void MavkaParser::Arithmetic_mulContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_mul(this);
}

std::any MavkaParser::Arithmetic_mulContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_mul(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Arithmetic_addContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::Arithmetic_addContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Arithmetic_addContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::Arithmetic_addContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::Arithmetic_addContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Arithmetic_op_addContext* MavkaParser::Arithmetic_addContext::arithmetic_op_add() {
  return getRuleContext<MavkaParser::Arithmetic_op_addContext>(0);
}

MavkaParser::Arithmetic_addContext::Arithmetic_addContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Arithmetic_addContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_add(this);
}
void MavkaParser::Arithmetic_addContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_add(this);
}

std::any MavkaParser::Arithmetic_addContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_add(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ComparisonContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::ComparisonContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ComparisonContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::ComparisonContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::ComparisonContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Comparison_opContext* MavkaParser::ComparisonContext::comparison_op() {
  return getRuleContext<MavkaParser::Comparison_opContext>(0);
}

MavkaParser::ComparisonContext::ComparisonContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::ComparisonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison(this);
}
void MavkaParser::ComparisonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison(this);
}

std::any MavkaParser::ComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComparison(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TestContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::TestContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::TestContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::TestContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::TestContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Test_opContext* MavkaParser::TestContext::test_op() {
  return getRuleContext<MavkaParser::Test_opContext>(0);
}

MavkaParser::TestContext::TestContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::TestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTest(this);
}
void MavkaParser::TestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTest(this);
}

std::any MavkaParser::TestContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTest(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BitwiseContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::BitwiseContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::BitwiseContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::BitwiseContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::BitwiseContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Bitwise_opContext* MavkaParser::BitwiseContext::bitwise_op() {
  return getRuleContext<MavkaParser::Bitwise_opContext>(0);
}

MavkaParser::BitwiseContext::BitwiseContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::BitwiseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise(this);
}
void MavkaParser::BitwiseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise(this);
}

std::any MavkaParser::BitwiseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Value_atomContext ------------------------------------------------------------------

MavkaParser::AtomContext* MavkaParser::Value_atomContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Value_atomContext::Value_atomContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Value_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue_atom(this);
}
void MavkaParser::Value_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue_atom(this);
}

std::any MavkaParser::Value_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitValue_atom(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ValueContext* MavkaParser::value() {
   return value(0);
}

MavkaParser::ValueContext* MavkaParser::value(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::ValueContext *_localctx = _tracker.createInstance<ValueContext>(_ctx, parentState);
  MavkaParser::ValueContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 100;
  enterRecursionRule(_localctx, 100, MavkaParser::RuleValue, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<Value_atomContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(792);
    atom(0);
    _ctx->stop = _input->LT(-1);
    setState(826);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(824);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<Arithmetic_mulContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->a_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(794);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(795);
          nls();
          setState(796);
          antlrcpp::downCast<Arithmetic_mulContext *>(_localctx)->a_operation = arithmetic_op_mul();
          setState(797);
          nls();
          setState(798);
          antlrcpp::downCast<Arithmetic_mulContext *>(_localctx)->a_right = value(6);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<Arithmetic_addContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->a_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(800);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(801);
          nls();
          setState(802);
          antlrcpp::downCast<Arithmetic_addContext *>(_localctx)->a_operation = arithmetic_op_add();
          setState(803);
          nls();
          setState(804);
          antlrcpp::downCast<Arithmetic_addContext *>(_localctx)->a_right = value(5);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<BitwiseContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->b_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(806);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(807);
          nls();
          setState(808);
          antlrcpp::downCast<BitwiseContext *>(_localctx)->b_operation = bitwise_op();
          setState(809);
          nls();
          setState(810);
          antlrcpp::downCast<BitwiseContext *>(_localctx)->b_right = value(4);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<ComparisonContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(812);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(813);
          nls();
          setState(814);
          antlrcpp::downCast<ComparisonContext *>(_localctx)->c_operation = comparison_op();
          setState(815);
          nls();
          setState(816);
          antlrcpp::downCast<ComparisonContext *>(_localctx)->c_right = value(3);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<TestContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->t_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(818);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(819);
          nls();
          setState(820);
          antlrcpp::downCast<TestContext *>(_localctx)->t_operation = test_op();
          setState(821);
          nls();
          setState(822);
          antlrcpp::downCast<TestContext *>(_localctx)->t_right = value(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(828);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Call_genericsContext ------------------------------------------------------------------

MavkaParser::Call_genericsContext::Call_genericsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Type_valueContext *> MavkaParser::Call_genericsContext::type_value() {
  return getRuleContexts<MavkaParser::Type_valueContext>();
}

MavkaParser::Type_valueContext* MavkaParser::Call_genericsContext::type_value(size_t i) {
  return getRuleContext<MavkaParser::Type_valueContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Call_genericsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Call_genericsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Call_genericsContext::getRuleIndex() const {
  return MavkaParser::RuleCall_generics;
}

void MavkaParser::Call_genericsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_generics(this);
}

void MavkaParser::Call_genericsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_generics(this);
}


std::any MavkaParser::Call_genericsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall_generics(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Call_genericsContext* MavkaParser::call_generics() {
  Call_genericsContext *_localctx = _tracker.createInstance<Call_genericsContext>(_ctx, getState());
  enterRule(_localctx, 102, MavkaParser::RuleCall_generics);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(829);
    type_value();
    setState(834);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMA) {
      setState(830);
      match(MavkaParser::COMA);
      setState(831);
      type_value();
      setState(836);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_elementsContext ------------------------------------------------------------------

MavkaParser::Array_elementsContext::Array_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Array_elementContext *> MavkaParser::Array_elementsContext::array_element() {
  return getRuleContexts<MavkaParser::Array_elementContext>();
}

MavkaParser::Array_elementContext* MavkaParser::Array_elementsContext::array_element(size_t i) {
  return getRuleContext<MavkaParser::Array_elementContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Array_elementsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Array_elementsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Array_elementsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Array_elementsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Array_elementsContext::getRuleIndex() const {
  return MavkaParser::RuleArray_elements;
}

void MavkaParser::Array_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_elements(this);
}

void MavkaParser::Array_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_elements(this);
}


std::any MavkaParser::Array_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray_elements(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Array_elementsContext* MavkaParser::array_elements() {
  Array_elementsContext *_localctx = _tracker.createInstance<Array_elementsContext>(_ctx, getState());
  enterRule(_localctx, 104, MavkaParser::RuleArray_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(837);
    array_element();
    setState(845);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(838);
        nls();
        setState(839);
        match(MavkaParser::COMA);
        setState(840);
        nls();
        setState(841);
        array_element(); 
      }
      setState(847);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_elementContext ------------------------------------------------------------------

MavkaParser::Array_elementContext::Array_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ExprContext* MavkaParser::Array_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Array_elementContext::getRuleIndex() const {
  return MavkaParser::RuleArray_element;
}

void MavkaParser::Array_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_element(this);
}

void MavkaParser::Array_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_element(this);
}


std::any MavkaParser::Array_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Array_elementContext* MavkaParser::array_element() {
  Array_elementContext *_localctx = _tracker.createInstance<Array_elementContext>(_ctx, getState());
  enterRule(_localctx, 106, MavkaParser::RuleArray_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(848);
    antlrcpp::downCast<Array_elementContext *>(_localctx)->ae_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dictionary_argsContext ------------------------------------------------------------------

MavkaParser::Dictionary_argsContext::Dictionary_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Dictionary_argContext *> MavkaParser::Dictionary_argsContext::dictionary_arg() {
  return getRuleContexts<MavkaParser::Dictionary_argContext>();
}

MavkaParser::Dictionary_argContext* MavkaParser::Dictionary_argsContext::dictionary_arg(size_t i) {
  return getRuleContext<MavkaParser::Dictionary_argContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Dictionary_argsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Dictionary_argsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Dictionary_argsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Dictionary_argsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Dictionary_argsContext::getRuleIndex() const {
  return MavkaParser::RuleDictionary_args;
}

void MavkaParser::Dictionary_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionary_args(this);
}

void MavkaParser::Dictionary_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionary_args(this);
}


std::any MavkaParser::Dictionary_argsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDictionary_args(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Dictionary_argsContext* MavkaParser::dictionary_args() {
  Dictionary_argsContext *_localctx = _tracker.createInstance<Dictionary_argsContext>(_ctx, getState());
  enterRule(_localctx, 108, MavkaParser::RuleDictionary_args);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(850);
    dictionary_arg();
    setState(858);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(851);
        nls();
        setState(852);
        match(MavkaParser::COMA);
        setState(853);
        nls();
        setState(854);
        dictionary_arg(); 
      }
      setState(860);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dictionary_argContext ------------------------------------------------------------------

MavkaParser::Dictionary_argContext::Dictionary_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Dictionary_argContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

MavkaParser::ExprContext* MavkaParser::Dictionary_argContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::Dictionary_argContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Dictionary_argContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}


size_t MavkaParser::Dictionary_argContext::getRuleIndex() const {
  return MavkaParser::RuleDictionary_arg;
}

void MavkaParser::Dictionary_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionary_arg(this);
}

void MavkaParser::Dictionary_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionary_arg(this);
}


std::any MavkaParser::Dictionary_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDictionary_arg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Dictionary_argContext* MavkaParser::dictionary_arg() {
  Dictionary_argContext *_localctx = _tracker.createInstance<Dictionary_argContext>(_ctx, getState());
  enterRule(_localctx, 110, MavkaParser::RuleDictionary_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(863);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::ID: {
        setState(861);
        antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_name_id = identifier();
        break;
      }

      case MavkaParser::STRING: {
        setState(862);
        antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_name_string = match(MavkaParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(865);
    match(MavkaParser::EQUAL);
    setState(866);
    antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

MavkaParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::ExprContext::getRuleIndex() const {
  return MavkaParser::RuleExpr;
}

void MavkaParser::ExprContext::copyFrom(ExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Anonymous_diiaContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::KW_DIIA() {
  return getToken(MavkaParser::KW_DIIA, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Anonymous_diiaContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Anonymous_diiaContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Anonymous_diiaContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Anonymous_diiaContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Anonymous_diiaContext::KW_ASYNC() {
  return getToken(MavkaParser::KW_ASYNC, 0);
}

MavkaParser::GenericsContext* MavkaParser::Anonymous_diiaContext::generics() {
  return getRuleContext<MavkaParser::GenericsContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::Anonymous_diiaContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::Anonymous_diiaContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::BodyContext* MavkaParser::Anonymous_diiaContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}

MavkaParser::Anonymous_diiaContext::Anonymous_diiaContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::Anonymous_diiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymous_diia(this);
}
void MavkaParser::Anonymous_diiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymous_diia(this);
}

std::any MavkaParser::Anonymous_diiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAnonymous_diia(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AsContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::AsContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}

MavkaParser::AtomContext* MavkaParser::AsContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Type_value_itemContext* MavkaParser::AsContext::type_value_item() {
  return getRuleContext<MavkaParser::Type_value_itemContext>(0);
}

MavkaParser::AsContext::AsContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::AsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAs(this);
}
void MavkaParser::AsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAs(this);
}

std::any MavkaParser::AsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAs(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WaitContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::WaitContext::KW_WAIT() {
  return getToken(MavkaParser::KW_WAIT, 0);
}

MavkaParser::ValueContext* MavkaParser::WaitContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::WaitContext::WaitContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::WaitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWait(this);
}
void MavkaParser::WaitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWait(this);
}

std::any MavkaParser::WaitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWait(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Call_parentContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Call_parentContext::KW_PARENT() {
  return getToken(MavkaParser::KW_PARENT, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Call_parentContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Call_parentContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Call_parentContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

tree::TerminalNode* MavkaParser::Call_parentContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Call_parentContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Call_parentContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::ArgsContext* MavkaParser::Call_parentContext::args() {
  return getRuleContext<MavkaParser::ArgsContext>(0);
}

MavkaParser::Named_argsContext* MavkaParser::Call_parentContext::named_args() {
  return getRuleContext<MavkaParser::Named_argsContext>(0);
}

MavkaParser::Call_parentContext::Call_parentContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::Call_parentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_parent(this);
}
void MavkaParser::Call_parentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_parent(this);
}

std::any MavkaParser::Call_parentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall_parent(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FunctionContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::FunctionContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::FunctionContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::FunctionContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::FunctionContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

tree::TerminalNode* MavkaParser::FunctionContext::COLON() {
  return getToken(MavkaParser::COLON, 0);
}

MavkaParser::ExprContext* MavkaParser::FunctionContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

tree::TerminalNode* MavkaParser::FunctionContext::KW_ASYNC() {
  return getToken(MavkaParser::KW_ASYNC, 0);
}

MavkaParser::ParamsContext* MavkaParser::FunctionContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::FunctionContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::FunctionContext::FunctionContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::FunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction(this);
}
void MavkaParser::FunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction(this);
}

std::any MavkaParser::FunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleContext ------------------------------------------------------------------

MavkaParser::ValueContext* MavkaParser::SimpleContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::SimpleContext::SimpleContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::SimpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple(this);
}
void MavkaParser::SimpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple(this);
}

std::any MavkaParser::SimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitSimple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Expr_mrmContext ------------------------------------------------------------------

MavkaParser::MrmContext* MavkaParser::Expr_mrmContext::mrm() {
  return getRuleContext<MavkaParser::MrmContext>(0);
}

MavkaParser::Expr_mrmContext::Expr_mrmContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::Expr_mrmContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_mrm(this);
}
void MavkaParser::Expr_mrmContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_mrm(this);
}

std::any MavkaParser::Expr_mrmContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitExpr_mrm(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TernaryContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::TernaryContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::TernaryContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::TernaryContext::QUESTION() {
  return getToken(MavkaParser::QUESTION, 0);
}

tree::TerminalNode* MavkaParser::TernaryContext::COLON() {
  return getToken(MavkaParser::COLON, 0);
}

MavkaParser::ValueContext* MavkaParser::TernaryContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

std::vector<MavkaParser::ExprContext *> MavkaParser::TernaryContext::expr() {
  return getRuleContexts<MavkaParser::ExprContext>();
}

MavkaParser::ExprContext* MavkaParser::TernaryContext::expr(size_t i) {
  return getRuleContext<MavkaParser::ExprContext>(i);
}

MavkaParser::TernaryContext::TernaryContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::TernaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTernary(this);
}
void MavkaParser::TernaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTernary(this);
}

std::any MavkaParser::TernaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTernary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GodContext ------------------------------------------------------------------

std::vector<MavkaParser::AtomContext *> MavkaParser::GodContext::atom() {
  return getRuleContexts<MavkaParser::AtomContext>();
}

MavkaParser::AtomContext* MavkaParser::GodContext::atom(size_t i) {
  return getRuleContext<MavkaParser::AtomContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::GodContext::KW_TA() {
  return getTokens(MavkaParser::KW_TA);
}

tree::TerminalNode* MavkaParser::GodContext::KW_TA(size_t i) {
  return getToken(MavkaParser::KW_TA, i);
}

MavkaParser::GodContext::GodContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::GodContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGod(this);
}
void MavkaParser::GodContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGod(this);
}

std::any MavkaParser::GodContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGod(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::ExprContext* MavkaParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 112, MavkaParser::RuleExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(955);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<MavkaParser::Call_parentContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(868);
      match(MavkaParser::KW_PARENT);
      setState(869);
      nls();
      setState(870);
      match(MavkaParser::DOT);
      setState(871);
      nls();
      setState(872);
      antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_id = identifier();
      setState(873);
      match(MavkaParser::PAREN_OPEN);
      setState(874);
      nls();
      setState(877);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
      case 1: {
        setState(875);
        antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_args = args();
        break;
      }

      case 2: {
        setState(876);
        antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_named_args = named_args();
        break;
      }

      default:
        break;
      }
      setState(879);
      nls();
      setState(880);
      match(MavkaParser::PAREN_CLOSE);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<MavkaParser::SimpleContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(882);
      value(0);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<MavkaParser::AsContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(883);
      antlrcpp::downCast<AsContext *>(_localctx)->a_left = atom(0);
      setState(884);
      match(MavkaParser::KW_AS);
      setState(885);
      antlrcpp::downCast<AsContext *>(_localctx)->a_right = type_value_item();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<MavkaParser::TernaryContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(887);
      antlrcpp::downCast<TernaryContext *>(_localctx)->t_value = value(0);
      setState(888);
      nls();
      setState(889);
      match(MavkaParser::QUESTION);
      setState(890);
      nls();
      setState(891);
      antlrcpp::downCast<TernaryContext *>(_localctx)->t_positive = expr();
      setState(892);
      nls();
      setState(893);
      match(MavkaParser::COLON);
      setState(894);
      nls();
      setState(895);
      antlrcpp::downCast<TernaryContext *>(_localctx)->t_negative = expr();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<MavkaParser::GodContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(897);
      atom(0);
      setState(900); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(898);
        match(MavkaParser::KW_TA);
        setState(899);
        atom(0);
        setState(902); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MavkaParser::KW_TA);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<MavkaParser::WaitContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(904);
      match(MavkaParser::KW_WAIT);
      setState(905);
      antlrcpp::downCast<WaitContext *>(_localctx)->w_value = value(0);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<MavkaParser::FunctionContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(907);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::KW_ASYNC) {
        setState(906);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_async = match(MavkaParser::KW_ASYNC);
      }
      setState(909);
      match(MavkaParser::PAREN_OPEN);
      setState(910);
      nls();
      setState(912);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::DOT

      || _la == MavkaParser::ID) {
        setState(911);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_params = params();
      }
      setState(914);
      nls();
      setState(915);
      match(MavkaParser::PAREN_CLOSE);
      setState(917);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::BRACKET_OPEN

      || _la == MavkaParser::ID) {
        setState(916);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_type = type_value();
      }
      setState(919);
      match(MavkaParser::COLON);
      setState(920);
      nls();
      setState(921);
      antlrcpp::downCast<FunctionContext *>(_localctx)->f_body = expr();
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<MavkaParser::Anonymous_diiaContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(924);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::KW_ASYNC) {
        setState(923);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_async = match(MavkaParser::KW_ASYNC);
      }
      setState(926);
      match(MavkaParser::KW_DIIA);
      setState(934);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::LESSER

      || _la == MavkaParser::NL) {
        setState(927);
        nls();
        setState(928);
        match(MavkaParser::LESSER);
        setState(929);
        nls();
        setState(930);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_generics = generics();
        setState(931);
        nls();
        setState(932);
        match(MavkaParser::GREATER);
      }
      setState(936);
      match(MavkaParser::PAREN_OPEN);
      setState(937);
      nls();
      setState(939);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::DOT

      || _la == MavkaParser::ID) {
        setState(938);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_params = params();
      }
      setState(941);
      nls();
      setState(942);
      match(MavkaParser::PAREN_CLOSE);
      setState(944);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::BRACKET_OPEN

      || _la == MavkaParser::ID) {
        setState(943);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_type = type_value();
      }
      setState(946);
      nl();
      setState(950);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5816222548057857932) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 193) != 0)) {
        setState(947);
        antlrcpp::downCast<Anonymous_diiaContext *>(_localctx)->d_body = body();
        setState(948);
        nl();
      }
      setState(952);
      match(MavkaParser::KW_END);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<MavkaParser::Expr_mrmContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(954);
      mrm();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowContext ------------------------------------------------------------------

MavkaParser::ThrowContext::ThrowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::ThrowContext::KW_THROW() {
  return getToken(MavkaParser::KW_THROW, 0);
}

MavkaParser::ExprContext* MavkaParser::ThrowContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::ThrowContext::getRuleIndex() const {
  return MavkaParser::RuleThrow;
}

void MavkaParser::ThrowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrow(this);
}

void MavkaParser::ThrowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrow(this);
}


std::any MavkaParser::ThrowContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitThrow(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ThrowContext* MavkaParser::throw_() {
  ThrowContext *_localctx = _tracker.createInstance<ThrowContext>(_ctx, getState());
  enterRule(_localctx, 114, MavkaParser::RuleThrow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(957);
    match(MavkaParser::KW_THROW);
    setState(958);
    antlrcpp::downCast<ThrowContext *>(_localctx)->t_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignContext ------------------------------------------------------------------

MavkaParser::AssignContext::AssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Assign_simpleContext* MavkaParser::AssignContext::assign_simple() {
  return getRuleContext<MavkaParser::Assign_simpleContext>(0);
}

MavkaParser::Assign_by_identifierContext* MavkaParser::AssignContext::assign_by_identifier() {
  return getRuleContext<MavkaParser::Assign_by_identifierContext>(0);
}

MavkaParser::Assign_by_elementContext* MavkaParser::AssignContext::assign_by_element() {
  return getRuleContext<MavkaParser::Assign_by_elementContext>(0);
}


size_t MavkaParser::AssignContext::getRuleIndex() const {
  return MavkaParser::RuleAssign;
}

void MavkaParser::AssignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign(this);
}

void MavkaParser::AssignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign(this);
}


std::any MavkaParser::AssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::AssignContext* MavkaParser::assign() {
  AssignContext *_localctx = _tracker.createInstance<AssignContext>(_ctx, getState());
  enterRule(_localctx, 116, MavkaParser::RuleAssign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(963);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(960);
      assign_simple();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(961);
      assign_by_identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(962);
      assign_by_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_simpleContext ------------------------------------------------------------------

MavkaParser::Assign_simpleContext::Assign_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Assign_simpleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_simpleContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Assign_simpleContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

tree::TerminalNode* MavkaParser::Assign_simpleContext::KW_SUBJECT() {
  return getToken(MavkaParser::KW_SUBJECT, 0);
}

MavkaParser::Type_valueContext* MavkaParser::Assign_simpleContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::Assign_simpleContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_simple;
}

void MavkaParser::Assign_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_simple(this);
}

void MavkaParser::Assign_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_simple(this);
}


std::any MavkaParser::Assign_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_simple(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_simpleContext* MavkaParser::assign_simple() {
  Assign_simpleContext *_localctx = _tracker.createInstance<Assign_simpleContext>(_ctx, getState());
  enterRule(_localctx, 118, MavkaParser::RuleAssign_simple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(966);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SUBJECT) {
      setState(965);
      antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_subject = match(MavkaParser::KW_SUBJECT);
    }
    setState(968);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_identifier = identifier();
    setState(970);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::BRACKET_OPEN

    || _la == MavkaParser::ID) {
      setState(969);
      antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_type = type_value();
    }
    setState(972);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_symbol = assign_symbol();
    setState(973);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_by_identifierContext ------------------------------------------------------------------

MavkaParser::Assign_by_identifierContext::Assign_by_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Assign_by_identifierContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Assign_by_identifierContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Assign_by_identifierContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Assign_by_identifierContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::Assign_by_identifierContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_by_identifierContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Assign_by_identifierContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Assign_by_identifierContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_by_identifier;
}

void MavkaParser::Assign_by_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_by_identifier(this);
}

void MavkaParser::Assign_by_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_by_identifier(this);
}


std::any MavkaParser::Assign_by_identifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_by_identifier(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_by_identifierContext* MavkaParser::assign_by_identifier() {
  Assign_by_identifierContext *_localctx = _tracker.createInstance<Assign_by_identifierContext>(_ctx, getState());
  enterRule(_localctx, 120, MavkaParser::RuleAssign_by_identifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(975);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_left = super_identifiers_chain(0);
    setState(976);
    nls();
    setState(977);
    match(MavkaParser::DOT);
    setState(978);
    nls();
    setState(979);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_identifier = identifier();
    setState(980);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_symbol = assign_symbol();
    setState(981);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_by_elementContext ------------------------------------------------------------------

MavkaParser::Assign_by_elementContext::Assign_by_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_by_elementContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Assign_by_elementContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Assign_by_elementContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Assign_by_elementContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Assign_by_elementContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

std::vector<MavkaParser::ExprContext *> MavkaParser::Assign_by_elementContext::expr() {
  return getRuleContexts<MavkaParser::ExprContext>();
}

MavkaParser::ExprContext* MavkaParser::Assign_by_elementContext::expr(size_t i) {
  return getRuleContext<MavkaParser::ExprContext>(i);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_by_elementContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}


size_t MavkaParser::Assign_by_elementContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_by_element;
}

void MavkaParser::Assign_by_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_by_element(this);
}

void MavkaParser::Assign_by_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_by_element(this);
}


std::any MavkaParser::Assign_by_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_by_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_by_elementContext* MavkaParser::assign_by_element() {
  Assign_by_elementContext *_localctx = _tracker.createInstance<Assign_by_elementContext>(_ctx, getState());
  enterRule(_localctx, 122, MavkaParser::RuleAssign_by_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(983);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_left = super_identifiers_chain(0);
    setState(984);
    match(MavkaParser::BRACKET_OPEN);
    setState(985);
    nls();
    setState(986);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_index = expr();
    setState(987);
    nls();
    setState(988);
    match(MavkaParser::BRACKET_CLOSE);
    setState(989);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_symbol = assign_symbol();
    setState(990);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_symbolContext ------------------------------------------------------------------

MavkaParser::Assign_symbolContext::Assign_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::KW_TSE() {
  return getToken(MavkaParser::KW_TSE, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::COLON() {
  return getToken(MavkaParser::COLON, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::MULTIPLY() {
  return getTokens(MavkaParser::MULTIPLY);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::MULTIPLY(size_t i) {
  return getToken(MavkaParser::MULTIPLY, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::DIVIDE() {
  return getTokens(MavkaParser::DIVIDE);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::DIVIDE(size_t i) {
  return getToken(MavkaParser::DIVIDE, i);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::MOD() {
  return getToken(MavkaParser::MOD, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::AND() {
  return getTokens(MavkaParser::AND);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::AND(size_t i) {
  return getToken(MavkaParser::AND, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::OR() {
  return getTokens(MavkaParser::OR);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::OR(size_t i) {
  return getToken(MavkaParser::OR, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::POWER() {
  return getToken(MavkaParser::POWER, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::QUESTION() {
  return getTokens(MavkaParser::QUESTION);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::QUESTION(size_t i) {
  return getToken(MavkaParser::QUESTION, i);
}


size_t MavkaParser::Assign_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_symbol;
}

void MavkaParser::Assign_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_symbol(this);
}

void MavkaParser::Assign_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_symbol(this);
}


std::any MavkaParser::Assign_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_symbolContext* MavkaParser::assign_symbol() {
  Assign_symbolContext *_localctx = _tracker.createInstance<Assign_symbolContext>(_ctx, getState());
  enterRule(_localctx, 124, MavkaParser::RuleAssign_symbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1033);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(992);
      match(MavkaParser::KW_TSE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(993);
      match(MavkaParser::EQUAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(994);
      match(MavkaParser::COLON);
      setState(995);
      match(MavkaParser::EQUAL);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(996);
      match(MavkaParser::PLUS);
      setState(997);
      match(MavkaParser::EQUAL);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(998);
      match(MavkaParser::MINUS);
      setState(999);
      match(MavkaParser::EQUAL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1000);
      match(MavkaParser::MULTIPLY);
      setState(1001);
      match(MavkaParser::EQUAL);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1002);
      match(MavkaParser::DIVIDE);
      setState(1003);
      match(MavkaParser::EQUAL);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1004);
      match(MavkaParser::DIVIDE);
      setState(1005);
      match(MavkaParser::DIVIDE);
      setState(1006);
      match(MavkaParser::EQUAL);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1007);
      match(MavkaParser::MOD);
      setState(1008);
      match(MavkaParser::EQUAL);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1009);
      match(MavkaParser::MULTIPLY);
      setState(1010);
      match(MavkaParser::MULTIPLY);
      setState(1011);
      match(MavkaParser::EQUAL);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1012);
      match(MavkaParser::AND);
      setState(1013);
      match(MavkaParser::EQUAL);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1014);
      match(MavkaParser::OR);
      setState(1015);
      match(MavkaParser::EQUAL);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1016);
      match(MavkaParser::LESSER);
      setState(1017);
      match(MavkaParser::LESSER);
      setState(1018);
      match(MavkaParser::EQUAL);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1019);
      match(MavkaParser::GREATER);
      setState(1020);
      match(MavkaParser::GREATER);
      setState(1021);
      match(MavkaParser::EQUAL);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1022);
      match(MavkaParser::POWER);
      setState(1023);
      match(MavkaParser::EQUAL);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1024);
      match(MavkaParser::AND);
      setState(1025);
      match(MavkaParser::AND);
      setState(1026);
      match(MavkaParser::EQUAL);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1027);
      match(MavkaParser::OR);
      setState(1028);
      match(MavkaParser::OR);
      setState(1029);
      match(MavkaParser::EQUAL);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(1030);
      match(MavkaParser::QUESTION);
      setState(1031);
      match(MavkaParser::QUESTION);
      setState(1032);
      match(MavkaParser::EQUAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Wait_assignContext ------------------------------------------------------------------

MavkaParser::Wait_assignContext::Wait_assignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Wait_assignContext::KW_WAIT() {
  return getToken(MavkaParser::KW_WAIT, 0);
}

MavkaParser::AssignContext* MavkaParser::Wait_assignContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}


size_t MavkaParser::Wait_assignContext::getRuleIndex() const {
  return MavkaParser::RuleWait_assign;
}

void MavkaParser::Wait_assignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWait_assign(this);
}

void MavkaParser::Wait_assignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWait_assign(this);
}


std::any MavkaParser::Wait_assignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWait_assign(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Wait_assignContext* MavkaParser::wait_assign() {
  Wait_assignContext *_localctx = _tracker.createInstance<Wait_assignContext>(_ctx, getState());
  enterRule(_localctx, 126, MavkaParser::RuleWait_assign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1035);
    match(MavkaParser::KW_WAIT);
    setState(1036);
    antlrcpp::downCast<Wait_assignContext *>(_localctx)->wa_assign = assign();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Identifiers_chainContext ------------------------------------------------------------------

MavkaParser::Identifiers_chainContext::Identifiers_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Identifiers_chainContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Identifiers_chainContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Identifiers_chainContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Identifiers_chainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::Identifiers_chainContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}


size_t MavkaParser::Identifiers_chainContext::getRuleIndex() const {
  return MavkaParser::RuleIdentifiers_chain;
}

void MavkaParser::Identifiers_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifiers_chain(this);
}

void MavkaParser::Identifiers_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifiers_chain(this);
}


std::any MavkaParser::Identifiers_chainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIdentifiers_chain(this);
  else
    return visitor->visitChildren(this);
}


MavkaParser::Identifiers_chainContext* MavkaParser::identifiers_chain() {
   return identifiers_chain(0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::identifiers_chain(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::Identifiers_chainContext *_localctx = _tracker.createInstance<Identifiers_chainContext>(_ctx, parentState);
  MavkaParser::Identifiers_chainContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 128;
  enterRecursionRule(_localctx, 128, MavkaParser::RuleIdentifiers_chain, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1039);
    antlrcpp::downCast<Identifiers_chainContext *>(_localctx)->ic_identifier = identifier();
    _ctx->stop = _input->LT(-1);
    setState(1049);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Identifiers_chainContext>(parentContext, parentState);
        _localctx->ic_left = previousContext;
        pushNewRecursionContext(_localctx, startState, RuleIdentifiers_chain);
        setState(1041);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1042);
        nls();
        setState(1043);
        match(MavkaParser::DOT);
        setState(1044);
        nls();
        setState(1045);
        antlrcpp::downCast<Identifiers_chainContext *>(_localctx)->ic_right = identifier(); 
      }
      setState(1051);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Super_identifiers_chainContext ------------------------------------------------------------------

MavkaParser::Super_identifiers_chainContext::Super_identifiers_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Super_identifiers_chainContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Super_identifiers_chainContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Super_identifiers_chainContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Super_identifiers_chainContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::ExprContext* MavkaParser::Super_identifiers_chainContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Super_identifiers_chainContext::getRuleIndex() const {
  return MavkaParser::RuleSuper_identifiers_chain;
}

void MavkaParser::Super_identifiers_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuper_identifiers_chain(this);
}

void MavkaParser::Super_identifiers_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuper_identifiers_chain(this);
}


std::any MavkaParser::Super_identifiers_chainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitSuper_identifiers_chain(this);
  else
    return visitor->visitChildren(this);
}


MavkaParser::Super_identifiers_chainContext* MavkaParser::super_identifiers_chain() {
   return super_identifiers_chain(0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::super_identifiers_chain(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::Super_identifiers_chainContext *_localctx = _tracker.createInstance<Super_identifiers_chainContext>(_ctx, parentState);
  MavkaParser::Super_identifiers_chainContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 130;
  enterRecursionRule(_localctx, 130, MavkaParser::RuleSuper_identifiers_chain, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1053);
    antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_identifier = identifier();
    _ctx->stop = _input->LT(-1);
    setState(1070);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1068);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Super_identifiers_chainContext>(parentContext, parentState);
          _localctx->sic_left = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleSuper_identifiers_chain);
          setState(1055);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1056);
          nls();
          setState(1057);
          match(MavkaParser::DOT);
          setState(1058);
          nls();
          setState(1059);
          antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_right = identifier();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Super_identifiers_chainContext>(parentContext, parentState);
          _localctx->sic_left = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleSuper_identifiers_chain);
          setState(1061);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1062);
          match(MavkaParser::BRACKET_OPEN);
          setState(1063);
          nls();
          setState(1064);
          antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_index = expr();
          setState(1065);
          nls();
          setState(1066);
          match(MavkaParser::BRACKET_CLOSE);
          break;
        }

        default:
          break;
        } 
      }
      setState(1072);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Type_valueContext ------------------------------------------------------------------

MavkaParser::Type_valueContext::Type_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Type_value_itemContext *> MavkaParser::Type_valueContext::type_value_item() {
  return getRuleContexts<MavkaParser::Type_value_itemContext>();
}

MavkaParser::Type_value_itemContext* MavkaParser::Type_valueContext::type_value_item(size_t i) {
  return getRuleContext<MavkaParser::Type_value_itemContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Type_valueContext::OR() {
  return getTokens(MavkaParser::OR);
}

tree::TerminalNode* MavkaParser::Type_valueContext::OR(size_t i) {
  return getToken(MavkaParser::OR, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Type_valueContext::KW_OR() {
  return getTokens(MavkaParser::KW_OR);
}

tree::TerminalNode* MavkaParser::Type_valueContext::KW_OR(size_t i) {
  return getToken(MavkaParser::KW_OR, i);
}


size_t MavkaParser::Type_valueContext::getRuleIndex() const {
  return MavkaParser::RuleType_value;
}

void MavkaParser::Type_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value(this);
}

void MavkaParser::Type_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value(this);
}


std::any MavkaParser::Type_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_valueContext* MavkaParser::type_value() {
  Type_valueContext *_localctx = _tracker.createInstance<Type_valueContext>(_ctx, getState());
  enterRule(_localctx, 132, MavkaParser::RuleType_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1073);
    type_value_item();
    setState(1078);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1074);
        _la = _input->LA(1);
        if (!(_la == MavkaParser::KW_OR

        || _la == MavkaParser::OR)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1075);
        type_value_item(); 
      }
      setState(1080);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_itemContext ------------------------------------------------------------------

MavkaParser::Type_value_itemContext::Type_value_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Type_value_item_simpleContext* MavkaParser::Type_value_itemContext::type_value_item_simple() {
  return getRuleContext<MavkaParser::Type_value_item_simpleContext>(0);
}

MavkaParser::Type_value_item_arrayContext* MavkaParser::Type_value_itemContext::type_value_item_array() {
  return getRuleContext<MavkaParser::Type_value_item_arrayContext>(0);
}


size_t MavkaParser::Type_value_itemContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item;
}

void MavkaParser::Type_value_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item(this);
}

void MavkaParser::Type_value_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item(this);
}


std::any MavkaParser::Type_value_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_itemContext* MavkaParser::type_value_item() {
  Type_value_itemContext *_localctx = _tracker.createInstance<Type_value_itemContext>(_ctx, getState());
  enterRule(_localctx, 134, MavkaParser::RuleType_value_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1083);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(1081);
        type_value_item_simple();
        break;
      }

      case MavkaParser::BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1082);
        type_value_item_array();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_item_simpleContext ------------------------------------------------------------------

MavkaParser::Type_value_item_simpleContext::Type_value_item_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Identifiers_chainContext* MavkaParser::Type_value_item_simpleContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}

tree::TerminalNode* MavkaParser::Type_value_item_simpleContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

tree::TerminalNode* MavkaParser::Type_value_item_simpleContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

MavkaParser::Type_value_item_genericsContext* MavkaParser::Type_value_item_simpleContext::type_value_item_generics() {
  return getRuleContext<MavkaParser::Type_value_item_genericsContext>(0);
}


size_t MavkaParser::Type_value_item_simpleContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item_simple;
}

void MavkaParser::Type_value_item_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item_simple(this);
}

void MavkaParser::Type_value_item_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item_simple(this);
}


std::any MavkaParser::Type_value_item_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item_simple(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_item_simpleContext* MavkaParser::type_value_item_simple() {
  Type_value_item_simpleContext *_localctx = _tracker.createInstance<Type_value_item_simpleContext>(_ctx, getState());
  enterRule(_localctx, 136, MavkaParser::RuleType_value_item_simple);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1085);
    antlrcpp::downCast<Type_value_item_simpleContext *>(_localctx)->tvi_value = identifiers_chain(0);
    setState(1090);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx)) {
    case 1: {
      setState(1086);
      match(MavkaParser::LESSER);
      setState(1087);
      antlrcpp::downCast<Type_value_item_simpleContext *>(_localctx)->tvi_generics = type_value_item_generics();
      setState(1088);
      match(MavkaParser::GREATER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_item_genericsContext ------------------------------------------------------------------

MavkaParser::Type_value_item_genericsContext::Type_value_item_genericsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Type_valueContext *> MavkaParser::Type_value_item_genericsContext::type_value() {
  return getRuleContexts<MavkaParser::Type_valueContext>();
}

MavkaParser::Type_valueContext* MavkaParser::Type_value_item_genericsContext::type_value(size_t i) {
  return getRuleContext<MavkaParser::Type_valueContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Type_value_item_genericsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Type_value_item_genericsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Type_value_item_genericsContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item_generics;
}

void MavkaParser::Type_value_item_genericsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item_generics(this);
}

void MavkaParser::Type_value_item_genericsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item_generics(this);
}


std::any MavkaParser::Type_value_item_genericsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item_generics(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_item_genericsContext* MavkaParser::type_value_item_generics() {
  Type_value_item_genericsContext *_localctx = _tracker.createInstance<Type_value_item_genericsContext>(_ctx, getState());
  enterRule(_localctx, 138, MavkaParser::RuleType_value_item_generics);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1092);
    type_value();
    setState(1097);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMA) {
      setState(1093);
      match(MavkaParser::COMA);
      setState(1094);
      type_value();
      setState(1099);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_item_arrayContext ------------------------------------------------------------------

MavkaParser::Type_value_item_arrayContext::Type_value_item_arrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Type_value_item_arrayContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Type_value_item_arrayContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::Type_value_itemContext* MavkaParser::Type_value_item_arrayContext::type_value_item() {
  return getRuleContext<MavkaParser::Type_value_itemContext>(0);
}


size_t MavkaParser::Type_value_item_arrayContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item_array;
}

void MavkaParser::Type_value_item_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item_array(this);
}

void MavkaParser::Type_value_item_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item_array(this);
}


std::any MavkaParser::Type_value_item_arrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item_array(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_item_arrayContext* MavkaParser::type_value_item_array() {
  Type_value_item_arrayContext *_localctx = _tracker.createInstance<Type_value_item_arrayContext>(_ctx, getState());
  enterRule(_localctx, 140, MavkaParser::RuleType_value_item_array);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1100);
    match(MavkaParser::BRACKET_OPEN);
    setState(1101);
    match(MavkaParser::BRACKET_CLOSE);
    setState(1102);
    type_value_item();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgsContext ------------------------------------------------------------------

MavkaParser::ArgsContext::ArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::ArgContext *> MavkaParser::ArgsContext::arg() {
  return getRuleContexts<MavkaParser::ArgContext>();
}

MavkaParser::ArgContext* MavkaParser::ArgsContext::arg(size_t i) {
  return getRuleContext<MavkaParser::ArgContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::ArgsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ArgsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::ArgsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::ArgsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::ArgsContext::getRuleIndex() const {
  return MavkaParser::RuleArgs;
}

void MavkaParser::ArgsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgs(this);
}

void MavkaParser::ArgsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgs(this);
}


std::any MavkaParser::ArgsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArgs(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ArgsContext* MavkaParser::args() {
  ArgsContext *_localctx = _tracker.createInstance<ArgsContext>(_ctx, getState());
  enterRule(_localctx, 142, MavkaParser::RuleArgs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1104);
    arg();
    setState(1112);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1105);
        nls();
        setState(1106);
        match(MavkaParser::COMA);
        setState(1107);
        nls();
        setState(1108);
        arg(); 
      }
      setState(1114);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgContext ------------------------------------------------------------------

MavkaParser::ArgContext::ArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ExprContext* MavkaParser::ArgContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::ArgContext::getRuleIndex() const {
  return MavkaParser::RuleArg;
}

void MavkaParser::ArgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArg(this);
}

void MavkaParser::ArgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArg(this);
}


std::any MavkaParser::ArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ArgContext* MavkaParser::arg() {
  ArgContext *_localctx = _tracker.createInstance<ArgContext>(_ctx, getState());
  enterRule(_localctx, 144, MavkaParser::RuleArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1115);
    antlrcpp::downCast<ArgContext *>(_localctx)->a_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argsContext ------------------------------------------------------------------

MavkaParser::Named_argsContext::Named_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Named_argContext *> MavkaParser::Named_argsContext::named_arg() {
  return getRuleContexts<MavkaParser::Named_argContext>();
}

MavkaParser::Named_argContext* MavkaParser::Named_argsContext::named_arg(size_t i) {
  return getRuleContext<MavkaParser::Named_argContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Named_argsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Named_argsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Named_argsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Named_argsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Named_argsContext::getRuleIndex() const {
  return MavkaParser::RuleNamed_args;
}

void MavkaParser::Named_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_args(this);
}

void MavkaParser::Named_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_args(this);
}


std::any MavkaParser::Named_argsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNamed_args(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Named_argsContext* MavkaParser::named_args() {
  Named_argsContext *_localctx = _tracker.createInstance<Named_argsContext>(_ctx, getState());
  enterRule(_localctx, 146, MavkaParser::RuleNamed_args);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1117);
    named_arg();
    setState(1125);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1118);
        nls();
        setState(1119);
        match(MavkaParser::COMA);
        setState(1120);
        nls();
        setState(1121);
        named_arg(); 
      }
      setState(1127);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argContext ------------------------------------------------------------------

MavkaParser::Named_argContext::Named_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Named_argContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Named_argContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Named_argContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Named_argContext::getRuleIndex() const {
  return MavkaParser::RuleNamed_arg;
}

void MavkaParser::Named_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_arg(this);
}

void MavkaParser::Named_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_arg(this);
}


std::any MavkaParser::Named_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNamed_arg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Named_argContext* MavkaParser::named_arg() {
  Named_argContext *_localctx = _tracker.createInstance<Named_argContext>(_ctx, getState());
  enterRule(_localctx, 148, MavkaParser::RuleNamed_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1128);
    antlrcpp::downCast<Named_argContext *>(_localctx)->na_name = identifier();
    setState(1129);
    match(MavkaParser::EQUAL);
    setState(1130);
    antlrcpp::downCast<Named_argContext *>(_localctx)->na_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamsContext ------------------------------------------------------------------

MavkaParser::ParamsContext::ParamsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::ParamContext *> MavkaParser::ParamsContext::param() {
  return getRuleContexts<MavkaParser::ParamContext>();
}

MavkaParser::ParamContext* MavkaParser::ParamsContext::param(size_t i) {
  return getRuleContext<MavkaParser::ParamContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::ParamsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ParamsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::ParamsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::ParamsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}

std::vector<tree::TerminalNode *> MavkaParser::ParamsContext::DOT() {
  return getTokens(MavkaParser::DOT);
}

tree::TerminalNode* MavkaParser::ParamsContext::DOT(size_t i) {
  return getToken(MavkaParser::DOT, i);
}

MavkaParser::IdentifierContext* MavkaParser::ParamsContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::ParamsContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::ParamsContext::getRuleIndex() const {
  return MavkaParser::RuleParams;
}

void MavkaParser::ParamsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParams(this);
}

void MavkaParser::ParamsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParams(this);
}


std::any MavkaParser::ParamsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParams(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ParamsContext* MavkaParser::params() {
  ParamsContext *_localctx = _tracker.createInstance<ParamsContext>(_ctx, getState());
  enterRule(_localctx, 150, MavkaParser::RuleParams);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1162);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(1132);
        param();
        setState(1140);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1133);
            nls();
            setState(1134);
            match(MavkaParser::COMA);
            setState(1135);
            nls();
            setState(1136);
            param(); 
          }
          setState(1142);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx);
        }
        setState(1153);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
        case 1: {
          setState(1143);
          nls();
          setState(1144);
          match(MavkaParser::COMA);
          setState(1145);
          nls();
          setState(1146);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic = match(MavkaParser::DOT);
          setState(1147);
          match(MavkaParser::DOT);
          setState(1148);
          match(MavkaParser::DOT);
          setState(1149);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_name = identifier();
          setState(1151);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MavkaParser::BRACKET_OPEN

          || _la == MavkaParser::ID) {
            setState(1150);
            antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_type = type_value();
          }
          break;
        }

        default:
          break;
        }
        break;
      }

      case MavkaParser::DOT: {
        enterOuterAlt(_localctx, 2);
        setState(1155);
        antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic = match(MavkaParser::DOT);
        setState(1156);
        match(MavkaParser::DOT);
        setState(1157);
        match(MavkaParser::DOT);
        setState(1158);
        antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_name = identifier();
        setState(1160);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MavkaParser::BRACKET_OPEN

        || _la == MavkaParser::ID) {
          setState(1159);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_type = type_value();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamContext ------------------------------------------------------------------

MavkaParser::ParamContext::ParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::ParamContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::ParamContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

MavkaParser::Type_valueContext* MavkaParser::ParamContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::Param_valueContext* MavkaParser::ParamContext::param_value() {
  return getRuleContext<MavkaParser::Param_valueContext>(0);
}


size_t MavkaParser::ParamContext::getRuleIndex() const {
  return MavkaParser::RuleParam;
}

void MavkaParser::ParamContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam(this);
}

void MavkaParser::ParamContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam(this);
}


std::any MavkaParser::ParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ParamContext* MavkaParser::param() {
  ParamContext *_localctx = _tracker.createInstance<ParamContext>(_ctx, getState());
  enterRule(_localctx, 152, MavkaParser::RuleParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1164);
    antlrcpp::downCast<ParamContext *>(_localctx)->p_name = identifier();
    setState(1166);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::BRACKET_OPEN

    || _la == MavkaParser::ID) {
      setState(1165);
      antlrcpp::downCast<ParamContext *>(_localctx)->p_type = type_value();
    }
    setState(1170);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::EQUAL) {
      setState(1168);
      match(MavkaParser::EQUAL);
      setState(1169);
      antlrcpp::downCast<ParamContext *>(_localctx)->p_value = param_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_valueContext ------------------------------------------------------------------

MavkaParser::Param_valueContext::Param_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::Param_valueContext::getRuleIndex() const {
  return MavkaParser::RuleParam_value;
}

void MavkaParser::Param_valueContext::copyFrom(Param_valueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Param_value_empty_listContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Param_value_empty_listContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Param_value_empty_listContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::Param_value_empty_listContext::Param_value_empty_listContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_empty_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_empty_list(this);
}
void MavkaParser::Param_value_empty_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_empty_list(this);
}

std::any MavkaParser::Param_value_empty_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_empty_list(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_identifierContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::Param_value_identifierContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Param_value_identifierContext::Param_value_identifierContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_identifier(this);
}
void MavkaParser::Param_value_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_identifier(this);
}

std::any MavkaParser::Param_value_identifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_identifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_empty_dictionaryContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Param_value_empty_dictionaryContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Param_value_empty_dictionaryContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::Param_value_empty_dictionaryContext::Param_value_empty_dictionaryContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_empty_dictionaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_empty_dictionary(this);
}
void MavkaParser::Param_value_empty_dictionaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_empty_dictionary(this);
}

std::any MavkaParser::Param_value_empty_dictionaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_empty_dictionary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_numberContext ------------------------------------------------------------------

MavkaParser::Number_tokenContext* MavkaParser::Param_value_numberContext::number_token() {
  return getRuleContext<MavkaParser::Number_tokenContext>(0);
}

MavkaParser::Param_value_numberContext::Param_value_numberContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_numberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_number(this);
}
void MavkaParser::Param_value_numberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_number(this);
}

std::any MavkaParser::Param_value_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_number(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_stringContext ------------------------------------------------------------------

MavkaParser::StringContext* MavkaParser::Param_value_stringContext::string() {
  return getRuleContext<MavkaParser::StringContext>(0);
}

MavkaParser::Param_value_stringContext::Param_value_stringContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_string(this);
}
void MavkaParser::Param_value_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_string(this);
}

std::any MavkaParser::Param_value_stringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_string(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::Param_valueContext* MavkaParser::param_value() {
  Param_valueContext *_localctx = _tracker.createInstance<Param_valueContext>(_ctx, getState());
  enterRule(_localctx, 154, MavkaParser::RuleParam_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1179);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::INTEGER:
      case MavkaParser::FLOAT:
      case MavkaParser::HEX:
      case MavkaParser::BIN: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_numberContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1172);
        number_token();
        break;
      }

      case MavkaParser::STRING_MULTILINE:
      case MavkaParser::STRING: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_stringContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1173);
        string();
        break;
      }

      case MavkaParser::ID: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_identifierContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(1174);
        identifier();
        break;
      }

      case MavkaParser::PAREN_OPEN: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_empty_dictionaryContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(1175);
        match(MavkaParser::PAREN_OPEN);
        setState(1176);
        match(MavkaParser::PAREN_CLOSE);
        break;
      }

      case MavkaParser::BRACKET_OPEN: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_empty_listContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(1177);
        match(MavkaParser::BRACKET_OPEN);
        setState(1178);
        match(MavkaParser::BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BodyContext ------------------------------------------------------------------

MavkaParser::BodyContext::BodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Body_element_or_returnContext *> MavkaParser::BodyContext::body_element_or_return() {
  return getRuleContexts<MavkaParser::Body_element_or_returnContext>();
}

MavkaParser::Body_element_or_returnContext* MavkaParser::BodyContext::body_element_or_return(size_t i) {
  return getRuleContext<MavkaParser::Body_element_or_returnContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::BodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::BodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::BodyContext::getRuleIndex() const {
  return MavkaParser::RuleBody;
}

void MavkaParser::BodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody(this);
}

void MavkaParser::BodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody(this);
}


std::any MavkaParser::BodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::BodyContext* MavkaParser::body() {
  BodyContext *_localctx = _tracker.createInstance<BodyContext>(_ctx, getState());
  enterRule(_localctx, 156, MavkaParser::RuleBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1181);
    body_element_or_return();
    setState(1187);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1182);
        nl();
        setState(1183);
        body_element_or_return(); 
      }
      setState(1189);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_element_or_returnContext ------------------------------------------------------------------

MavkaParser::Body_element_or_returnContext::Body_element_or_returnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Body_elementContext* MavkaParser::Body_element_or_returnContext::body_element() {
  return getRuleContext<MavkaParser::Body_elementContext>(0);
}

MavkaParser::Return_body_lineContext* MavkaParser::Body_element_or_returnContext::return_body_line() {
  return getRuleContext<MavkaParser::Return_body_lineContext>(0);
}


size_t MavkaParser::Body_element_or_returnContext::getRuleIndex() const {
  return MavkaParser::RuleBody_element_or_return;
}

void MavkaParser::Body_element_or_returnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_element_or_return(this);
}

void MavkaParser::Body_element_or_returnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_element_or_return(this);
}


std::any MavkaParser::Body_element_or_returnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody_element_or_return(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Body_element_or_returnContext* MavkaParser::body_element_or_return() {
  Body_element_or_returnContext *_localctx = _tracker.createInstance<Body_element_or_returnContext>(_ctx, getState());
  enterRule(_localctx, 158, MavkaParser::RuleBody_element_or_return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1192);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::KW_DIIA:
      case MavkaParser::KW_FOR:
      case MavkaParser::KW_IF:
      case MavkaParser::KW_WAIT:
      case MavkaParser::KW_ASYNC:
      case MavkaParser::KW_SUBJECT:
      case MavkaParser::KW_TRY:
      case MavkaParser::KW_THROW:
      case MavkaParser::KW_WHILE:
      case MavkaParser::KW_PARENT:
      case MavkaParser::LESSER:
      case MavkaParser::PLUS:
      case MavkaParser::MINUS:
      case MavkaParser::PAREN_OPEN:
      case MavkaParser::BRACKET_OPEN:
      case MavkaParser::TILDA:
      case MavkaParser::EXCLAMATION:
      case MavkaParser::INTEGER:
      case MavkaParser::FLOAT:
      case MavkaParser::HEX:
      case MavkaParser::BIN:
      case MavkaParser::ID:
      case MavkaParser::STRING_MULTILINE:
      case MavkaParser::STRING:
      case MavkaParser::MRM_DIIA:
      case MavkaParser::NL: {
        enterOuterAlt(_localctx, 1);
        setState(1190);
        body_element();
        break;
      }

      case MavkaParser::KW_RETURN: {
        enterOuterAlt(_localctx, 2);
        setState(1191);
        return_body_line();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_elementContext ------------------------------------------------------------------

MavkaParser::Body_elementContext::Body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IfContext* MavkaParser::Body_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Body_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Body_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Body_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Body_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Body_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Body_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Body_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Body_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleBody_element;
}

void MavkaParser::Body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_element(this);
}

void MavkaParser::Body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_element(this);
}


std::any MavkaParser::Body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Body_elementContext* MavkaParser::body_element() {
  Body_elementContext *_localctx = _tracker.createInstance<Body_elementContext>(_ctx, getState());
  enterRule(_localctx, 160, MavkaParser::RuleBody_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1203);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1194);
      if_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1195);
      each();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1196);
      while_();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1197);
      try_();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1198);
      expr();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1199);
      throw_();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1200);
      wait_assign();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1201);
      assign();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1202);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_body_lineContext ------------------------------------------------------------------

MavkaParser::Return_body_lineContext::Return_body_lineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Return_body_lineContext::KW_RETURN() {
  return getToken(MavkaParser::KW_RETURN, 0);
}

MavkaParser::ExprContext* MavkaParser::Return_body_lineContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Return_body_lineContext::getRuleIndex() const {
  return MavkaParser::RuleReturn_body_line;
}

void MavkaParser::Return_body_lineContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_body_line(this);
}

void MavkaParser::Return_body_lineContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_body_line(this);
}


std::any MavkaParser::Return_body_lineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitReturn_body_line(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Return_body_lineContext* MavkaParser::return_body_line() {
  Return_body_lineContext *_localctx = _tracker.createInstance<Return_body_lineContext>(_ctx, getState());
  enterRule(_localctx, 162, MavkaParser::RuleReturn_body_line);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1205);
    match(MavkaParser::KW_RETURN);
    setState(1206);
    antlrcpp::downCast<Return_body_lineContext *>(_localctx)->rbl_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithmetic_op_mulContext ------------------------------------------------------------------

MavkaParser::Arithmetic_op_mulContext::Arithmetic_op_mulContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Arithmetic_op_mulContext::MULTIPLY() {
  return getTokens(MavkaParser::MULTIPLY);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::MULTIPLY(size_t i) {
  return getToken(MavkaParser::MULTIPLY, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Arithmetic_op_mulContext::DIVIDE() {
  return getTokens(MavkaParser::DIVIDE);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::DIVIDE(size_t i) {
  return getToken(MavkaParser::DIVIDE, i);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::MOD() {
  return getToken(MavkaParser::MOD, 0);
}


size_t MavkaParser::Arithmetic_op_mulContext::getRuleIndex() const {
  return MavkaParser::RuleArithmetic_op_mul;
}

void MavkaParser::Arithmetic_op_mulContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_op_mul(this);
}

void MavkaParser::Arithmetic_op_mulContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_op_mul(this);
}


std::any MavkaParser::Arithmetic_op_mulContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_op_mul(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Arithmetic_op_mulContext* MavkaParser::arithmetic_op_mul() {
  Arithmetic_op_mulContext *_localctx = _tracker.createInstance<Arithmetic_op_mulContext>(_ctx, getState());
  enterRule(_localctx, 164, MavkaParser::RuleArithmetic_op_mul);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1215);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1208);
      match(MavkaParser::MULTIPLY);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1209);
      match(MavkaParser::DIVIDE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1210);
      match(MavkaParser::MOD);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1211);
      match(MavkaParser::DIVIDE);
      setState(1212);
      match(MavkaParser::DIVIDE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1213);
      match(MavkaParser::MULTIPLY);
      setState(1214);
      match(MavkaParser::MULTIPLY);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithmetic_op_addContext ------------------------------------------------------------------

MavkaParser::Arithmetic_op_addContext::Arithmetic_op_addContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Arithmetic_op_addContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_addContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}


size_t MavkaParser::Arithmetic_op_addContext::getRuleIndex() const {
  return MavkaParser::RuleArithmetic_op_add;
}

void MavkaParser::Arithmetic_op_addContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_op_add(this);
}

void MavkaParser::Arithmetic_op_addContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_op_add(this);
}


std::any MavkaParser::Arithmetic_op_addContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_op_add(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Arithmetic_op_addContext* MavkaParser::arithmetic_op_add() {
  Arithmetic_op_addContext *_localctx = _tracker.createInstance<Arithmetic_op_addContext>(_ctx, getState());
  enterRule(_localctx, 166, MavkaParser::RuleArithmetic_op_add);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1217);
    _la = _input->LA(1);
    if (!(_la == MavkaParser::PLUS

    || _la == MavkaParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bitwise_opContext ------------------------------------------------------------------

MavkaParser::Bitwise_opContext::Bitwise_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::POWER() {
  return getToken(MavkaParser::POWER, 0);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::OR() {
  return getToken(MavkaParser::OR, 0);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::AND() {
  return getToken(MavkaParser::AND, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Bitwise_opContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Bitwise_opContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}


size_t MavkaParser::Bitwise_opContext::getRuleIndex() const {
  return MavkaParser::RuleBitwise_op;
}

void MavkaParser::Bitwise_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise_op(this);
}

void MavkaParser::Bitwise_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise_op(this);
}


std::any MavkaParser::Bitwise_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Bitwise_opContext* MavkaParser::bitwise_op() {
  Bitwise_opContext *_localctx = _tracker.createInstance<Bitwise_opContext>(_ctx, getState());
  enterRule(_localctx, 168, MavkaParser::RuleBitwise_op);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1226);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::POWER: {
        enterOuterAlt(_localctx, 1);
        setState(1219);
        match(MavkaParser::POWER);
        break;
      }

      case MavkaParser::OR: {
        enterOuterAlt(_localctx, 2);
        setState(1220);
        match(MavkaParser::OR);
        break;
      }

      case MavkaParser::AND: {
        enterOuterAlt(_localctx, 3);
        setState(1221);
        match(MavkaParser::AND);
        break;
      }

      case MavkaParser::LESSER: {
        enterOuterAlt(_localctx, 4);
        setState(1222);
        match(MavkaParser::LESSER);
        setState(1223);
        match(MavkaParser::LESSER);
        break;
      }

      case MavkaParser::GREATER: {
        enterOuterAlt(_localctx, 5);
        setState(1224);
        match(MavkaParser::GREATER);
        setState(1225);
        match(MavkaParser::GREATER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Test_opContext ------------------------------------------------------------------

MavkaParser::Test_opContext::Test_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Test_opContext::KW_AND() {
  return getToken(MavkaParser::KW_AND, 0);
}

tree::TerminalNode* MavkaParser::Test_opContext::KW_OR() {
  return getToken(MavkaParser::KW_OR, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Test_opContext::OR() {
  return getTokens(MavkaParser::OR);
}

tree::TerminalNode* MavkaParser::Test_opContext::OR(size_t i) {
  return getToken(MavkaParser::OR, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Test_opContext::AND() {
  return getTokens(MavkaParser::AND);
}

tree::TerminalNode* MavkaParser::Test_opContext::AND(size_t i) {
  return getToken(MavkaParser::AND, i);
}


size_t MavkaParser::Test_opContext::getRuleIndex() const {
  return MavkaParser::RuleTest_op;
}

void MavkaParser::Test_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTest_op(this);
}

void MavkaParser::Test_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTest_op(this);
}


std::any MavkaParser::Test_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTest_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Test_opContext* MavkaParser::test_op() {
  Test_opContext *_localctx = _tracker.createInstance<Test_opContext>(_ctx, getState());
  enterRule(_localctx, 170, MavkaParser::RuleTest_op);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1234);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::KW_AND: {
        enterOuterAlt(_localctx, 1);
        setState(1228);
        match(MavkaParser::KW_AND);
        break;
      }

      case MavkaParser::KW_OR: {
        enterOuterAlt(_localctx, 2);
        setState(1229);
        match(MavkaParser::KW_OR);
        break;
      }

      case MavkaParser::OR: {
        enterOuterAlt(_localctx, 3);
        setState(1230);
        match(MavkaParser::OR);
        setState(1231);
        match(MavkaParser::OR);
        break;
      }

      case MavkaParser::AND: {
        enterOuterAlt(_localctx, 4);
        setState(1232);
        match(MavkaParser::AND);
        setState(1233);
        match(MavkaParser::AND);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comparison_opContext ------------------------------------------------------------------

MavkaParser::Comparison_opContext::Comparison_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Comparison_opContext::EQUAL() {
  return getTokens(MavkaParser::EQUAL);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::EQUAL(size_t i) {
  return getToken(MavkaParser::EQUAL, i);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::EXCLAMATION() {
  return getToken(MavkaParser::EXCLAMATION, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_IS() {
  return getToken(MavkaParser::KW_IS, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_NOT() {
  return getToken(MavkaParser::KW_NOT, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_EQ_WORD() {
  return getToken(MavkaParser::KW_EQ_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_GR_WORD() {
  return getToken(MavkaParser::KW_GR_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_SM_WORD() {
  return getToken(MavkaParser::KW_SM_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_HAS_IS_WORD() {
  return getToken(MavkaParser::KW_HAS_IS_WORD, 0);
}


size_t MavkaParser::Comparison_opContext::getRuleIndex() const {
  return MavkaParser::RuleComparison_op;
}

void MavkaParser::Comparison_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison_op(this);
}

void MavkaParser::Comparison_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison_op(this);
}


std::any MavkaParser::Comparison_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComparison_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Comparison_opContext* MavkaParser::comparison_op() {
  Comparison_opContext *_localctx = _tracker.createInstance<Comparison_opContext>(_ctx, getState());
  enterRule(_localctx, 172, MavkaParser::RuleComparison_op);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1261);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1236);
      match(MavkaParser::EQUAL);
      setState(1237);
      match(MavkaParser::EQUAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1238);
      match(MavkaParser::EXCLAMATION);
      setState(1239);
      match(MavkaParser::EQUAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1240);
      match(MavkaParser::GREATER);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1241);
      match(MavkaParser::LESSER);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1242);
      match(MavkaParser::GREATER);
      setState(1243);
      match(MavkaParser::EQUAL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1244);
      match(MavkaParser::LESSER);
      setState(1245);
      match(MavkaParser::EQUAL);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1246);
      match(MavkaParser::KW_IS);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1247);
      match(MavkaParser::KW_NOT);
      setState(1248);
      match(MavkaParser::KW_IS);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1249);
      match(MavkaParser::KW_EQ_WORD);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1250);
      match(MavkaParser::KW_NOT);
      setState(1251);
      match(MavkaParser::KW_EQ_WORD);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1252);
      match(MavkaParser::KW_GR_WORD);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1253);
      match(MavkaParser::KW_NOT);
      setState(1254);
      match(MavkaParser::KW_GR_WORD);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1255);
      match(MavkaParser::KW_SM_WORD);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1256);
      match(MavkaParser::KW_NOT);
      setState(1257);
      match(MavkaParser::KW_SM_WORD);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1258);
      match(MavkaParser::KW_HAS_IS_WORD);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1259);
      match(MavkaParser::KW_NOT);
      setState(1260);
      match(MavkaParser::KW_HAS_IS_WORD);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comp_inst_block_programContext ------------------------------------------------------------------

MavkaParser::Comp_inst_block_programContext::Comp_inst_block_programContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Comp_inst_block_programContext::COMP_INST_START() {
  return getToken(MavkaParser::COMP_INST_START, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Comp_inst_block_programContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Comp_inst_block_programContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::Comp_inst_block_programContext::COMP_INST_END() {
  return getToken(MavkaParser::COMP_INST_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Comp_inst_block_programContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Comp_inst_block_programContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

MavkaParser::ProgramContext* MavkaParser::Comp_inst_block_programContext::program() {
  return getRuleContext<MavkaParser::ProgramContext>(0);
}


size_t MavkaParser::Comp_inst_block_programContext::getRuleIndex() const {
  return MavkaParser::RuleComp_inst_block_program;
}

void MavkaParser::Comp_inst_block_programContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComp_inst_block_program(this);
}

void MavkaParser::Comp_inst_block_programContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComp_inst_block_program(this);
}


std::any MavkaParser::Comp_inst_block_programContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComp_inst_block_program(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Comp_inst_block_programContext* MavkaParser::comp_inst_block_program() {
  Comp_inst_block_programContext *_localctx = _tracker.createInstance<Comp_inst_block_programContext>(_ctx, getState());
  enterRule(_localctx, 174, MavkaParser::RuleComp_inst_block_program);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1263);
    match(MavkaParser::COMP_INST_START);
    setState(1264);
    antlrcpp::downCast<Comp_inst_block_programContext *>(_localctx)->cibp_name = identifier();
    setState(1265);
    antlrcpp::downCast<Comp_inst_block_programContext *>(_localctx)->cibp_value = match(MavkaParser::STRING);
    setState(1266);
    nl();
    setState(1267);
    antlrcpp::downCast<Comp_inst_block_programContext *>(_localctx)->cibp_program = program();
    setState(1268);
    nl();
    setState(1269);
    match(MavkaParser::COMP_INST_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comp_inst_assignContext ------------------------------------------------------------------

MavkaParser::Comp_inst_assignContext::Comp_inst_assignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Comp_inst_assignContext::COMP_INST_ASSIGN() {
  return getToken(MavkaParser::COMP_INST_ASSIGN, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Comp_inst_assignContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Comp_inst_assignContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}


size_t MavkaParser::Comp_inst_assignContext::getRuleIndex() const {
  return MavkaParser::RuleComp_inst_assign;
}

void MavkaParser::Comp_inst_assignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComp_inst_assign(this);
}

void MavkaParser::Comp_inst_assignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComp_inst_assign(this);
}


std::any MavkaParser::Comp_inst_assignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComp_inst_assign(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Comp_inst_assignContext* MavkaParser::comp_inst_assign() {
  Comp_inst_assignContext *_localctx = _tracker.createInstance<Comp_inst_assignContext>(_ctx, getState());
  enterRule(_localctx, 176, MavkaParser::RuleComp_inst_assign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1271);
    match(MavkaParser::COMP_INST_ASSIGN);
    setState(1272);
    antlrcpp::downCast<Comp_inst_assignContext *>(_localctx)->cia_name = identifier();
    setState(1273);
    antlrcpp::downCast<Comp_inst_assignContext *>(_localctx)->cia_value = match(MavkaParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool MavkaParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 49: return atomSempred(antlrcpp::downCast<AtomContext *>(context), predicateIndex);
    case 50: return valueSempred(antlrcpp::downCast<ValueContext *>(context), predicateIndex);
    case 64: return identifiers_chainSempred(antlrcpp::downCast<Identifiers_chainContext *>(context), predicateIndex);
    case 65: return super_identifiers_chainSempred(antlrcpp::downCast<Super_identifiers_chainContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool MavkaParser::atomSempred(AtomContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 14);
    case 1: return precpred(_ctx, 13);
    case 2: return precpred(_ctx, 12);
    case 3: return precpred(_ctx, 5);
    case 4: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

bool MavkaParser::valueSempred(ValueContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 5: return precpred(_ctx, 5);
    case 6: return precpred(_ctx, 4);
    case 7: return precpred(_ctx, 3);
    case 8: return precpred(_ctx, 2);
    case 9: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool MavkaParser::identifiers_chainSempred(Identifiers_chainContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool MavkaParser::super_identifiers_chainSempred(Super_identifiers_chainContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 2);
    case 12: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void MavkaParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  mavkaparserParserInitialize();
#else
  ::antlr4::internal::call_once(mavkaparserParserOnceFlag, mavkaparserParserInitialize);
#endif
}
