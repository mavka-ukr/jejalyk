#include <iostream>

#include "compiler/supercompiler.h"
#include "parser.h"

int main() {
  const auto code = R"(
структура Дія
кінець

структура число
кінець

дія число.чародія_створити(значення) число
кінець

дія число.чародія_додати(значення) число
кінець

дія число.чародія_відняти(значення) число
кінець

дія число.чародія_помножити(значення) число
кінець

дія число.чародія_поділити(значення) число
кінець

структура текст
кінець

дія текст.чародія_створити(значення) текст
кінець

дія текст.чародія_додати(значення) текст
кінець

структура список
  довжина число
кінець

дія список.чародія_змінити_спеціальну_властивість(позиція, значення)
кінець

дія список.чародія_отримати_спеціальну_властивість(позиція)
кінець

дія друк(...значення список)
кінець

;; ---

структура Нейрон
  заряд число
  поріг число
  перезаряд число
  імпульс число
кінець

дія Нейрон.стимуляція(х)
  я.заряд = я.заряд + х
кінець

дія Нейрон.активація()
  якщо я.перезаряд > 0
    я.перезаряд = я.перезаряд - 1
    я.заряд = 0
  кінець
  якщо я.заряд >= я.поріг
    я.заряд = 0
    я.імпульс = 1
    я.перезаряд = 2
  інакше
    я.імпульс = 0
  кінець
кінець

структура Синапс
  в число
  вх_н Нейрон
  ви_н Нейрон
кінець

дія Синапс.активація()
  імпульс = я.вх_н.імпульс * я.в
  я.ви_н.стимуляція(імпульс)
  я.в = я.в + 0.01 * я.вх_н.імпульс * я.ви_н.імпульс
кінець

структура Мережа
  нейрони список
  синапси список
кінець

дія Мережа.створити(к_нейронів)
  к_нейронів = к_нейронів - 1
  я.нейрони = []
  я.синапси = []

  перебрати 0..к_нейронів як х
    я.нейрони[х] = Нейрон(0,1,0,0)
  кінець

  індекс = 0
  перебрати 0..к_нейронів як х1
    перебрати 0..к_нейронів як х2
      якщо х1 != х2
        я.синапси[індекс] = Синапс(
          в = 0.1,
          вх_н = я.нейрони[х1],
          ви_н = я.нейрони[х2]
        )
        індекс = індекс + 1
      кінець
    кінець
  кінець
кінець

дія Мережа.оновити()
  д_н = я.нейрони.довжина - 1
  д_с = я.синапси.довжина - 1

  перебрати 0..д_н як х
    я.нейрони[х].активація()
  кінець

  перебрати 0..д_с як х
    я.синапси[х].активація()
  кінець
кінець

дія Мережа.стан()
  д_н = я.нейрони.довжина - 1
  друк("Активність нейронів:")

  перебрати 0..д_н як х
    друк(текст(я.нейрони[х].імпульс))
  кінець

  друк("----------------------")
кінець

дія Мережа.запуск(к_час)
  перебрати 0..к_час як епоха
    я.оновити()
    друк("Епоха - " + текст(епоха))
    я.стан()
  кінець
кінець

мережа = Мережа([],[])
мережа.створити(3)
перебрати 0..4 як х
  мережа.нейрони[0].стимуляція(1)
  мережа.нейрони[2].стимуляція(1)
  мережа.запуск(3)
кінець
)";
  const auto parser_result = mavka::parser::parse(code);
  if (parser_result->error) {
    std::cout << parser_result->error->message << std::endl;
    return 1;
  }
  const auto result = supercompiler::compile(parser_result->program_node);
  if (result->error) {
    std::cout << result->error->message << std::endl;
    return 1;
  }
  std::cout << "compilation successful" << std::endl;
  return 0;
}