#include <iostream>

#include "compiler/supercompiler.h"
#include "parser.h"

int main() {
  const auto code = R"(
структура Дія
кінець

структура число
кінець

дія число.чародія_викликати(значення) число
кінець

дія число.чародія_додати(значення) число
кінець

дія число.чародія_відняти(значення) число
кінець

дія число.чародія_помножити(значення) число
кінець

дія число.чародія_поділити(значення) число
кінець

структура текст
кінець

структура список
  довжина число
кінець

дія список.чародія_змінити_спеціальну_властивість(позиція, значення)
кінець

дія список.чародія_отримати_спеціальну_властивість(позиція)
кінець

дія друк(...значення список)
кінець

;; ---

структура Нейрон
  заряд число
  поріг число
  імпульс число
кінець

дія Нейрон.створити()
  я.заряд = 0
  я.поріг = 0.8
  я.імпульс = 0
кінець

дія Нейрон.стимулювати(х)
  дельта = (-(я.заряд) + х) * 0.1
  я.заряд = я.заряд + дельта

  якщо я.заряд <= 0.0001
    я.заряд = 0
  кінець
  якщо я.заряд >= я.поріг
    я.імпульс = 1
    я.заряд = 0
  інакше
    я.імпульс = 0
  кінець
кінець

структура Популяція
  нейрони список
кінець

дія Популяція.створити(к_н)
  к_н = к_н - 1
  я.нейрони = []
  перебрати 0..к_н як х
    я.нейрони[х] = Нейрон(1,2,3)
    я.нейрони[х].створити()
  кінець
кінець

дія Популяція.стимулювати(п,к,х)
  перебрати п..к як х1
    я.нейрони[х1].стимулювати(х)
  кінець
кінець

п1 = Популяція([])
п1.створити(4)
друк(п1)
перебрати 0..20 як х
  п1.стимулювати(0,2,1)
  друк(п1)
кінець
)";
  const auto parser_result = mavka::parser::parse(code);
  if (parser_result->error) {
    std::cout << parser_result->error->message << std::endl;
    return 1;
  }
  const auto result = supercompiler::compile(parser_result->program_node);
  if (result->error) {
    std::cout << result->error->message << std::endl;
    return 1;
  }
  std::cout << "compilation successful" << std::endl;
  return 0;
}