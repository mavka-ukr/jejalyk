#include <iostream>

#include "compiler/supercompiler.h"
#include "parser.h"

int main() {
  const auto code = R"(
структура Дія
кінець

структура число
кінець

дія число.чародія_викликати(значення) число
кінець

дія число.чародія_додати(значення) число
кінець

дія число.чародія_відняти(значення) число
кінець

дія число.чародія_помножити(значення) число
кінець

дія число.чародія_поділити(значення) число
кінець

структура текст
кінець

структура список
  довжина число
кінець

дія список.чародія_змінити_спеціальну_властивість(позиція, значення)
кінець

дія список.чародія_отримати_спеціальну_властивість(позиція)
кінець

дія друк(...значення список)
кінець

дія помножити_матриці(мат1,мат2) список
  д_мат1 = мат1.довжина - 1
  д_мат1_в = мат1[0].довжина - 1
  мат3 = []

  перебрати 0..д_мат1_в як х
    т = []
    перебрати 0..д_мат1 як х1
      т[х1] = мат1[х1][х] * мат2[х]
    кінець
    мат3[х] = т
  кінець

  д_мат3 = мат3.довжина - 1
  д_мат3_в = мат3[0].довжина - 1
  мат4 = []
  перебрати 0..д_мат3_в як х
    мат4[х] = 0
    перебрати 0..д_мат3 як х1
      мат4[х] = мат4[х] + мат3[х1][х]
    кінець
  кінець

  вернути мат4
кінець

структура Конв1Д
  в список
кінець

дія Конв1Д.створити(к_вихід,розмір)
  я.в = []
  розмір = розмір - 1
  к_вихід = к_вихід - 1
  перебрати 0..к_вихід як х1
    т = []
    перебрати 0..розмір як х
      т[х] = 0.5
    кінець
    я.в[х1] = т
  кінець
кінець

дія Конв1Д.активувати(вхід)
  вихід = []
  д_в = я.в[0].довжина
  д_вх = вхід.довжина
  к_ви = я.в.довжина - 1

  перебрати 0..к_ви як в_ін
    т_в = []
    перебрати 0..(д_вх - д_в) як х1
      т = []
      перебрати 0..(д_в - 1) як ін
        т[ін] = (вхід[(ін + х1)] * я.в[в_ін][ін])
      кінець
      рез = 0
      перебрати 0..(д_в - 1) як ін
        рез = рез + т[ін]
      кінець
      т_в[х1] = рез
    кінець
    вихід[в_ін] = т_в
  кінець

  вернути вихід
кінець

структура генератор_випадкових_чисел
  сід число
  а число
кінець

дія генератор_випадкових_чисел.генерувати()
  а = 10
  а = а * я.сід + я.а
  а1 = "%(а)\"
  р = "%(а1[2])%(а1[0])\"
  р1 = число(р) / 55.3
  я.а = а
  вернути р1
кінець

г = генератор_випадкових_чисел(123,0)

дія створити_матрицю(х,у) список
  х = х - 1
  у = у - 1
  м = []
  перебрати 0..у як х1
    т = []
    перебрати 0..х як х2
      т[х2] = г.генерувати()
    кінець
    м[х1] = т
  кінець
  вернути м
кінець

дія Е(х)
  результат = 1.0
  ф = 1.0
  перебрати 0..10 як х1
    ф = ф + ф * х1
    результат = результат + (х**х1) / ф
  кінець
  вернути результат
кінець

дія софт(х)
  д_х = х.довжина() - 1
  е = []
  перебрати 0..д_х як х1
    е[х1] = Е(х[х1])
  кінець
  сума = 0.0
  перебрати 0..д_х як х1
    сума += число(е[х1])
  кінець
  результат = []
  перебрати 0..д_х як х1
    результат[х1] = (е[х1] / сума)
  кінець
  вернути результат
кінець

дія увага(ю,к,в)
  д = ю.довжина - 1
  ю_к = []
  перебрати 0..д як х
    ю_к[х] = ю[х] * к[х]
  кінець
  ю_к_софт = софт(ю_к)
  результат = []
  перебрати 0..д як х
    результат[х] = ю_к_софт[х] * в[х]
  кінець
  вернути результат
кінець

структура блок_уваги
  вхід Конв1Д
кінець

дія блок_уваги.створити(розмір)
  я.вхід = Конв1Д([])
  я.вхід.створити(3,розмір - 1)
кінець

дія блок_уваги.активувати(х)
  вх = я.вхід.активувати(х)
  ю = вх[0]
  к = вх[1]
  в = вх[2]
  вихід = увага(ю,к,в)
  вернути вихід
кінець

структура рівень_уваги
  вхід список
  вихід список
  блоки список
кінець

дія рівень_уваги.створити(розмір,к_б)
  к_б = к_б - 1
  я.вхід = створити_матрицю(розмір,розмір // к_б)
  я.вихід = створити_матрицю(розмір,розмір)
  я.блоки = []
  перебрати 0..к_б як х
    я.блоки[х] = блок_уваги(Конв1Д([]))
    я.блоки[х].створити(розмір // к_б)
  кінець
кінець

дія рівень_уваги.активувати(х)
  д_б = я.блоки.довжина - 1
  вхід = помножити_матриці(я.вхід,х)
  вихід = []
  перебрати 0..д_б як х1
    вихід[х1] = я.блоки[х1].активувати(вхід)
  кінець
  індекс = 0
  результат = []
  перебрати 0..д_б як х1
    перебрати 0..(вихід[0].довжина - 1) як х2
      результат[індекс] = вихід[х1][х2]
      індекс = індекс + 1
    кінець
  кінець
  результат = помножити_матриці(я.вихід,результат)
  вернути результат
кінець

у1 = рівень_уваги([],[],[])
у1.створити(8,4)
друк(у1.активувати([1,1,2,3,1,1,1,1]))
)";
  const auto parser_result = mavka::parser::parse(code);
  if (parser_result->error) {
    std::cout << parser_result->error->message << std::endl;
    return 1;
  }
  const auto result = supercompiler::compile(parser_result->program_node);
  if (result->error) {
    std::cout << result->error->message << std::endl;
    return 1;
  }
  std::cout << "compilation successful" << std::endl;
  return 0;
}